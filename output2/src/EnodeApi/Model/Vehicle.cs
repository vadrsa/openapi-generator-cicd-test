/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Vehicle
    /// </summary>
    [DataContract(Name = "Vehicle")]
    public partial class Vehicle : IEquatable<Vehicle>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name = "vendor", IsRequired = true, EmitDefaultValue = true)]
        public VehicleVendor Vendor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Vehicle() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="id">Vehicle ID (required).</param>
        /// <param name="vendor">vendor (required).</param>
        /// <param name="lastSeen">ISO8601 UTC timestamp at which live data was last available from Enode&#39;s perspective. (required).</param>
        /// <param name="isReachable">Whether live data from the vehicle is currently available from Enode&#39;s perspective. This &#39;reachability&#39; may refer to reading from a cache operated by the vehicle&#39;s cloud service if that service has determined that its cache is valid. (required).</param>
        /// <param name="chargingLocationId">ID of the charging location the vehicle is currently positioned at (if any). (required).</param>
        /// <param name="information">information (required).</param>
        /// <param name="chargeState">chargeState (required).</param>
        /// <param name="smartChargingPolicy">smartChargingPolicy (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="odometer">odometer (required).</param>
        /// <param name="capabilities">capabilities (required).</param>
        public Vehicle(string id = default(string), VehicleVendor vendor = default(VehicleVendor), DateTime? lastSeen = default(DateTime?), bool? isReachable = default(bool?), string chargingLocationId = default(string), VehicleInformation information = default(VehicleInformation), VehicleChargeState chargeState = default(VehicleChargeState), VehicleSmartChargingPolicy smartChargingPolicy = default(VehicleSmartChargingPolicy), VehicleLocation location = default(VehicleLocation), VehicleOdometer odometer = default(VehicleOdometer), VehicleCapabilities capabilities = default(VehicleCapabilities))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Vehicle and cannot be null");
            }
            this.Id = id;
            this.Vendor = vendor;
            // to ensure "lastSeen" is required (not null)
            if (lastSeen == null)
            {
                throw new ArgumentNullException("lastSeen is a required property for Vehicle and cannot be null");
            }
            this.LastSeen = lastSeen;
            // to ensure "isReachable" is required (not null)
            if (isReachable == null)
            {
                throw new ArgumentNullException("isReachable is a required property for Vehicle and cannot be null");
            }
            this.IsReachable = isReachable;
            // to ensure "chargingLocationId" is required (not null)
            if (chargingLocationId == null)
            {
                throw new ArgumentNullException("chargingLocationId is a required property for Vehicle and cannot be null");
            }
            this.ChargingLocationId = chargingLocationId;
            // to ensure "information" is required (not null)
            if (information == null)
            {
                throw new ArgumentNullException("information is a required property for Vehicle and cannot be null");
            }
            this.Information = information;
            // to ensure "chargeState" is required (not null)
            if (chargeState == null)
            {
                throw new ArgumentNullException("chargeState is a required property for Vehicle and cannot be null");
            }
            this.ChargeState = chargeState;
            // to ensure "smartChargingPolicy" is required (not null)
            if (smartChargingPolicy == null)
            {
                throw new ArgumentNullException("smartChargingPolicy is a required property for Vehicle and cannot be null");
            }
            this.SmartChargingPolicy = smartChargingPolicy;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for Vehicle and cannot be null");
            }
            this.Location = location;
            // to ensure "odometer" is required (not null)
            if (odometer == null)
            {
                throw new ArgumentNullException("odometer is a required property for Vehicle and cannot be null");
            }
            this.Odometer = odometer;
            // to ensure "capabilities" is required (not null)
            if (capabilities == null)
            {
                throw new ArgumentNullException("capabilities is a required property for Vehicle and cannot be null");
            }
            this.Capabilities = capabilities;
        }

        /// <summary>
        /// Vehicle ID
        /// </summary>
        /// <value>Vehicle ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp at which live data was last available from Enode&#39;s perspective.
        /// </summary>
        /// <value>ISO8601 UTC timestamp at which live data was last available from Enode&#39;s perspective.</value>
        [DataMember(Name = "lastSeen", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastSeen { get; set; }

        /// <summary>
        /// Whether live data from the vehicle is currently available from Enode&#39;s perspective. This &#39;reachability&#39; may refer to reading from a cache operated by the vehicle&#39;s cloud service if that service has determined that its cache is valid.
        /// </summary>
        /// <value>Whether live data from the vehicle is currently available from Enode&#39;s perspective. This &#39;reachability&#39; may refer to reading from a cache operated by the vehicle&#39;s cloud service if that service has determined that its cache is valid.</value>
        [DataMember(Name = "isReachable", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsReachable { get; set; }

        /// <summary>
        /// ID of the charging location the vehicle is currently positioned at (if any).
        /// </summary>
        /// <value>ID of the charging location the vehicle is currently positioned at (if any).</value>
        [DataMember(Name = "chargingLocationId", IsRequired = true, EmitDefaultValue = true)]
        public string ChargingLocationId { get; set; }

        /// <summary>
        /// Gets or Sets Information
        /// </summary>
        [DataMember(Name = "information", IsRequired = true, EmitDefaultValue = true)]
        public VehicleInformation Information { get; set; }

        /// <summary>
        /// Gets or Sets ChargeState
        /// </summary>
        [DataMember(Name = "chargeState", IsRequired = true, EmitDefaultValue = true)]
        public VehicleChargeState ChargeState { get; set; }

        /// <summary>
        /// Gets or Sets SmartChargingPolicy
        /// </summary>
        [DataMember(Name = "smartChargingPolicy", IsRequired = true, EmitDefaultValue = true)]
        public VehicleSmartChargingPolicy SmartChargingPolicy { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public VehicleLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Odometer
        /// </summary>
        [DataMember(Name = "odometer", IsRequired = true, EmitDefaultValue = true)]
        public VehicleOdometer Odometer { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name = "capabilities", IsRequired = true, EmitDefaultValue = true)]
        public VehicleCapabilities Capabilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  IsReachable: ").Append(IsReachable).Append("\n");
            sb.Append("  ChargingLocationId: ").Append(ChargingLocationId).Append("\n");
            sb.Append("  Information: ").Append(Information).Append("\n");
            sb.Append("  ChargeState: ").Append(ChargeState).Append("\n");
            sb.Append("  SmartChargingPolicy: ").Append(SmartChargingPolicy).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Odometer: ").Append(Odometer).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vehicle);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    this.Vendor.Equals(input.Vendor)
                ) && 
                (
                    this.LastSeen == input.LastSeen ||
                    (this.LastSeen != null &&
                    this.LastSeen.Equals(input.LastSeen))
                ) && 
                (
                    this.IsReachable == input.IsReachable ||
                    (this.IsReachable != null &&
                    this.IsReachable.Equals(input.IsReachable))
                ) && 
                (
                    this.ChargingLocationId == input.ChargingLocationId ||
                    (this.ChargingLocationId != null &&
                    this.ChargingLocationId.Equals(input.ChargingLocationId))
                ) && 
                (
                    this.Information == input.Information ||
                    (this.Information != null &&
                    this.Information.Equals(input.Information))
                ) && 
                (
                    this.ChargeState == input.ChargeState ||
                    (this.ChargeState != null &&
                    this.ChargeState.Equals(input.ChargeState))
                ) && 
                (
                    this.SmartChargingPolicy == input.SmartChargingPolicy ||
                    (this.SmartChargingPolicy != null &&
                    this.SmartChargingPolicy.Equals(input.SmartChargingPolicy))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Odometer == input.Odometer ||
                    (this.Odometer != null &&
                    this.Odometer.Equals(input.Odometer))
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    (this.Capabilities != null &&
                    this.Capabilities.Equals(input.Capabilities))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vendor.GetHashCode();
                if (this.LastSeen != null)
                {
                    hashCode = (hashCode * 59) + this.LastSeen.GetHashCode();
                }
                if (this.IsReachable != null)
                {
                    hashCode = (hashCode * 59) + this.IsReachable.GetHashCode();
                }
                if (this.ChargingLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingLocationId.GetHashCode();
                }
                if (this.Information != null)
                {
                    hashCode = (hashCode * 59) + this.Information.GetHashCode();
                }
                if (this.ChargeState != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeState.GetHashCode();
                }
                if (this.SmartChargingPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.SmartChargingPolicy.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Odometer != null)
                {
                    hashCode = (hashCode * 59) + this.Odometer.GetHashCode();
                }
                if (this.Capabilities != null)
                {
                    hashCode = (hashCode * 59) + this.Capabilities.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
