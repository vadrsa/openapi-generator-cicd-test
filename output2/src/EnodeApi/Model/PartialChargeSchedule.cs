/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// PartialChargeSchedule
    /// </summary>
    [DataContract(Name = "PartialChargeSchedule")]
    public partial class PartialChargeSchedule : IEquatable<PartialChargeSchedule>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TargetType
        /// </summary>
        [DataMember(Name = "targetType", EmitDefaultValue = false)]
        public ChargeableVendorType? TargetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialChargeSchedule" /> class.
        /// </summary>
        /// <param name="targetId">ID of the asset (Vehicle/Charger) to which this schedule applies.</param>
        /// <param name="targetType">targetType.</param>
        /// <param name="chargingLocationId">ID of the Charging Location to which this schedule applies. The behaviour of a null value differes based on the &#x60;targetType&#x60;. For chargers, a null value is essentially ignored and the schedule is applied even if the charger isn&#39;t at a charging location.  This is designed to prevent schedules from controlling vehicles at public chargers where the user doesn&#39;t pay for electricity..</param>
        /// <param name="isEnabled">Whether this Schedule should be attempting to control the target&#39;s charge state. (default to true).</param>
        /// <param name="defaultShouldCharge">When no rule is active, the default charge state for the target..</param>
        /// <param name="rules">Each rule sets a value for &#x60;shouldCharge&#x60;, either &#x60;true&#x60; or &#x60;false&#x60;. All other properties of the rule are optional filters that limit the times to which this rule applies..</param>
        public PartialChargeSchedule(string targetId = default(string), ChargeableVendorType? targetType = default(ChargeableVendorType?), Guid? chargingLocationId = default(Guid?), bool isEnabled = true, bool defaultShouldCharge = default(bool), List<ChargeSchedule> rules = default(List<ChargeSchedule>))
        {
            this.TargetId = targetId;
            this.TargetType = targetType;
            this.ChargingLocationId = chargingLocationId;
            this.IsEnabled = isEnabled;
            this.DefaultShouldCharge = defaultShouldCharge;
            this.Rules = rules;
        }

        /// <summary>
        /// ID of the asset (Vehicle/Charger) to which this schedule applies
        /// </summary>
        /// <value>ID of the asset (Vehicle/Charger) to which this schedule applies</value>
        [DataMember(Name = "targetId", EmitDefaultValue = false)]
        public string TargetId { get; set; }

        /// <summary>
        /// ID of the Charging Location to which this schedule applies. The behaviour of a null value differes based on the &#x60;targetType&#x60;. For chargers, a null value is essentially ignored and the schedule is applied even if the charger isn&#39;t at a charging location.  This is designed to prevent schedules from controlling vehicles at public chargers where the user doesn&#39;t pay for electricity.
        /// </summary>
        /// <value>ID of the Charging Location to which this schedule applies. The behaviour of a null value differes based on the &#x60;targetType&#x60;. For chargers, a null value is essentially ignored and the schedule is applied even if the charger isn&#39;t at a charging location.  This is designed to prevent schedules from controlling vehicles at public chargers where the user doesn&#39;t pay for electricity.</value>
        [DataMember(Name = "chargingLocationId", EmitDefaultValue = true)]
        public Guid? ChargingLocationId { get; set; }

        /// <summary>
        /// Whether this Schedule should be attempting to control the target&#39;s charge state.
        /// </summary>
        /// <value>Whether this Schedule should be attempting to control the target&#39;s charge state.</value>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// When no rule is active, the default charge state for the target.
        /// </summary>
        /// <value>When no rule is active, the default charge state for the target.</value>
        [DataMember(Name = "defaultShouldCharge", EmitDefaultValue = true)]
        public bool DefaultShouldCharge { get; set; }

        /// <summary>
        /// Each rule sets a value for &#x60;shouldCharge&#x60;, either &#x60;true&#x60; or &#x60;false&#x60;. All other properties of the rule are optional filters that limit the times to which this rule applies.
        /// </summary>
        /// <value>Each rule sets a value for &#x60;shouldCharge&#x60;, either &#x60;true&#x60; or &#x60;false&#x60;. All other properties of the rule are optional filters that limit the times to which this rule applies.</value>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public List<ChargeSchedule> Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartialChargeSchedule {\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  ChargingLocationId: ").Append(ChargingLocationId).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  DefaultShouldCharge: ").Append(DefaultShouldCharge).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartialChargeSchedule);
        }

        /// <summary>
        /// Returns true if PartialChargeSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of PartialChargeSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartialChargeSchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.TargetType == input.TargetType ||
                    this.TargetType.Equals(input.TargetType)
                ) && 
                (
                    this.ChargingLocationId == input.ChargingLocationId ||
                    (this.ChargingLocationId != null &&
                    this.ChargingLocationId.Equals(input.ChargingLocationId))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.DefaultShouldCharge == input.DefaultShouldCharge ||
                    this.DefaultShouldCharge.Equals(input.DefaultShouldCharge)
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TargetType.GetHashCode();
                if (this.ChargingLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingLocationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultShouldCharge.GetHashCode();
                if (this.Rules != null)
                {
                    hashCode = (hashCode * 59) + this.Rules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
