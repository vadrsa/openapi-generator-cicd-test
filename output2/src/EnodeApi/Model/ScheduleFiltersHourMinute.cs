/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// An interval composed of two clock times during which this rule applies each day. &#x60;to&#x60; always resolves to a timestamp after &#x60;from&#x60;, and thus may span across midnight and fall on the next day.
    /// </summary>
    [DataContract(Name = "ScheduleFilters_hourMinute")]
    public partial class ScheduleFiltersHourMinute : IEquatable<ScheduleFiltersHourMinute>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleFiltersHourMinute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleFiltersHourMinute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleFiltersHourMinute" /> class.
        /// </summary>
        /// <param name="from">Clock time from which this rule should apply each day. (required).</param>
        /// <param name="to">Clock time until which this rule should apply each day. (required).</param>
        public ScheduleFiltersHourMinute(string from = default(string), string to = default(string))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for ScheduleFiltersHourMinute and cannot be null");
            }
            this.From = from;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for ScheduleFiltersHourMinute and cannot be null");
            }
            this.To = to;
        }

        /// <summary>
        /// Clock time from which this rule should apply each day.
        /// </summary>
        /// <value>Clock time from which this rule should apply each day.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Clock time until which this rule should apply each day.
        /// </summary>
        /// <value>Clock time until which this rule should apply each day.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleFiltersHourMinute {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleFiltersHourMinute);
        }

        /// <summary>
        /// Returns true if ScheduleFiltersHourMinute instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleFiltersHourMinute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleFiltersHourMinute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // From (string) pattern
            Regex regexFrom = new Regex(@"\\d{2}:\\d{2}", RegexOptions.CultureInvariant);
            if (false == regexFrom.Match(this.From).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must match a pattern of " + regexFrom, new [] { "From" });
            }

            // To (string) pattern
            Regex regexTo = new Regex(@"\\d{2}:\\d{2}", RegexOptions.CultureInvariant);
            if (false == regexTo.Match(this.To).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must match a pattern of " + regexTo, new [] { "To" });
            }

            yield break;
        }
    }

}
