/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// An object describing valid states for this HVAC device.
    /// </summary>
    [DataContract(Name = "HVAC_capabilities")]
    public partial class HVACCapabilities : IEquatable<HVACCapabilities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HVACCapabilities" /> class.
        /// </summary>
        /// <param name="capableModes">A list of valid modes for this HVAC device..</param>
        /// <param name="capableHoldTypes">A list of valid hold types for this HVAC device..</param>
        /// <param name="coolSetpointRange">coolSetpointRange.</param>
        /// <param name="heatSetpointRange">heatSetpointRange.</param>
        /// <param name="setpointDifferenceRange">setpointDifferenceRange.</param>
        public HVACCapabilities(List<HvacMode> capableModes = default(List<HvacMode>), List<HvacHoldType> capableHoldTypes = default(List<HvacHoldType>), HVACCapabilitiesCoolSetpointRange coolSetpointRange = default(HVACCapabilitiesCoolSetpointRange), HVACCapabilitiesHeatSetpointRange heatSetpointRange = default(HVACCapabilitiesHeatSetpointRange), HVACCapabilitiesSetpointDifferenceRange setpointDifferenceRange = default(HVACCapabilitiesSetpointDifferenceRange))
        {
            this.CapableModes = capableModes;
            this.CapableHoldTypes = capableHoldTypes;
            this.CoolSetpointRange = coolSetpointRange;
            this.HeatSetpointRange = heatSetpointRange;
            this.SetpointDifferenceRange = setpointDifferenceRange;
        }

        /// <summary>
        /// A list of valid modes for this HVAC device.
        /// </summary>
        /// <value>A list of valid modes for this HVAC device.</value>
        [DataMember(Name = "capableModes", EmitDefaultValue = true)]
        public List<HvacMode> CapableModes { get; set; }

        /// <summary>
        /// A list of valid hold types for this HVAC device.
        /// </summary>
        /// <value>A list of valid hold types for this HVAC device.</value>
        [DataMember(Name = "capableHoldTypes", EmitDefaultValue = true)]
        public List<HvacHoldType> CapableHoldTypes { get; set; }

        /// <summary>
        /// Gets or Sets CoolSetpointRange
        /// </summary>
        [DataMember(Name = "coolSetpointRange", EmitDefaultValue = true)]
        public HVACCapabilitiesCoolSetpointRange CoolSetpointRange { get; set; }

        /// <summary>
        /// Gets or Sets HeatSetpointRange
        /// </summary>
        [DataMember(Name = "heatSetpointRange", EmitDefaultValue = true)]
        public HVACCapabilitiesHeatSetpointRange HeatSetpointRange { get; set; }

        /// <summary>
        /// Gets or Sets SetpointDifferenceRange
        /// </summary>
        [DataMember(Name = "setpointDifferenceRange", EmitDefaultValue = true)]
        public HVACCapabilitiesSetpointDifferenceRange SetpointDifferenceRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HVACCapabilities {\n");
            sb.Append("  CapableModes: ").Append(CapableModes).Append("\n");
            sb.Append("  CapableHoldTypes: ").Append(CapableHoldTypes).Append("\n");
            sb.Append("  CoolSetpointRange: ").Append(CoolSetpointRange).Append("\n");
            sb.Append("  HeatSetpointRange: ").Append(HeatSetpointRange).Append("\n");
            sb.Append("  SetpointDifferenceRange: ").Append(SetpointDifferenceRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HVACCapabilities);
        }

        /// <summary>
        /// Returns true if HVACCapabilities instances are equal
        /// </summary>
        /// <param name="input">Instance of HVACCapabilities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HVACCapabilities input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CapableModes == input.CapableModes ||
                    this.CapableModes != null &&
                    input.CapableModes != null &&
                    this.CapableModes.SequenceEqual(input.CapableModes)
                ) && 
                (
                    this.CapableHoldTypes == input.CapableHoldTypes ||
                    this.CapableHoldTypes != null &&
                    input.CapableHoldTypes != null &&
                    this.CapableHoldTypes.SequenceEqual(input.CapableHoldTypes)
                ) && 
                (
                    this.CoolSetpointRange == input.CoolSetpointRange ||
                    (this.CoolSetpointRange != null &&
                    this.CoolSetpointRange.Equals(input.CoolSetpointRange))
                ) && 
                (
                    this.HeatSetpointRange == input.HeatSetpointRange ||
                    (this.HeatSetpointRange != null &&
                    this.HeatSetpointRange.Equals(input.HeatSetpointRange))
                ) && 
                (
                    this.SetpointDifferenceRange == input.SetpointDifferenceRange ||
                    (this.SetpointDifferenceRange != null &&
                    this.SetpointDifferenceRange.Equals(input.SetpointDifferenceRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CapableModes != null)
                {
                    hashCode = (hashCode * 59) + this.CapableModes.GetHashCode();
                }
                if (this.CapableHoldTypes != null)
                {
                    hashCode = (hashCode * 59) + this.CapableHoldTypes.GetHashCode();
                }
                if (this.CoolSetpointRange != null)
                {
                    hashCode = (hashCode * 59) + this.CoolSetpointRange.GetHashCode();
                }
                if (this.HeatSetpointRange != null)
                {
                    hashCode = (hashCode * 59) + this.HeatSetpointRange.GetHashCode();
                }
                if (this.SetpointDifferenceRange != null)
                {
                    hashCode = (hashCode * 59) + this.SetpointDifferenceRange.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
