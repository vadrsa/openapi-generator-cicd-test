/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// InverterProductionState
    /// </summary>
    [DataContract(Name = "InverterProductionState")]
    public partial class InverterProductionState : IEquatable<InverterProductionState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InverterProductionState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InverterProductionState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InverterProductionState" /> class.
        /// </summary>
        /// <param name="productionRate">The current production rate in kW..</param>
        /// <param name="lastUpdated">ISO8601 UTC timestamp of last received production state update (required).</param>
        public InverterProductionState(decimal? productionRate = default(decimal?), DateTime? lastUpdated = default(DateTime?))
        {
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new ArgumentNullException("lastUpdated is a required property for InverterProductionState and cannot be null");
            }
            this.LastUpdated = lastUpdated;
            this.ProductionRate = productionRate;
        }

        /// <summary>
        /// The current production rate in kW.
        /// </summary>
        /// <value>The current production rate in kW.</value>
        [DataMember(Name = "productionRate", EmitDefaultValue = true)]
        public decimal? ProductionRate { get; set; }

        /// <summary>
        /// Whether the solar inverter is actively producing energy or not.
        /// </summary>
        /// <value>Whether the solar inverter is actively producing energy or not.</value>
        [DataMember(Name = "isProducing", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsProducing { get; private set; }

        /// <summary>
        /// Returns false as IsProducing should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsProducing()
        {
            return false;
        }
        /// <summary>
        /// ISO8601 UTC timestamp of last received production state update
        /// </summary>
        /// <value>ISO8601 UTC timestamp of last received production state update</value>
        [DataMember(Name = "lastUpdated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InverterProductionState {\n");
            sb.Append("  ProductionRate: ").Append(ProductionRate).Append("\n");
            sb.Append("  IsProducing: ").Append(IsProducing).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InverterProductionState);
        }

        /// <summary>
        /// Returns true if InverterProductionState instances are equal
        /// </summary>
        /// <param name="input">Instance of InverterProductionState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InverterProductionState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProductionRate == input.ProductionRate ||
                    (this.ProductionRate != null &&
                    this.ProductionRate.Equals(input.ProductionRate))
                ) && 
                (
                    this.IsProducing == input.IsProducing ||
                    (this.IsProducing != null &&
                    this.IsProducing.Equals(input.IsProducing))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductionRate != null)
                {
                    hashCode = (hashCode * 59) + this.ProductionRate.GetHashCode();
                }
                if (this.IsProducing != null)
                {
                    hashCode = (hashCode * 59) + this.IsProducing.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ProductionRate (decimal?) minimum
            if (this.ProductionRate < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProductionRate, must be a value greater than or equal to 0.", new [] { "ProductionRate" });
            }

            yield break;
        }
    }

}
