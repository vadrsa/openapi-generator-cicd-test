/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// A collection of descriptors that describe the capabilities of this specific vehicle
    /// </summary>
    [DataContract(Name = "VehicleCapabilities")]
    public partial class VehicleCapabilities : IEquatable<VehicleCapabilities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleCapabilities" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleCapabilities() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleCapabilities" /> class.
        /// </summary>
        /// <param name="chargeState">chargeState (required).</param>
        /// <param name="location">location (required).</param>
        /// <param name="information">information (required).</param>
        /// <param name="odometer">odometer (required).</param>
        /// <param name="startCharging">startCharging (required).</param>
        /// <param name="stopCharging">stopCharging (required).</param>
        /// <param name="smartCharging">smartCharging (required).</param>
        public VehicleCapabilities(ChargerCapabilitiesChargeState chargeState = default(ChargerCapabilitiesChargeState), VehicleCapabilitiesLocation location = default(VehicleCapabilitiesLocation), ChargerCapabilitiesInformation information = default(ChargerCapabilitiesInformation), VehicleCapabilitiesOdometer odometer = default(VehicleCapabilitiesOdometer), VehicleCapabilitiesStartCharging startCharging = default(VehicleCapabilitiesStartCharging), VehicleCapabilitiesStopCharging stopCharging = default(VehicleCapabilitiesStopCharging), VehicleCapabilitiesSmartCharging smartCharging = default(VehicleCapabilitiesSmartCharging))
        {
            // to ensure "chargeState" is required (not null)
            if (chargeState == null)
            {
                throw new ArgumentNullException("chargeState is a required property for VehicleCapabilities and cannot be null");
            }
            this.ChargeState = chargeState;
            // to ensure "location" is required (not null)
            if (location == null)
            {
                throw new ArgumentNullException("location is a required property for VehicleCapabilities and cannot be null");
            }
            this.Location = location;
            // to ensure "information" is required (not null)
            if (information == null)
            {
                throw new ArgumentNullException("information is a required property for VehicleCapabilities and cannot be null");
            }
            this.Information = information;
            // to ensure "odometer" is required (not null)
            if (odometer == null)
            {
                throw new ArgumentNullException("odometer is a required property for VehicleCapabilities and cannot be null");
            }
            this.Odometer = odometer;
            // to ensure "startCharging" is required (not null)
            if (startCharging == null)
            {
                throw new ArgumentNullException("startCharging is a required property for VehicleCapabilities and cannot be null");
            }
            this.StartCharging = startCharging;
            // to ensure "stopCharging" is required (not null)
            if (stopCharging == null)
            {
                throw new ArgumentNullException("stopCharging is a required property for VehicleCapabilities and cannot be null");
            }
            this.StopCharging = stopCharging;
            // to ensure "smartCharging" is required (not null)
            if (smartCharging == null)
            {
                throw new ArgumentNullException("smartCharging is a required property for VehicleCapabilities and cannot be null");
            }
            this.SmartCharging = smartCharging;
        }

        /// <summary>
        /// Gets or Sets ChargeState
        /// </summary>
        [DataMember(Name = "chargeState", IsRequired = true, EmitDefaultValue = true)]
        public ChargerCapabilitiesChargeState ChargeState { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", IsRequired = true, EmitDefaultValue = true)]
        public VehicleCapabilitiesLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Information
        /// </summary>
        [DataMember(Name = "information", IsRequired = true, EmitDefaultValue = true)]
        public ChargerCapabilitiesInformation Information { get; set; }

        /// <summary>
        /// Gets or Sets Odometer
        /// </summary>
        [DataMember(Name = "odometer", IsRequired = true, EmitDefaultValue = true)]
        public VehicleCapabilitiesOdometer Odometer { get; set; }

        /// <summary>
        /// Gets or Sets StartCharging
        /// </summary>
        [DataMember(Name = "startCharging", IsRequired = true, EmitDefaultValue = true)]
        public VehicleCapabilitiesStartCharging StartCharging { get; set; }

        /// <summary>
        /// Gets or Sets StopCharging
        /// </summary>
        [DataMember(Name = "stopCharging", IsRequired = true, EmitDefaultValue = true)]
        public VehicleCapabilitiesStopCharging StopCharging { get; set; }

        /// <summary>
        /// Gets or Sets SmartCharging
        /// </summary>
        [DataMember(Name = "smartCharging", IsRequired = true, EmitDefaultValue = true)]
        public VehicleCapabilitiesSmartCharging SmartCharging { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleCapabilities {\n");
            sb.Append("  ChargeState: ").Append(ChargeState).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Information: ").Append(Information).Append("\n");
            sb.Append("  Odometer: ").Append(Odometer).Append("\n");
            sb.Append("  StartCharging: ").Append(StartCharging).Append("\n");
            sb.Append("  StopCharging: ").Append(StopCharging).Append("\n");
            sb.Append("  SmartCharging: ").Append(SmartCharging).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleCapabilities);
        }

        /// <summary>
        /// Returns true if VehicleCapabilities instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleCapabilities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleCapabilities input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChargeState == input.ChargeState ||
                    (this.ChargeState != null &&
                    this.ChargeState.Equals(input.ChargeState))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Information == input.Information ||
                    (this.Information != null &&
                    this.Information.Equals(input.Information))
                ) && 
                (
                    this.Odometer == input.Odometer ||
                    (this.Odometer != null &&
                    this.Odometer.Equals(input.Odometer))
                ) && 
                (
                    this.StartCharging == input.StartCharging ||
                    (this.StartCharging != null &&
                    this.StartCharging.Equals(input.StartCharging))
                ) && 
                (
                    this.StopCharging == input.StopCharging ||
                    (this.StopCharging != null &&
                    this.StopCharging.Equals(input.StopCharging))
                ) && 
                (
                    this.SmartCharging == input.SmartCharging ||
                    (this.SmartCharging != null &&
                    this.SmartCharging.Equals(input.SmartCharging))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChargeState != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeState.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.Information != null)
                {
                    hashCode = (hashCode * 59) + this.Information.GetHashCode();
                }
                if (this.Odometer != null)
                {
                    hashCode = (hashCode * 59) + this.Odometer.GetHashCode();
                }
                if (this.StartCharging != null)
                {
                    hashCode = (hashCode * 59) + this.StartCharging.GetHashCode();
                }
                if (this.StopCharging != null)
                {
                    hashCode = (hashCode * 59) + this.StopCharging.GetHashCode();
                }
                if (this.SmartCharging != null)
                {
                    hashCode = (hashCode * 59) + this.SmartCharging.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
