/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Descriptive information about the Vehicle.
    /// </summary>
    [DataContract(Name = "VehicleInformation")]
    public partial class VehicleInformation : IEquatable<VehicleInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleInformation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleInformation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleInformation" /> class.
        /// </summary>
        /// <param name="id">The vendor&#39;s vehicle ID. Sometimes the same as the VIN. This value is deprecated because it changes over time. Do not use this value to refer to vehicles. (required).</param>
        /// <param name="vin">Vehicle VIN (required).</param>
        /// <param name="brand">Vehicle brand (required).</param>
        /// <param name="model">Vehicle model (required).</param>
        /// <param name="year">Vehicle production year (required).</param>
        public VehicleInformation(string id = default(string), string vin = default(string), string brand = default(string), string model = default(string), decimal? year = default(decimal?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for VehicleInformation and cannot be null");
            }
            this.Id = id;
            // to ensure "vin" is required (not null)
            if (vin == null)
            {
                throw new ArgumentNullException("vin is a required property for VehicleInformation and cannot be null");
            }
            this.Vin = vin;
            // to ensure "brand" is required (not null)
            if (brand == null)
            {
                throw new ArgumentNullException("brand is a required property for VehicleInformation and cannot be null");
            }
            this.Brand = brand;
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new ArgumentNullException("model is a required property for VehicleInformation and cannot be null");
            }
            this.Model = model;
            // to ensure "year" is required (not null)
            if (year == null)
            {
                throw new ArgumentNullException("year is a required property for VehicleInformation and cannot be null");
            }
            this.Year = year;
        }

        /// <summary>
        /// The vendor&#39;s vehicle ID. Sometimes the same as the VIN. This value is deprecated because it changes over time. Do not use this value to refer to vehicles.
        /// </summary>
        /// <value>The vendor&#39;s vehicle ID. Sometimes the same as the VIN. This value is deprecated because it changes over time. Do not use this value to refer to vehicles.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string Id { get; set; }

        /// <summary>
        /// Vehicle VIN
        /// </summary>
        /// <value>Vehicle VIN</value>
        [DataMember(Name = "vin", IsRequired = true, EmitDefaultValue = true)]
        public string Vin { get; set; }

        /// <summary>
        /// Vehicle brand
        /// </summary>
        /// <value>Vehicle brand</value>
        [DataMember(Name = "brand", IsRequired = true, EmitDefaultValue = true)]
        public string Brand { get; set; }

        /// <summary>
        /// Vehicle model
        /// </summary>
        /// <value>Vehicle model</value>
        [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Vehicle production year
        /// </summary>
        /// <value>Vehicle production year</value>
        [DataMember(Name = "year", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleInformation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Vin: ").Append(Vin).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleInformation);
        }

        /// <summary>
        /// Returns true if VehicleInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Vin == input.Vin ||
                    (this.Vin != null &&
                    this.Vin.Equals(input.Vin))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Vin != null)
                {
                    hashCode = (hashCode * 59) + this.Vin.GetHashCode();
                }
                if (this.Brand != null)
                {
                    hashCode = (hashCode * 59) + this.Brand.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.Year != null)
                {
                    hashCode = (hashCode * 59) + this.Year.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
