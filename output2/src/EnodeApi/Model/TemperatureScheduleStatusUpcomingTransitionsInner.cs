/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// TemperatureScheduleStatusUpcomingTransitionsInner
    /// </summary>
    [DataContract(Name = "TemperatureScheduleStatus_upcomingTransitions_inner")]
    public partial class TemperatureScheduleStatusUpcomingTransitionsInner : IEquatable<TemperatureScheduleStatusUpcomingTransitionsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureScheduleStatusUpcomingTransitionsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemperatureScheduleStatusUpcomingTransitionsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureScheduleStatusUpcomingTransitionsInner" /> class.
        /// </summary>
        /// <param name="at">ISO8601 UTC timestamp (required).</param>
        /// <param name="target">target.</param>
        public TemperatureScheduleStatusUpcomingTransitionsInner(DateTime at = default(DateTime), TemperatureScheduleStatusCurrent target = default(TemperatureScheduleStatusCurrent))
        {
            this.At = at;
            this.Target = target;
        }

        /// <summary>
        /// ISO8601 UTC timestamp
        /// </summary>
        /// <value>ISO8601 UTC timestamp</value>
        [DataMember(Name = "at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime At { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public TemperatureScheduleStatusCurrent Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemperatureScheduleStatusUpcomingTransitionsInner {\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemperatureScheduleStatusUpcomingTransitionsInner);
        }

        /// <summary>
        /// Returns true if TemperatureScheduleStatusUpcomingTransitionsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of TemperatureScheduleStatusUpcomingTransitionsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatureScheduleStatusUpcomingTransitionsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.At != null)
                {
                    hashCode = (hashCode * 59) + this.At.GetHashCode();
                }
                if (this.Target != null)
                {
                    hashCode = (hashCode * 59) + this.Target.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
