/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Descriptive information about the solar inverter
    /// </summary>
    [DataContract(Name = "InverterInformation")]
    public partial class InverterInformation : IEquatable<InverterInformation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InverterInformation" /> class.
        /// </summary>
        /// <param name="id">Solar inverter vendor ID.</param>
        /// <param name="brand">Solar inverter brand.</param>
        /// <param name="model">Solar inverter model.</param>
        /// <param name="siteName">Name of the site, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names..</param>
        /// <param name="installationDate">Solar inverter installation date.</param>
        public InverterInformation(string id = default(string), string brand = default(string), string model = default(string), string siteName = default(string), DateTime installationDate = default(DateTime))
        {
            this.Id = id;
            this.Brand = brand;
            this.Model = model;
            this.SiteName = siteName;
            this.InstallationDate = installationDate;
        }

        /// <summary>
        /// Solar inverter vendor ID
        /// </summary>
        /// <value>Solar inverter vendor ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Solar inverter brand
        /// </summary>
        /// <value>Solar inverter brand</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Solar inverter model
        /// </summary>
        /// <value>Solar inverter model</value>
        [DataMember(Name = "model", EmitDefaultValue = false)]
        public string Model { get; set; }

        /// <summary>
        /// Name of the site, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names.
        /// </summary>
        /// <value>Name of the site, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names.</value>
        [DataMember(Name = "siteName", EmitDefaultValue = false)]
        public string SiteName { get; set; }

        /// <summary>
        /// Solar inverter installation date
        /// </summary>
        /// <value>Solar inverter installation date</value>
        [DataMember(Name = "installationDate", EmitDefaultValue = false)]
        public DateTime InstallationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InverterInformation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  InstallationDate: ").Append(InstallationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InverterInformation);
        }

        /// <summary>
        /// Returns true if InverterInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of InverterInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InverterInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.SiteName == input.SiteName ||
                    (this.SiteName != null &&
                    this.SiteName.Equals(input.SiteName))
                ) && 
                (
                    this.InstallationDate == input.InstallationDate ||
                    (this.InstallationDate != null &&
                    this.InstallationDate.Equals(input.InstallationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Brand != null)
                {
                    hashCode = (hashCode * 59) + this.Brand.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.SiteName != null)
                {
                    hashCode = (hashCode * 59) + this.SiteName.GetHashCode();
                }
                if (this.InstallationDate != null)
                {
                    hashCode = (hashCode * 59) + this.InstallationDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
