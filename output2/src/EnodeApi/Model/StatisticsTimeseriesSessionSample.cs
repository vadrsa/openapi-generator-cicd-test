/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// StatisticsTimeseriesSessionSample
    /// </summary>
    [DataContract(Name = "StatisticsTimeseriesSessionSample")]
    public partial class StatisticsTimeseriesSessionSample : IEquatable<StatisticsTimeseriesSessionSample>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsTimeseriesSessionSample" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatisticsTimeseriesSessionSample() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsTimeseriesSessionSample" /> class.
        /// </summary>
        /// <param name="id">ID for this session. (required).</param>
        /// <param name="targetId">ID of the hardware type for this session. (required).</param>
        /// <param name="chargingLocationId">Charging Location ID for this session. (required).</param>
        /// <param name="from">Start time. (required).</param>
        /// <param name="to">End time. (required).</param>
        /// <param name="kw">kw (required).</param>
        /// <param name="kwhSum">Total power consumption in kWh (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="costSum">Total cost in &#x60;&lt;CURRENCY&gt;&#x60; (required).</param>
        /// <param name="smartSession">The values in &#x60;smartStats&#x60; will all be &#x60;null&#x60; if &#x60;smartSession&#x60; is &#x60;false&#x60; (required).</param>
        /// <param name="smartStats">smartStats (required).</param>
        public StatisticsTimeseriesSessionSample(string id = default(string), string targetId = default(string), string chargingLocationId = default(string), DateTime from = default(DateTime), DateTime to = default(DateTime), ChargeRateAggregates kw = default(ChargeRateAggregates), decimal kwhSum = default(decimal), PriceAggregates price = default(PriceAggregates), decimal costSum = default(decimal), bool smartSession = default(bool), StatisticsTimeseriesSessionSampleSmartStats smartStats = default(StatisticsTimeseriesSessionSampleSmartStats))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for StatisticsTimeseriesSessionSample and cannot be null");
            }
            this.Id = id;
            // to ensure "targetId" is required (not null)
            if (targetId == null)
            {
                throw new ArgumentNullException("targetId is a required property for StatisticsTimeseriesSessionSample and cannot be null");
            }
            this.TargetId = targetId;
            // to ensure "chargingLocationId" is required (not null)
            if (chargingLocationId == null)
            {
                throw new ArgumentNullException("chargingLocationId is a required property for StatisticsTimeseriesSessionSample and cannot be null");
            }
            this.ChargingLocationId = chargingLocationId;
            this.From = from;
            this.To = to;
            // to ensure "kw" is required (not null)
            if (kw == null)
            {
                throw new ArgumentNullException("kw is a required property for StatisticsTimeseriesSessionSample and cannot be null");
            }
            this.Kw = kw;
            this.KwhSum = kwhSum;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for StatisticsTimeseriesSessionSample and cannot be null");
            }
            this.Price = price;
            this.CostSum = costSum;
            this.SmartSession = smartSession;
            // to ensure "smartStats" is required (not null)
            if (smartStats == null)
            {
                throw new ArgumentNullException("smartStats is a required property for StatisticsTimeseriesSessionSample and cannot be null");
            }
            this.SmartStats = smartStats;
        }

        /// <summary>
        /// ID for this session.
        /// </summary>
        /// <value>ID for this session.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// ID of the hardware type for this session.
        /// </summary>
        /// <value>ID of the hardware type for this session.</value>
        [DataMember(Name = "targetId", IsRequired = true, EmitDefaultValue = true)]
        public string TargetId { get; set; }

        /// <summary>
        /// Charging Location ID for this session.
        /// </summary>
        /// <value>Charging Location ID for this session.</value>
        [DataMember(Name = "chargingLocationId", IsRequired = true, EmitDefaultValue = true)]
        public string ChargingLocationId { get; set; }

        /// <summary>
        /// Start time.
        /// </summary>
        /// <value>Start time.</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public DateTime From { get; set; }

        /// <summary>
        /// End time.
        /// </summary>
        /// <value>End time.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public DateTime To { get; set; }

        /// <summary>
        /// Gets or Sets Kw
        /// </summary>
        [DataMember(Name = "kw", IsRequired = true, EmitDefaultValue = true)]
        public ChargeRateAggregates Kw { get; set; }

        /// <summary>
        /// Total power consumption in kWh
        /// </summary>
        /// <value>Total power consumption in kWh</value>
        [DataMember(Name = "kwhSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal KwhSum { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public PriceAggregates Price { get; set; }

        /// <summary>
        /// Total cost in &#x60;&lt;CURRENCY&gt;&#x60;
        /// </summary>
        /// <value>Total cost in &#x60;&lt;CURRENCY&gt;&#x60;</value>
        [DataMember(Name = "costSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal CostSum { get; set; }

        /// <summary>
        /// The values in &#x60;smartStats&#x60; will all be &#x60;null&#x60; if &#x60;smartSession&#x60; is &#x60;false&#x60;
        /// </summary>
        /// <value>The values in &#x60;smartStats&#x60; will all be &#x60;null&#x60; if &#x60;smartSession&#x60; is &#x60;false&#x60;</value>
        [DataMember(Name = "smartSession", IsRequired = true, EmitDefaultValue = true)]
        public bool SmartSession { get; set; }

        /// <summary>
        /// Gets or Sets SmartStats
        /// </summary>
        [DataMember(Name = "smartStats", IsRequired = true, EmitDefaultValue = true)]
        public StatisticsTimeseriesSessionSampleSmartStats SmartStats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsTimeseriesSessionSample {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  ChargingLocationId: ").Append(ChargingLocationId).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Kw: ").Append(Kw).Append("\n");
            sb.Append("  KwhSum: ").Append(KwhSum).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CostSum: ").Append(CostSum).Append("\n");
            sb.Append("  SmartSession: ").Append(SmartSession).Append("\n");
            sb.Append("  SmartStats: ").Append(SmartStats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsTimeseriesSessionSample);
        }

        /// <summary>
        /// Returns true if StatisticsTimeseriesSessionSample instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsTimeseriesSessionSample to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsTimeseriesSessionSample input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.ChargingLocationId == input.ChargingLocationId ||
                    (this.ChargingLocationId != null &&
                    this.ChargingLocationId.Equals(input.ChargingLocationId))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Kw == input.Kw ||
                    (this.Kw != null &&
                    this.Kw.Equals(input.Kw))
                ) && 
                (
                    this.KwhSum == input.KwhSum ||
                    this.KwhSum.Equals(input.KwhSum)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.CostSum == input.CostSum ||
                    this.CostSum.Equals(input.CostSum)
                ) && 
                (
                    this.SmartSession == input.SmartSession ||
                    this.SmartSession.Equals(input.SmartSession)
                ) && 
                (
                    this.SmartStats == input.SmartStats ||
                    (this.SmartStats != null &&
                    this.SmartStats.Equals(input.SmartStats))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TargetId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetId.GetHashCode();
                }
                if (this.ChargingLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingLocationId.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Kw != null)
                {
                    hashCode = (hashCode * 59) + this.Kw.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KwhSum.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CostSum.GetHashCode();
                hashCode = (hashCode * 59) + this.SmartSession.GetHashCode();
                if (this.SmartStats != null)
                {
                    hashCode = (hashCode * 59) + this.SmartStats.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
