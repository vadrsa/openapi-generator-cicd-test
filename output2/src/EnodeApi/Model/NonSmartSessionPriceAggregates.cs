/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Aggregate statistics for power price (&#x60;&lt;CURRENCY&gt;&#x60; per kWh), calculated as if the charging had ocurred uninterrupted without being delayed by Smart Charging
    /// </summary>
    [DataContract(Name = "NonSmartSessionPriceAggregates")]
    public partial class NonSmartSessionPriceAggregates : IEquatable<NonSmartSessionPriceAggregates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NonSmartSessionPriceAggregates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NonSmartSessionPriceAggregates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NonSmartSessionPriceAggregates" /> class.
        /// </summary>
        /// <param name="min">min (required).</param>
        /// <param name="max">max (required).</param>
        /// <param name="mean">mean (required).</param>
        public NonSmartSessionPriceAggregates(decimal? min = default(decimal?), decimal? max = default(decimal?), decimal? mean = default(decimal?))
        {
            // to ensure "min" is required (not null)
            if (min == null)
            {
                throw new ArgumentNullException("min is a required property for NonSmartSessionPriceAggregates and cannot be null");
            }
            this.Min = min;
            // to ensure "max" is required (not null)
            if (max == null)
            {
                throw new ArgumentNullException("max is a required property for NonSmartSessionPriceAggregates and cannot be null");
            }
            this.Max = max;
            // to ensure "mean" is required (not null)
            if (mean == null)
            {
                throw new ArgumentNullException("mean is a required property for NonSmartSessionPriceAggregates and cannot be null");
            }
            this.Mean = mean;
        }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name = "min", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name = "max", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Max { get; set; }

        /// <summary>
        /// Gets or Sets Mean
        /// </summary>
        [DataMember(Name = "mean", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Mean { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NonSmartSessionPriceAggregates {\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Mean: ").Append(Mean).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NonSmartSessionPriceAggregates);
        }

        /// <summary>
        /// Returns true if NonSmartSessionPriceAggregates instances are equal
        /// </summary>
        /// <param name="input">Instance of NonSmartSessionPriceAggregates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NonSmartSessionPriceAggregates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Min == input.Min ||
                    (this.Min != null &&
                    this.Min.Equals(input.Min))
                ) && 
                (
                    this.Max == input.Max ||
                    (this.Max != null &&
                    this.Max.Equals(input.Max))
                ) && 
                (
                    this.Mean == input.Mean ||
                    (this.Mean != null &&
                    this.Mean.Equals(input.Mean))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Min != null)
                {
                    hashCode = (hashCode * 59) + this.Min.GetHashCode();
                }
                if (this.Max != null)
                {
                    hashCode = (hashCode * 59) + this.Max.GetHashCode();
                }
                if (this.Mean != null)
                {
                    hashCode = (hashCode * 59) + this.Mean.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
