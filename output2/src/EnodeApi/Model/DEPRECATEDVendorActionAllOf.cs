/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// DEPRECATEDVendorActionAllOf
    /// </summary>
    [DataContract(Name = "DEPRECATED_VendorAction_allOf")]
    public partial class DEPRECATEDVendorActionAllOf : IEquatable<DEPRECATEDVendorActionAllOf>, IValidatableObject
    {
        /// <summary>
        /// Defines EntityType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EntityTypeEnum
        {
            /// <summary>
            /// Enum Vehicle for value: vehicle
            /// </summary>
            [EnumMember(Value = "vehicle")]
            Vehicle = 1,

            /// <summary>
            /// Enum Charger for value: charger
            /// </summary>
            [EnumMember(Value = "charger")]
            Charger = 2,

            /// <summary>
            /// Enum Hvac for value: hvac
            /// </summary>
            [EnumMember(Value = "hvac")]
            Hvac = 3,

            /// <summary>
            /// Enum Inverter for value: inverter
            /// </summary>
            [EnumMember(Value = "inverter")]
            Inverter = 4

        }


        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        [Obsolete]
        public EntityTypeEnum? EntityType { get; set; }
        /// <summary>
        /// Defines ChargeableType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChargeableTypeEnum
        {
            /// <summary>
            /// Enum Vehicle for value: vehicle
            /// </summary>
            [EnumMember(Value = "vehicle")]
            Vehicle = 1,

            /// <summary>
            /// Enum Charger for value: charger
            /// </summary>
            [EnumMember(Value = "charger")]
            Charger = 2,

            /// <summary>
            /// Enum Hvac for value: hvac
            /// </summary>
            [EnumMember(Value = "hvac")]
            Hvac = 3,

            /// <summary>
            /// Enum Inverter for value: inverter
            /// </summary>
            [EnumMember(Value = "inverter")]
            Inverter = 4

        }


        /// <summary>
        /// Gets or Sets ChargeableType
        /// </summary>
        [DataMember(Name = "chargeableType", EmitDefaultValue = false)]
        [Obsolete]
        public ChargeableTypeEnum? ChargeableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DEPRECATEDVendorActionAllOf" /> class.
        /// </summary>
        /// <param name="entityId">entityId.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="chargeableId">chargeableId.</param>
        /// <param name="chargeableType">chargeableType.</param>
        public DEPRECATEDVendorActionAllOf(string entityId = default(string), EntityTypeEnum? entityType = default(EntityTypeEnum?), string chargeableId = default(string), ChargeableTypeEnum? chargeableType = default(ChargeableTypeEnum?))
        {
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.ChargeableId = chargeableId;
            this.ChargeableType = chargeableType;
        }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        [Obsolete]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets ChargeableId
        /// </summary>
        [DataMember(Name = "chargeableId", EmitDefaultValue = false)]
        [Obsolete]
        public string ChargeableId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DEPRECATEDVendorActionAllOf {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  ChargeableId: ").Append(ChargeableId).Append("\n");
            sb.Append("  ChargeableType: ").Append(ChargeableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DEPRECATEDVendorActionAllOf);
        }

        /// <summary>
        /// Returns true if DEPRECATEDVendorActionAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of DEPRECATEDVendorActionAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DEPRECATEDVendorActionAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    this.EntityType.Equals(input.EntityType)
                ) && 
                (
                    this.ChargeableId == input.ChargeableId ||
                    (this.ChargeableId != null &&
                    this.ChargeableId.Equals(input.ChargeableId))
                ) && 
                (
                    this.ChargeableType == input.ChargeableType ||
                    this.ChargeableType.Equals(input.ChargeableType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                if (this.ChargeableId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeableId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChargeableType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
