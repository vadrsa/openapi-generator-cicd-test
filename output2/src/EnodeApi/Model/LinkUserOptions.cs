/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// LinkUserOptions
    /// </summary>
    [DataContract(Name = "LinkUserOptions")]
    public partial class LinkUserOptions : IEquatable<LinkUserOptions>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VendorType
        /// </summary>
        [DataMember(Name = "vendorType", EmitDefaultValue = false)]
        public VendorType? VendorType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkUserOptions" /> class.
        /// </summary>
        /// <param name="vendor">vendor.</param>
        /// <param name="vendorType">vendorType.</param>
        /// <param name="forceLanguage">forceLanguage.</param>
        /// <param name="scopes">The scope(s) you wish to request access to when linking an asset..</param>
        /// <param name="redirectUri">A URI to redirect the user to after successfully linking an asset..</param>
        public LinkUserOptions(LinkUserOptionsVendor vendor = default(LinkUserOptionsVendor), VendorType? vendorType = default(VendorType?), LinkUserOptionsForceLanguage forceLanguage = default(LinkUserOptionsForceLanguage), List<LinkUserOptionsScopesInner> scopes = default(List<LinkUserOptionsScopesInner>), string redirectUri = default(string))
        {
            this.Vendor = vendor;
            this.VendorType = vendorType;
            this.ForceLanguage = forceLanguage;
            this.Scopes = scopes;
            this.RedirectUri = redirectUri;
        }

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name = "vendor", EmitDefaultValue = false)]
        public LinkUserOptionsVendor Vendor { get; set; }

        /// <summary>
        /// Gets or Sets ForceLanguage
        /// </summary>
        [DataMember(Name = "forceLanguage", EmitDefaultValue = false)]
        public LinkUserOptionsForceLanguage ForceLanguage { get; set; }

        /// <summary>
        /// The scope(s) you wish to request access to when linking an asset.
        /// </summary>
        /// <value>The scope(s) you wish to request access to when linking an asset.</value>
        [DataMember(Name = "scopes", EmitDefaultValue = false)]
        public List<LinkUserOptionsScopesInner> Scopes { get; set; }

        /// <summary>
        /// A URI to redirect the user to after successfully linking an asset.
        /// </summary>
        /// <value>A URI to redirect the user to after successfully linking an asset.</value>
        [DataMember(Name = "redirectUri", EmitDefaultValue = false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkUserOptions {\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  VendorType: ").Append(VendorType).Append("\n");
            sb.Append("  ForceLanguage: ").Append(ForceLanguage).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkUserOptions);
        }

        /// <summary>
        /// Returns true if LinkUserOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkUserOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkUserOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.VendorType == input.VendorType ||
                    this.VendorType.Equals(input.VendorType)
                ) && 
                (
                    this.ForceLanguage == input.ForceLanguage ||
                    (this.ForceLanguage != null &&
                    this.ForceLanguage.Equals(input.ForceLanguage))
                ) && 
                (
                    this.Scopes == input.Scopes ||
                    this.Scopes != null &&
                    input.Scopes != null &&
                    this.Scopes.SequenceEqual(input.Scopes)
                ) && 
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Vendor != null)
                {
                    hashCode = (hashCode * 59) + this.Vendor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VendorType.GetHashCode();
                if (this.ForceLanguage != null)
                {
                    hashCode = (hashCode * 59) + this.ForceLanguage.GetHashCode();
                }
                if (this.Scopes != null)
                {
                    hashCode = (hashCode * 59) + this.Scopes.GetHashCode();
                }
                if (this.RedirectUri != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUri.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
