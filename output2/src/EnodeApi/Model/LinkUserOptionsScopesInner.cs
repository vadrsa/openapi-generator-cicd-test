/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;
using System.Reflection;

namespace EnodeApi.Model
{
    /// <summary>
    /// LinkUserOptionsScopesInner
    /// </summary>
    [JsonConverter(typeof(LinkUserOptionsScopesInnerJsonConverter))]
    [DataContract(Name = "LinkUserOptions_scopes_inner")]
    public partial class LinkUserOptionsScopesInner : AbstractOpenAPISchema, IEquatable<LinkUserOptionsScopesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkUserOptionsScopesInner" /> class
        /// with the <see cref="Scopes" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of Scopes.</param>
        public LinkUserOptionsScopesInner(Scopes actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(Scopes))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: Scopes");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `Scopes`. If the actual instance is not `Scopes`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of Scopes</returns>
        public Scopes GetScopes()
        {
            return (Scopes)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkUserOptionsScopesInner {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, LinkUserOptionsScopesInner.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of LinkUserOptionsScopesInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of LinkUserOptionsScopesInner</returns>
        public static LinkUserOptionsScopesInner FromJson(string jsonString)
        {
            LinkUserOptionsScopesInner newLinkUserOptionsScopesInner = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newLinkUserOptionsScopesInner;
            }

            try
            {
                newLinkUserOptionsScopesInner = new LinkUserOptionsScopesInner(JsonConvert.DeserializeObject<Scopes>(jsonString, LinkUserOptionsScopesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newLinkUserOptionsScopesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into Scopes: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkUserOptionsScopesInner);
        }

        /// <summary>
        /// Returns true if LinkUserOptionsScopesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkUserOptionsScopesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkUserOptionsScopesInner input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for LinkUserOptionsScopesInner
    /// </summary>
    public class LinkUserOptionsScopesInnerJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(LinkUserOptionsScopesInner).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return LinkUserOptionsScopesInner.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
