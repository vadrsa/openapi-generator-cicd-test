/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Deprecated, replaced by the smartOverride field.
    /// </summary>
    [DataContract(Name = "DEPRECATED_ExternalStart")]
    public partial class DEPRECATEDExternalStart : IEquatable<DEPRECATEDExternalStart>, IValidatableObject
    {
        /// <summary>
        /// The Vendor Type of the target entity this smart override is referencing.
        /// </summary>
        /// <value>The Vendor Type of the target entity this smart override is referencing.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TargetTypeEnum
        {
            /// <summary>
            /// Enum Vehicle for value: vehicle
            /// </summary>
            [EnumMember(Value = "vehicle")]
            Vehicle = 1,

            /// <summary>
            /// Enum Charger for value: charger
            /// </summary>
            [EnumMember(Value = "charger")]
            Charger = 2

        }


        /// <summary>
        /// The Vendor Type of the target entity this smart override is referencing.
        /// </summary>
        /// <value>The Vendor Type of the target entity this smart override is referencing.</value>
        [DataMember(Name = "targetType", IsRequired = true, EmitDefaultValue = true)]
        public TargetTypeEnum TargetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DEPRECATEDExternalStart" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DEPRECATEDExternalStart() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DEPRECATEDExternalStart" /> class.
        /// </summary>
        /// <param name="createdAt">ISO8601 UTC timestamp at which the smart override was created. (required).</param>
        /// <param name="endedAt">ISO8601 UTC timestamp at which the smart override was ended. If null, the smart override is still active. (required).</param>
        /// <param name="targetType">The Vendor Type of the target entity this smart override is referencing. (required).</param>
        /// <param name="targetId">targetId (required).</param>
        /// <param name="vendorActionId">The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results. (required).</param>
        public DEPRECATEDExternalStart(DateTime createdAt = default(DateTime), DateTime? endedAt = default(DateTime?), TargetTypeEnum targetType = default(TargetTypeEnum), string targetId = default(string), string vendorActionId = default(string))
        {
            this.CreatedAt = createdAt;
            // to ensure "endedAt" is required (not null)
            if (endedAt == null)
            {
                throw new ArgumentNullException("endedAt is a required property for DEPRECATEDExternalStart and cannot be null");
            }
            this.EndedAt = endedAt;
            this.TargetType = targetType;
            // to ensure "targetId" is required (not null)
            if (targetId == null)
            {
                throw new ArgumentNullException("targetId is a required property for DEPRECATEDExternalStart and cannot be null");
            }
            this.TargetId = targetId;
            // to ensure "vendorActionId" is required (not null)
            if (vendorActionId == null)
            {
                throw new ArgumentNullException("vendorActionId is a required property for DEPRECATEDExternalStart and cannot be null");
            }
            this.VendorActionId = vendorActionId;
        }

        /// <summary>
        /// ISO8601 UTC timestamp at which the smart override was created.
        /// </summary>
        /// <value>ISO8601 UTC timestamp at which the smart override was created.</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp at which the smart override was ended. If null, the smart override is still active.
        /// </summary>
        /// <value>ISO8601 UTC timestamp at which the smart override was ended. If null, the smart override is still active.</value>
        [DataMember(Name = "endedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? EndedAt { get; set; }

        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name = "targetId", IsRequired = true, EmitDefaultValue = true)]
        public string TargetId { get; set; }

        /// <summary>
        /// The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results.
        /// </summary>
        /// <value>The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results.</value>
        [DataMember(Name = "vendorActionId", IsRequired = true, EmitDefaultValue = true)]
        public string VendorActionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DEPRECATEDExternalStart {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EndedAt: ").Append(EndedAt).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  VendorActionId: ").Append(VendorActionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DEPRECATEDExternalStart);
        }

        /// <summary>
        /// Returns true if DEPRECATEDExternalStart instances are equal
        /// </summary>
        /// <param name="input">Instance of DEPRECATEDExternalStart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DEPRECATEDExternalStart input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.EndedAt == input.EndedAt ||
                    (this.EndedAt != null &&
                    this.EndedAt.Equals(input.EndedAt))
                ) && 
                (
                    this.TargetType == input.TargetType ||
                    this.TargetType.Equals(input.TargetType)
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.VendorActionId == input.VendorActionId ||
                    (this.VendorActionId != null &&
                    this.VendorActionId.Equals(input.VendorActionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.EndedAt != null)
                {
                    hashCode = (hashCode * 59) + this.EndedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TargetType.GetHashCode();
                if (this.TargetId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetId.GetHashCode();
                }
                if (this.VendorActionId != null)
                {
                    hashCode = (hashCode * 59) + this.VendorActionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
