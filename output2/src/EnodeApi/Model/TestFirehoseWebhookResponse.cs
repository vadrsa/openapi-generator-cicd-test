/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// TestFirehoseWebhookResponse
    /// </summary>
    [DataContract(Name = "TestFirehoseWebhook_response")]
    public partial class TestFirehoseWebhookResponse : IEquatable<TestFirehoseWebhookResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestFirehoseWebhookResponse" /> class.
        /// </summary>
        /// <param name="code">Status code returned by your configured webhook endpoint.</param>
        /// <param name="body">Body returned by your configured webhook endpoint.</param>
        /// <param name="headers">Headers returned by your configured webhook endpoint.</param>
        public TestFirehoseWebhookResponse(decimal code = default(decimal), string body = default(string), List<string> headers = default(List<string>))
        {
            this.Code = code;
            this.Body = body;
            this.Headers = headers;
        }

        /// <summary>
        /// Status code returned by your configured webhook endpoint
        /// </summary>
        /// <value>Status code returned by your configured webhook endpoint</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public decimal Code { get; set; }

        /// <summary>
        /// Body returned by your configured webhook endpoint
        /// </summary>
        /// <value>Body returned by your configured webhook endpoint</value>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Headers returned by your configured webhook endpoint
        /// </summary>
        /// <value>Headers returned by your configured webhook endpoint</value>
        [DataMember(Name = "headers", EmitDefaultValue = true)]
        public List<string> Headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestFirehoseWebhookResponse {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestFirehoseWebhookResponse);
        }

        /// <summary>
        /// Returns true if TestFirehoseWebhookResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TestFirehoseWebhookResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestFirehoseWebhookResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    this.Code.Equals(input.Code)
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    input.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Code.GetHashCode();
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.Headers != null)
                {
                    hashCode = (hashCode * 59) + this.Headers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
