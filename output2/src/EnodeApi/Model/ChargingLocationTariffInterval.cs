/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// ChargingLocationTariffInterval
    /// </summary>
    [DataContract(Name = "ChargingLocationTariffInterval")]
    public partial class ChargingLocationTariffInterval : IEquatable<ChargingLocationTariffInterval>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationTariffInterval" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargingLocationTariffInterval() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationTariffInterval" /> class.
        /// </summary>
        /// <param name="tariffId">Energy Provider Tariff ID (required).</param>
        /// <param name="tariffIntervals">List of time intervals at which to apply the specified tariff rates (required).</param>
        public ChargingLocationTariffInterval(string tariffId = default(string), List<TariffRateInterval> tariffIntervals = default(List<TariffRateInterval>))
        {
            // to ensure "tariffId" is required (not null)
            if (tariffId == null)
            {
                throw new ArgumentNullException("tariffId is a required property for ChargingLocationTariffInterval and cannot be null");
            }
            this.TariffId = tariffId;
            // to ensure "tariffIntervals" is required (not null)
            if (tariffIntervals == null)
            {
                throw new ArgumentNullException("tariffIntervals is a required property for ChargingLocationTariffInterval and cannot be null");
            }
            this.TariffIntervals = tariffIntervals;
        }

        /// <summary>
        /// Energy Provider Tariff ID
        /// </summary>
        /// <value>Energy Provider Tariff ID</value>
        [DataMember(Name = "tariffId", IsRequired = true, EmitDefaultValue = true)]
        public string TariffId { get; set; }

        /// <summary>
        /// List of time intervals at which to apply the specified tariff rates
        /// </summary>
        /// <value>List of time intervals at which to apply the specified tariff rates</value>
        [DataMember(Name = "tariffIntervals", IsRequired = true, EmitDefaultValue = true)]
        public List<TariffRateInterval> TariffIntervals { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargingLocationTariffInterval {\n");
            sb.Append("  TariffId: ").Append(TariffId).Append("\n");
            sb.Append("  TariffIntervals: ").Append(TariffIntervals).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargingLocationTariffInterval);
        }

        /// <summary>
        /// Returns true if ChargingLocationTariffInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargingLocationTariffInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargingLocationTariffInterval input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TariffId == input.TariffId ||
                    (this.TariffId != null &&
                    this.TariffId.Equals(input.TariffId))
                ) && 
                (
                    this.TariffIntervals == input.TariffIntervals ||
                    this.TariffIntervals != null &&
                    input.TariffIntervals != null &&
                    this.TariffIntervals.SequenceEqual(input.TariffIntervals)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TariffId != null)
                {
                    hashCode = (hashCode * 59) + this.TariffId.GetHashCode();
                }
                if (this.TariffIntervals != null)
                {
                    hashCode = (hashCode * 59) + this.TariffIntervals.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
