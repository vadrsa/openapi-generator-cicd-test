/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Defines Scopes
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum Scopes
    {
        /// <summary>
        /// Enum OfflineAccess for value: offline_access
        /// </summary>
        [EnumMember(Value = "offline_access")]
        OfflineAccess = 1,

        /// <summary>
        /// Enum All for value: all
        /// </summary>
        [EnumMember(Value = "all")]
        All = 2,

        /// <summary>
        /// Enum VehiclesmartChargingPolicy for value: vehicle:smart_charging_policy
        /// </summary>
        [EnumMember(Value = "vehicle:smart_charging_policy")]
        VehiclesmartChargingPolicy = 3,

        /// <summary>
        /// Enum VehiclechargeState for value: vehicle:charge_state
        /// </summary>
        [EnumMember(Value = "vehicle:charge_state")]
        VehiclechargeState = 4,

        /// <summary>
        /// Enum Vehiclelocation for value: vehicle:location
        /// </summary>
        [EnumMember(Value = "vehicle:location")]
        Vehiclelocation = 5,

        /// <summary>
        /// Enum Vehicleodometer for value: vehicle:odometer
        /// </summary>
        [EnumMember(Value = "vehicle:odometer")]
        Vehicleodometer = 6,

        /// <summary>
        /// Enum Vehicleinformation for value: vehicle:information
        /// </summary>
        [EnumMember(Value = "vehicle:information")]
        Vehicleinformation = 7,

        /// <summary>
        /// Enum Controlvehiclecharging for value: control:vehicle:charging
        /// </summary>
        [EnumMember(Value = "control:vehicle:charging")]
        Controlvehiclecharging = 8,

        /// <summary>
        /// Enum ChargerchargeState for value: charger:charge_state
        /// </summary>
        [EnumMember(Value = "charger:charge_state")]
        ChargerchargeState = 9,

        /// <summary>
        /// Enum Chargerinformation for value: charger:information
        /// </summary>
        [EnumMember(Value = "charger:information")]
        Chargerinformation = 10,

        /// <summary>
        /// Enum Controlchargercharging for value: control:charger:charging
        /// </summary>
        [EnumMember(Value = "control:charger:charging")]
        Controlchargercharging = 11,

        /// <summary>
        /// Enum ChargingLocation for value: charging_location
        /// </summary>
        [EnumMember(Value = "charging_location")]
        ChargingLocation = 12,

        /// <summary>
        /// Enum Schedule for value: schedule
        /// </summary>
        [EnumMember(Value = "schedule")]
        Schedule = 13,

        /// <summary>
        /// Enum Hvacinformation for value: hvac:information
        /// </summary>
        [EnumMember(Value = "hvac:information")]
        Hvacinformation = 14,

        /// <summary>
        /// Enum Controlhvactemperature for value: control:hvac:temperature
        /// </summary>
        [EnumMember(Value = "control:hvac:temperature")]
        Controlhvactemperature = 15,

        /// <summary>
        /// Enum HvactemperatureState for value: hvac:temperature_state
        /// </summary>
        [EnumMember(Value = "hvac:temperature_state")]
        HvactemperatureState = 16

    }

}
