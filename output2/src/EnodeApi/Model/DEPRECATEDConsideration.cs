/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// &#x60;null&#x60; by default, but during the &#x60;CONSIDERING&#x60; state, the value is populated with a list of all the requirements that must be true before a plan will be created
    /// </summary>
    [DataContract(Name = "DEPRECATED_Consideration")]
    public partial class DEPRECATEDConsideration : IEquatable<DEPRECATEDConsideration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DEPRECATEDConsideration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DEPRECATEDConsideration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DEPRECATEDConsideration" /> class.
        /// </summary>
        /// <param name="isSmartChargeCapable">Vehicle has the capability &#39;smartCharging&#39;.</param>
        /// <param name="isPluggedIn">The vehicle is plugged in (required).</param>
        /// <param name="isCharging">The vehicle is charging (required).</param>
        /// <param name="hasTimeEstimate">A good estimate is available of how much time it will take to charge. (required).</param>
        /// <param name="needsSignificantCharge">The charge needed is greater than 60 minutes and greater than 5% of total battery capacity (required).</param>
        /// <param name="hasChargeAboveThreshold">The vehicle&#39;s &#x60;batteryLevel&#x60; is above the configured &#x60;minimumChargeLimit&#x60;. &#x60;minimumChargeLimit&#x60; defaults to zero. (required).</param>
        /// <param name="singleUser">Only one user has this vehicle actively connected to Enode. Nearly always true in real use cases, but can be an issue for vehicles used in testing/development/integration. (required).</param>
        /// <param name="confidentBatteryCapacity">confidentBatteryCapacity (required).</param>
        /// <param name="atChargingLocation">atChargingLocation (required).</param>
        /// <param name="locationIsFresh">locationIsFresh (required).</param>
        /// <param name="confidentTimeEstimate">confidentTimeEstimate (required).</param>
        /// <param name="needsCharge">needsCharge (required).</param>
        /// <param name="priceDataAvailable">priceDataAvailable (required).</param>
        /// <param name="minimumSavings">minimumSavings (required).</param>
        /// <param name="minimumDelay">minimumDelay (required).</param>
        /// <param name="isNormalSchedule">isNormalSchedule (required).</param>
        /// <param name="noCommittedDelay">noCommittedDelay (required).</param>
        public DEPRECATEDConsideration(bool isSmartChargeCapable = default(bool), bool isPluggedIn = default(bool), bool isCharging = default(bool), bool hasTimeEstimate = default(bool), bool needsSignificantCharge = default(bool), bool hasChargeAboveThreshold = default(bool), bool singleUser = default(bool), bool confidentBatteryCapacity = default(bool), bool atChargingLocation = default(bool), bool locationIsFresh = default(bool), bool confidentTimeEstimate = default(bool), bool needsCharge = default(bool), bool priceDataAvailable = default(bool), bool minimumSavings = default(bool), bool minimumDelay = default(bool), bool isNormalSchedule = default(bool), bool noCommittedDelay = default(bool))
        {
            this.IsPluggedIn = isPluggedIn;
            this.IsCharging = isCharging;
            this.HasTimeEstimate = hasTimeEstimate;
            this.NeedsSignificantCharge = needsSignificantCharge;
            this.HasChargeAboveThreshold = hasChargeAboveThreshold;
            this.SingleUser = singleUser;
            this.ConfidentBatteryCapacity = confidentBatteryCapacity;
            this.AtChargingLocation = atChargingLocation;
            this.LocationIsFresh = locationIsFresh;
            this.ConfidentTimeEstimate = confidentTimeEstimate;
            this.NeedsCharge = needsCharge;
            this.PriceDataAvailable = priceDataAvailable;
            this.MinimumSavings = minimumSavings;
            this.MinimumDelay = minimumDelay;
            this.IsNormalSchedule = isNormalSchedule;
            this.NoCommittedDelay = noCommittedDelay;
            this.IsSmartChargeCapable = isSmartChargeCapable;
        }

        /// <summary>
        /// Vehicle has the capability &#39;smartCharging&#39;
        /// </summary>
        /// <value>Vehicle has the capability &#39;smartCharging&#39;</value>
        [DataMember(Name = "isSmartChargeCapable", EmitDefaultValue = true)]
        public bool IsSmartChargeCapable { get; set; }

        /// <summary>
        /// The vehicle is plugged in
        /// </summary>
        /// <value>The vehicle is plugged in</value>
        [DataMember(Name = "isPluggedIn", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPluggedIn { get; set; }

        /// <summary>
        /// The vehicle is charging
        /// </summary>
        /// <value>The vehicle is charging</value>
        [DataMember(Name = "isCharging", IsRequired = true, EmitDefaultValue = true)]
        public bool IsCharging { get; set; }

        /// <summary>
        /// A good estimate is available of how much time it will take to charge.
        /// </summary>
        /// <value>A good estimate is available of how much time it will take to charge.</value>
        [DataMember(Name = "hasTimeEstimate", IsRequired = true, EmitDefaultValue = true)]
        public bool HasTimeEstimate { get; set; }

        /// <summary>
        /// The charge needed is greater than 60 minutes and greater than 5% of total battery capacity
        /// </summary>
        /// <value>The charge needed is greater than 60 minutes and greater than 5% of total battery capacity</value>
        [DataMember(Name = "needsSignificantCharge", IsRequired = true, EmitDefaultValue = true)]
        public bool NeedsSignificantCharge { get; set; }

        /// <summary>
        /// The vehicle&#39;s &#x60;batteryLevel&#x60; is above the configured &#x60;minimumChargeLimit&#x60;. &#x60;minimumChargeLimit&#x60; defaults to zero.
        /// </summary>
        /// <value>The vehicle&#39;s &#x60;batteryLevel&#x60; is above the configured &#x60;minimumChargeLimit&#x60;. &#x60;minimumChargeLimit&#x60; defaults to zero.</value>
        [DataMember(Name = "hasChargeAboveThreshold", IsRequired = true, EmitDefaultValue = true)]
        public bool HasChargeAboveThreshold { get; set; }

        /// <summary>
        /// Only one user has this vehicle actively connected to Enode. Nearly always true in real use cases, but can be an issue for vehicles used in testing/development/integration.
        /// </summary>
        /// <value>Only one user has this vehicle actively connected to Enode. Nearly always true in real use cases, but can be an issue for vehicles used in testing/development/integration.</value>
        [DataMember(Name = "singleUser", IsRequired = true, EmitDefaultValue = true)]
        public bool SingleUser { get; set; }

        /// <summary>
        /// Gets or Sets ConfidentBatteryCapacity
        /// </summary>
        [DataMember(Name = "confidentBatteryCapacity", IsRequired = true, EmitDefaultValue = true)]
        public bool ConfidentBatteryCapacity { get; set; }

        /// <summary>
        /// Gets or Sets AtChargingLocation
        /// </summary>
        [DataMember(Name = "atChargingLocation", IsRequired = true, EmitDefaultValue = true)]
        public bool AtChargingLocation { get; set; }

        /// <summary>
        /// Gets or Sets LocationIsFresh
        /// </summary>
        [DataMember(Name = "locationIsFresh", IsRequired = true, EmitDefaultValue = true)]
        public bool LocationIsFresh { get; set; }

        /// <summary>
        /// Gets or Sets ConfidentTimeEstimate
        /// </summary>
        [DataMember(Name = "confidentTimeEstimate", IsRequired = true, EmitDefaultValue = true)]
        public bool ConfidentTimeEstimate { get; set; }

        /// <summary>
        /// Gets or Sets NeedsCharge
        /// </summary>
        [DataMember(Name = "needsCharge", IsRequired = true, EmitDefaultValue = true)]
        public bool NeedsCharge { get; set; }

        /// <summary>
        /// Gets or Sets PriceDataAvailable
        /// </summary>
        [DataMember(Name = "priceDataAvailable", IsRequired = true, EmitDefaultValue = true)]
        public bool PriceDataAvailable { get; set; }

        /// <summary>
        /// Gets or Sets MinimumSavings
        /// </summary>
        [DataMember(Name = "minimumSavings", IsRequired = true, EmitDefaultValue = true)]
        public bool MinimumSavings { get; set; }

        /// <summary>
        /// Gets or Sets MinimumDelay
        /// </summary>
        [DataMember(Name = "minimumDelay", IsRequired = true, EmitDefaultValue = true)]
        public bool MinimumDelay { get; set; }

        /// <summary>
        /// Gets or Sets IsNormalSchedule
        /// </summary>
        [DataMember(Name = "isNormalSchedule", IsRequired = true, EmitDefaultValue = true)]
        public bool IsNormalSchedule { get; set; }

        /// <summary>
        /// Gets or Sets NoCommittedDelay
        /// </summary>
        [DataMember(Name = "noCommittedDelay", IsRequired = true, EmitDefaultValue = true)]
        public bool NoCommittedDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DEPRECATEDConsideration {\n");
            sb.Append("  IsSmartChargeCapable: ").Append(IsSmartChargeCapable).Append("\n");
            sb.Append("  IsPluggedIn: ").Append(IsPluggedIn).Append("\n");
            sb.Append("  IsCharging: ").Append(IsCharging).Append("\n");
            sb.Append("  HasTimeEstimate: ").Append(HasTimeEstimate).Append("\n");
            sb.Append("  NeedsSignificantCharge: ").Append(NeedsSignificantCharge).Append("\n");
            sb.Append("  HasChargeAboveThreshold: ").Append(HasChargeAboveThreshold).Append("\n");
            sb.Append("  SingleUser: ").Append(SingleUser).Append("\n");
            sb.Append("  ConfidentBatteryCapacity: ").Append(ConfidentBatteryCapacity).Append("\n");
            sb.Append("  AtChargingLocation: ").Append(AtChargingLocation).Append("\n");
            sb.Append("  LocationIsFresh: ").Append(LocationIsFresh).Append("\n");
            sb.Append("  ConfidentTimeEstimate: ").Append(ConfidentTimeEstimate).Append("\n");
            sb.Append("  NeedsCharge: ").Append(NeedsCharge).Append("\n");
            sb.Append("  PriceDataAvailable: ").Append(PriceDataAvailable).Append("\n");
            sb.Append("  MinimumSavings: ").Append(MinimumSavings).Append("\n");
            sb.Append("  MinimumDelay: ").Append(MinimumDelay).Append("\n");
            sb.Append("  IsNormalSchedule: ").Append(IsNormalSchedule).Append("\n");
            sb.Append("  NoCommittedDelay: ").Append(NoCommittedDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DEPRECATEDConsideration);
        }

        /// <summary>
        /// Returns true if DEPRECATEDConsideration instances are equal
        /// </summary>
        /// <param name="input">Instance of DEPRECATEDConsideration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DEPRECATEDConsideration input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsSmartChargeCapable == input.IsSmartChargeCapable ||
                    this.IsSmartChargeCapable.Equals(input.IsSmartChargeCapable)
                ) && 
                (
                    this.IsPluggedIn == input.IsPluggedIn ||
                    this.IsPluggedIn.Equals(input.IsPluggedIn)
                ) && 
                (
                    this.IsCharging == input.IsCharging ||
                    this.IsCharging.Equals(input.IsCharging)
                ) && 
                (
                    this.HasTimeEstimate == input.HasTimeEstimate ||
                    this.HasTimeEstimate.Equals(input.HasTimeEstimate)
                ) && 
                (
                    this.NeedsSignificantCharge == input.NeedsSignificantCharge ||
                    this.NeedsSignificantCharge.Equals(input.NeedsSignificantCharge)
                ) && 
                (
                    this.HasChargeAboveThreshold == input.HasChargeAboveThreshold ||
                    this.HasChargeAboveThreshold.Equals(input.HasChargeAboveThreshold)
                ) && 
                (
                    this.SingleUser == input.SingleUser ||
                    this.SingleUser.Equals(input.SingleUser)
                ) && 
                (
                    this.ConfidentBatteryCapacity == input.ConfidentBatteryCapacity ||
                    this.ConfidentBatteryCapacity.Equals(input.ConfidentBatteryCapacity)
                ) && 
                (
                    this.AtChargingLocation == input.AtChargingLocation ||
                    this.AtChargingLocation.Equals(input.AtChargingLocation)
                ) && 
                (
                    this.LocationIsFresh == input.LocationIsFresh ||
                    this.LocationIsFresh.Equals(input.LocationIsFresh)
                ) && 
                (
                    this.ConfidentTimeEstimate == input.ConfidentTimeEstimate ||
                    this.ConfidentTimeEstimate.Equals(input.ConfidentTimeEstimate)
                ) && 
                (
                    this.NeedsCharge == input.NeedsCharge ||
                    this.NeedsCharge.Equals(input.NeedsCharge)
                ) && 
                (
                    this.PriceDataAvailable == input.PriceDataAvailable ||
                    this.PriceDataAvailable.Equals(input.PriceDataAvailable)
                ) && 
                (
                    this.MinimumSavings == input.MinimumSavings ||
                    this.MinimumSavings.Equals(input.MinimumSavings)
                ) && 
                (
                    this.MinimumDelay == input.MinimumDelay ||
                    this.MinimumDelay.Equals(input.MinimumDelay)
                ) && 
                (
                    this.IsNormalSchedule == input.IsNormalSchedule ||
                    this.IsNormalSchedule.Equals(input.IsNormalSchedule)
                ) && 
                (
                    this.NoCommittedDelay == input.NoCommittedDelay ||
                    this.NoCommittedDelay.Equals(input.NoCommittedDelay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.IsSmartChargeCapable.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPluggedIn.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCharging.GetHashCode();
                hashCode = (hashCode * 59) + this.HasTimeEstimate.GetHashCode();
                hashCode = (hashCode * 59) + this.NeedsSignificantCharge.GetHashCode();
                hashCode = (hashCode * 59) + this.HasChargeAboveThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.SingleUser.GetHashCode();
                hashCode = (hashCode * 59) + this.ConfidentBatteryCapacity.GetHashCode();
                hashCode = (hashCode * 59) + this.AtChargingLocation.GetHashCode();
                hashCode = (hashCode * 59) + this.LocationIsFresh.GetHashCode();
                hashCode = (hashCode * 59) + this.ConfidentTimeEstimate.GetHashCode();
                hashCode = (hashCode * 59) + this.NeedsCharge.GetHashCode();
                hashCode = (hashCode * 59) + this.PriceDataAvailable.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumSavings.GetHashCode();
                hashCode = (hashCode * 59) + this.MinimumDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.IsNormalSchedule.GetHashCode();
                hashCode = (hashCode * 59) + this.NoCommittedDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
