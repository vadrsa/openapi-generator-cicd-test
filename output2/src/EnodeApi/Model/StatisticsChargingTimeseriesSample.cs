/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// StatisticsChargingTimeseriesSample
    /// </summary>
    [DataContract(Name = "StatisticsChargingTimeseriesSample")]
    public partial class StatisticsChargingTimeseriesSample : IEquatable<StatisticsChargingTimeseriesSample>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsChargingTimeseriesSample" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatisticsChargingTimeseriesSample() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsChargingTimeseriesSample" /> class.
        /// </summary>
        /// <param name="kw">kw (required).</param>
        /// <param name="kwhSum">Total power consumption in kWh (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="nonSmartPrice">nonSmartPrice (required).</param>
        /// <param name="costSum">Total cost in &#x60;&lt;CURRENCY&gt;&#x60; (required).</param>
        /// <param name="nonSmartCostSum">Total cost for this consumption in &#x60;&lt;CURRENCY&gt;&#x60;, if it had not been shifted by Smart Charging (required).</param>
        /// <param name="estimatedSavings">Total estimated savings in &#x60;&lt;CURRENCY&gt;&#x60;, achieved by Smart Charging (required).</param>
        /// <param name="date">The start date of this sample within the timeseries (required).</param>
        public StatisticsChargingTimeseriesSample(ChargeRateAggregates kw = default(ChargeRateAggregates), decimal kwhSum = default(decimal), PriceAggregates price = default(PriceAggregates), NonSmartPriceAggregates nonSmartPrice = default(NonSmartPriceAggregates), decimal costSum = default(decimal), decimal nonSmartCostSum = default(decimal), decimal estimatedSavings = default(decimal), DateTime date = default(DateTime))
        {
            // to ensure "kw" is required (not null)
            if (kw == null)
            {
                throw new ArgumentNullException("kw is a required property for StatisticsChargingTimeseriesSample and cannot be null");
            }
            this.Kw = kw;
            this.KwhSum = kwhSum;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for StatisticsChargingTimeseriesSample and cannot be null");
            }
            this.Price = price;
            // to ensure "nonSmartPrice" is required (not null)
            if (nonSmartPrice == null)
            {
                throw new ArgumentNullException("nonSmartPrice is a required property for StatisticsChargingTimeseriesSample and cannot be null");
            }
            this.NonSmartPrice = nonSmartPrice;
            this.CostSum = costSum;
            this.NonSmartCostSum = nonSmartCostSum;
            this.EstimatedSavings = estimatedSavings;
            this.Date = date;
        }

        /// <summary>
        /// Gets or Sets Kw
        /// </summary>
        [DataMember(Name = "kw", IsRequired = true, EmitDefaultValue = true)]
        public ChargeRateAggregates Kw { get; set; }

        /// <summary>
        /// Total power consumption in kWh
        /// </summary>
        /// <value>Total power consumption in kWh</value>
        [DataMember(Name = "kwhSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal KwhSum { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public PriceAggregates Price { get; set; }

        /// <summary>
        /// Gets or Sets NonSmartPrice
        /// </summary>
        [DataMember(Name = "nonSmartPrice", IsRequired = true, EmitDefaultValue = true)]
        public NonSmartPriceAggregates NonSmartPrice { get; set; }

        /// <summary>
        /// Total cost in &#x60;&lt;CURRENCY&gt;&#x60;
        /// </summary>
        /// <value>Total cost in &#x60;&lt;CURRENCY&gt;&#x60;</value>
        [DataMember(Name = "costSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal CostSum { get; set; }

        /// <summary>
        /// Total cost for this consumption in &#x60;&lt;CURRENCY&gt;&#x60;, if it had not been shifted by Smart Charging
        /// </summary>
        /// <value>Total cost for this consumption in &#x60;&lt;CURRENCY&gt;&#x60;, if it had not been shifted by Smart Charging</value>
        [DataMember(Name = "nonSmartCostSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal NonSmartCostSum { get; set; }

        /// <summary>
        /// Total estimated savings in &#x60;&lt;CURRENCY&gt;&#x60;, achieved by Smart Charging
        /// </summary>
        /// <value>Total estimated savings in &#x60;&lt;CURRENCY&gt;&#x60;, achieved by Smart Charging</value>
        [DataMember(Name = "estimatedSavings", IsRequired = true, EmitDefaultValue = true)]
        public decimal EstimatedSavings { get; set; }

        /// <summary>
        /// The start date of this sample within the timeseries
        /// </summary>
        /// <value>The start date of this sample within the timeseries</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsChargingTimeseriesSample {\n");
            sb.Append("  Kw: ").Append(Kw).Append("\n");
            sb.Append("  KwhSum: ").Append(KwhSum).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  NonSmartPrice: ").Append(NonSmartPrice).Append("\n");
            sb.Append("  CostSum: ").Append(CostSum).Append("\n");
            sb.Append("  NonSmartCostSum: ").Append(NonSmartCostSum).Append("\n");
            sb.Append("  EstimatedSavings: ").Append(EstimatedSavings).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsChargingTimeseriesSample);
        }

        /// <summary>
        /// Returns true if StatisticsChargingTimeseriesSample instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsChargingTimeseriesSample to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsChargingTimeseriesSample input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kw == input.Kw ||
                    (this.Kw != null &&
                    this.Kw.Equals(input.Kw))
                ) && 
                (
                    this.KwhSum == input.KwhSum ||
                    this.KwhSum.Equals(input.KwhSum)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.NonSmartPrice == input.NonSmartPrice ||
                    (this.NonSmartPrice != null &&
                    this.NonSmartPrice.Equals(input.NonSmartPrice))
                ) && 
                (
                    this.CostSum == input.CostSum ||
                    this.CostSum.Equals(input.CostSum)
                ) && 
                (
                    this.NonSmartCostSum == input.NonSmartCostSum ||
                    this.NonSmartCostSum.Equals(input.NonSmartCostSum)
                ) && 
                (
                    this.EstimatedSavings == input.EstimatedSavings ||
                    this.EstimatedSavings.Equals(input.EstimatedSavings)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kw != null)
                {
                    hashCode = (hashCode * 59) + this.Kw.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KwhSum.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.NonSmartPrice != null)
                {
                    hashCode = (hashCode * 59) + this.NonSmartPrice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CostSum.GetHashCode();
                hashCode = (hashCode * 59) + this.NonSmartCostSum.GetHashCode();
                hashCode = (hashCode * 59) + this.EstimatedSavings.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
