/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// TariffRate
    /// </summary>
    [DataContract(Name = "TariffRate")]
    public partial class TariffRate : IEquatable<TariffRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TariffRate" /> class.
        /// </summary>
        /// <param name="name">Per-tariff unique interval name.</param>
        /// <param name="cost">Rate cost (decimal string).</param>
        public TariffRate(string name = default(string), string cost = default(string))
        {
            this.Name = name;
            this.Cost = cost;
        }

        /// <summary>
        /// Per-tariff unique interval name
        /// </summary>
        /// <value>Per-tariff unique interval name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Rate cost (decimal string)
        /// </summary>
        /// <value>Rate cost (decimal string)</value>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public string Cost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TariffRate {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TariffRate);
        }

        /// <summary>
        /// Returns true if TariffRate instances are equal
        /// </summary>
        /// <param name="input">Instance of TariffRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TariffRate input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Cost != null)
                {
                    hashCode = (hashCode * 59) + this.Cost.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Cost (string) pattern
            Regex regexCost = new Regex(@"^[+-]?(\\d{1,9}([.]\\d{0,9})?|[.]\\d{1,9})$", RegexOptions.CultureInvariant);
            if (false == regexCost.Match(this.Cost).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cost, must match a pattern of " + regexCost, new [] { "Cost" });
            }

            yield break;
        }
    }

}
