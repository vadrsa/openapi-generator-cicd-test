/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// PartialTemperatureSchedule
    /// </summary>
    [DataContract(Name = "PartialTemperatureSchedule")]
    public partial class PartialTemperatureSchedule : IEquatable<PartialTemperatureSchedule>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TargetType
        /// </summary>
        [DataMember(Name = "targetType", EmitDefaultValue = false)]
        public HvacVendorType? TargetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialTemperatureSchedule" /> class.
        /// </summary>
        /// <param name="targetId">ID of the HVAC asset to which this schedule applies.</param>
        /// <param name="targetType">targetType.</param>
        /// <param name="chargingLocationId">ID of the Charging Location to which this schedule applies. If null, the schedule is applied regardless of the HVAC&#39;s location (even if it doesn&#39;t have one)..</param>
        /// <param name="isEnabled">Whether this Schedule should be attempting to control the HVAC&#39;s temperature settings. (default to true).</param>
        /// <param name="defaultTargetState">defaultTargetState.</param>
        /// <param name="rules">Each rule sets a value for &#x60;holdType&#x60; and associated settings. All other properties of the rule are optional filters that limit the times to which this rule applies..</param>
        /// <param name="defaultTarget">defaultTarget.</param>
        public PartialTemperatureSchedule(string targetId = default(string), HvacVendorType? targetType = default(HvacVendorType?), Guid? chargingLocationId = default(Guid?), bool isEnabled = true, PartialTemperatureScheduleDefaultTargetState defaultTargetState = default(PartialTemperatureScheduleDefaultTargetState), List<TemperatureSchedule> rules = default(List<TemperatureSchedule>), PartialTemperatureScheduleDefaultTarget defaultTarget = default(PartialTemperatureScheduleDefaultTarget))
        {
            this.TargetId = targetId;
            this.TargetType = targetType;
            this.ChargingLocationId = chargingLocationId;
            this.IsEnabled = isEnabled;
            this.DefaultTargetState = defaultTargetState;
            this.Rules = rules;
            this.DefaultTarget = defaultTarget;
        }

        /// <summary>
        /// ID of the HVAC asset to which this schedule applies
        /// </summary>
        /// <value>ID of the HVAC asset to which this schedule applies</value>
        [DataMember(Name = "targetId", EmitDefaultValue = false)]
        public string TargetId { get; set; }

        /// <summary>
        /// ID of the Charging Location to which this schedule applies. If null, the schedule is applied regardless of the HVAC&#39;s location (even if it doesn&#39;t have one).
        /// </summary>
        /// <value>ID of the Charging Location to which this schedule applies. If null, the schedule is applied regardless of the HVAC&#39;s location (even if it doesn&#39;t have one).</value>
        [DataMember(Name = "chargingLocationId", EmitDefaultValue = true)]
        public Guid? ChargingLocationId { get; set; }

        /// <summary>
        /// Whether this Schedule should be attempting to control the HVAC&#39;s temperature settings.
        /// </summary>
        /// <value>Whether this Schedule should be attempting to control the HVAC&#39;s temperature settings.</value>
        [DataMember(Name = "isEnabled", EmitDefaultValue = true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTargetState
        /// </summary>
        [DataMember(Name = "defaultTargetState", EmitDefaultValue = false)]
        public PartialTemperatureScheduleDefaultTargetState DefaultTargetState { get; set; }

        /// <summary>
        /// Each rule sets a value for &#x60;holdType&#x60; and associated settings. All other properties of the rule are optional filters that limit the times to which this rule applies.
        /// </summary>
        /// <value>Each rule sets a value for &#x60;holdType&#x60; and associated settings. All other properties of the rule are optional filters that limit the times to which this rule applies.</value>
        [DataMember(Name = "rules", EmitDefaultValue = false)]
        public List<TemperatureSchedule> Rules { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTarget
        /// </summary>
        [DataMember(Name = "defaultTarget", EmitDefaultValue = false)]
        public PartialTemperatureScheduleDefaultTarget DefaultTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartialTemperatureSchedule {\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  ChargingLocationId: ").Append(ChargingLocationId).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  DefaultTargetState: ").Append(DefaultTargetState).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  DefaultTarget: ").Append(DefaultTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartialTemperatureSchedule);
        }

        /// <summary>
        /// Returns true if PartialTemperatureSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of PartialTemperatureSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartialTemperatureSchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.TargetType == input.TargetType ||
                    this.TargetType.Equals(input.TargetType)
                ) && 
                (
                    this.ChargingLocationId == input.ChargingLocationId ||
                    (this.ChargingLocationId != null &&
                    this.ChargingLocationId.Equals(input.ChargingLocationId))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    this.IsEnabled.Equals(input.IsEnabled)
                ) && 
                (
                    this.DefaultTargetState == input.DefaultTargetState ||
                    (this.DefaultTargetState != null &&
                    this.DefaultTargetState.Equals(input.DefaultTargetState))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.DefaultTarget == input.DefaultTarget ||
                    (this.DefaultTarget != null &&
                    this.DefaultTarget.Equals(input.DefaultTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TargetType.GetHashCode();
                if (this.ChargingLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingLocationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsEnabled.GetHashCode();
                if (this.DefaultTargetState != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultTargetState.GetHashCode();
                }
                if (this.Rules != null)
                {
                    hashCode = (hashCode * 59) + this.Rules.GetHashCode();
                }
                if (this.DefaultTarget != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultTarget.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
