/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// LinkUserResponse
    /// </summary>
    [DataContract(Name = "LinkUserResponse")]
    public partial class LinkUserResponse : IEquatable<LinkUserResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkUserResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkUserResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkUserResponse" /> class.
        /// </summary>
        /// <param name="linkState">linkState (required).</param>
        /// <param name="linkUrl">linkUrl (required).</param>
        public LinkUserResponse(string linkState = default(string), string linkUrl = default(string))
        {
            // to ensure "linkState" is required (not null)
            if (linkState == null)
            {
                throw new ArgumentNullException("linkState is a required property for LinkUserResponse and cannot be null");
            }
            this.LinkState = linkState;
            // to ensure "linkUrl" is required (not null)
            if (linkUrl == null)
            {
                throw new ArgumentNullException("linkUrl is a required property for LinkUserResponse and cannot be null");
            }
            this.LinkUrl = linkUrl;
        }

        /// <summary>
        /// Gets or Sets LinkState
        /// </summary>
        [DataMember(Name = "linkState", IsRequired = true, EmitDefaultValue = true)]
        public string LinkState { get; set; }

        /// <summary>
        /// Gets or Sets LinkUrl
        /// </summary>
        [DataMember(Name = "linkUrl", IsRequired = true, EmitDefaultValue = true)]
        public string LinkUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkUserResponse {\n");
            sb.Append("  LinkState: ").Append(LinkState).Append("\n");
            sb.Append("  LinkUrl: ").Append(LinkUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkUserResponse);
        }

        /// <summary>
        /// Returns true if LinkUserResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkUserResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkUserResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LinkState == input.LinkState ||
                    (this.LinkState != null &&
                    this.LinkState.Equals(input.LinkState))
                ) && 
                (
                    this.LinkUrl == input.LinkUrl ||
                    (this.LinkUrl != null &&
                    this.LinkUrl.Equals(input.LinkUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LinkState != null)
                {
                    hashCode = (hashCode * 59) + this.LinkState.GetHashCode();
                }
                if (this.LinkUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LinkUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
