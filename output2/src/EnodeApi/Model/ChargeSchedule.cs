/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// ChargeSchedule
    /// </summary>
    [DataContract(Name = "Charge_Schedule")]
    public partial class ChargeSchedule : IEquatable<ChargeSchedule>, IValidatableObject
    {
        /// <summary>
        /// Defines Weekdays
        /// </summary>
        public enum WeekdaysEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeSchedule" /> class.
        /// </summary>
        /// <param name="hourMinute">hourMinute.</param>
        /// <param name="fromTimestamp">UTC timestamp from which this rule should apply..</param>
        /// <param name="toTimestamp">UTC timestamp until which this rule should apply..</param>
        /// <param name="weekdays">An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday..</param>
        /// <param name="shouldCharge">Whether a chargeable asset should want to charge while this rule is active. (required).</param>
        public ChargeSchedule(ScheduleFiltersHourMinute hourMinute = default(ScheduleFiltersHourMinute), DateTime fromTimestamp = default(DateTime), DateTime toTimestamp = default(DateTime), List<WeekdaysEnum> weekdays = default(List<WeekdaysEnum>), bool shouldCharge = default(bool))
        {
            this.ShouldCharge = shouldCharge;
            this.HourMinute = hourMinute;
            this.FromTimestamp = fromTimestamp;
            this.ToTimestamp = toTimestamp;
            this.Weekdays = weekdays;
        }

        /// <summary>
        /// Gets or Sets HourMinute
        /// </summary>
        [DataMember(Name = "hourMinute", EmitDefaultValue = false)]
        public ScheduleFiltersHourMinute HourMinute { get; set; }

        /// <summary>
        /// UTC timestamp from which this rule should apply.
        /// </summary>
        /// <value>UTC timestamp from which this rule should apply.</value>
        [DataMember(Name = "fromTimestamp", EmitDefaultValue = false)]
        public DateTime FromTimestamp { get; set; }

        /// <summary>
        /// UTC timestamp until which this rule should apply.
        /// </summary>
        /// <value>UTC timestamp until which this rule should apply.</value>
        [DataMember(Name = "toTimestamp", EmitDefaultValue = false)]
        public DateTime ToTimestamp { get; set; }

        /// <summary>
        /// An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.
        /// </summary>
        /// <value>An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.</value>
        [DataMember(Name = "weekdays", EmitDefaultValue = false)]
        public List<ChargeSchedule.WeekdaysEnum> Weekdays { get; set; }

        /// <summary>
        /// Whether a chargeable asset should want to charge while this rule is active.
        /// </summary>
        /// <value>Whether a chargeable asset should want to charge while this rule is active.</value>
        [DataMember(Name = "shouldCharge", IsRequired = true, EmitDefaultValue = true)]
        public bool ShouldCharge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeSchedule {\n");
            sb.Append("  HourMinute: ").Append(HourMinute).Append("\n");
            sb.Append("  FromTimestamp: ").Append(FromTimestamp).Append("\n");
            sb.Append("  ToTimestamp: ").Append(ToTimestamp).Append("\n");
            sb.Append("  Weekdays: ").Append(Weekdays).Append("\n");
            sb.Append("  ShouldCharge: ").Append(ShouldCharge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeSchedule);
        }

        /// <summary>
        /// Returns true if ChargeSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeSchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HourMinute == input.HourMinute ||
                    (this.HourMinute != null &&
                    this.HourMinute.Equals(input.HourMinute))
                ) && 
                (
                    this.FromTimestamp == input.FromTimestamp ||
                    (this.FromTimestamp != null &&
                    this.FromTimestamp.Equals(input.FromTimestamp))
                ) && 
                (
                    this.ToTimestamp == input.ToTimestamp ||
                    (this.ToTimestamp != null &&
                    this.ToTimestamp.Equals(input.ToTimestamp))
                ) && 
                (
                    this.Weekdays == input.Weekdays ||
                    this.Weekdays != null &&
                    input.Weekdays != null &&
                    this.Weekdays.SequenceEqual(input.Weekdays)
                ) && 
                (
                    this.ShouldCharge == input.ShouldCharge ||
                    this.ShouldCharge.Equals(input.ShouldCharge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HourMinute != null)
                {
                    hashCode = (hashCode * 59) + this.HourMinute.GetHashCode();
                }
                if (this.FromTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.FromTimestamp.GetHashCode();
                }
                if (this.ToTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.ToTimestamp.GetHashCode();
                }
                if (this.Weekdays != null)
                {
                    hashCode = (hashCode * 59) + this.Weekdays.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShouldCharge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
