/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Deprecated. Replaced with &#x60;defaultTargetState&#x60;.
    /// </summary>
    [DataContract(Name = "PartialTemperatureSchedule_defaultTarget")]
    public partial class PartialTemperatureScheduleDefaultTarget : IEquatable<PartialTemperatureScheduleDefaultTarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialTemperatureScheduleDefaultTarget" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PartialTemperatureScheduleDefaultTarget() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialTemperatureScheduleDefaultTarget" /> class.
        /// </summary>
        /// <param name="temperature">Desired temperature (required).</param>
        /// <param name="deadband">Size of the optional deadband centered around &#x60;temperature&#x60;.  For example, with a &#x60;temperature&#x60; of 22.0 and a &#x60;deadband&#x60; of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0 (required).</param>
        public PartialTemperatureScheduleDefaultTarget(decimal? temperature = default(decimal?), decimal? deadband = default(decimal?))
        {
            // to ensure "temperature" is required (not null)
            if (temperature == null)
            {
                throw new ArgumentNullException("temperature is a required property for PartialTemperatureScheduleDefaultTarget and cannot be null");
            }
            this.Temperature = temperature;
            // to ensure "deadband" is required (not null)
            if (deadband == null)
            {
                throw new ArgumentNullException("deadband is a required property for PartialTemperatureScheduleDefaultTarget and cannot be null");
            }
            this.Deadband = deadband;
        }

        /// <summary>
        /// Desired temperature
        /// </summary>
        /// <value>Desired temperature</value>
        [DataMember(Name = "temperature", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Temperature { get; set; }

        /// <summary>
        /// Size of the optional deadband centered around &#x60;temperature&#x60;.  For example, with a &#x60;temperature&#x60; of 22.0 and a &#x60;deadband&#x60; of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0
        /// </summary>
        /// <value>Size of the optional deadband centered around &#x60;temperature&#x60;.  For example, with a &#x60;temperature&#x60; of 22.0 and a &#x60;deadband&#x60; of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0</value>
        [DataMember(Name = "deadband", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Deadband { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartialTemperatureScheduleDefaultTarget {\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  Deadband: ").Append(Deadband).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartialTemperatureScheduleDefaultTarget);
        }

        /// <summary>
        /// Returns true if PartialTemperatureScheduleDefaultTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of PartialTemperatureScheduleDefaultTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartialTemperatureScheduleDefaultTarget input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.Deadband == input.Deadband ||
                    (this.Deadband != null &&
                    this.Deadband.Equals(input.Deadband))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Temperature != null)
                {
                    hashCode = (hashCode * 59) + this.Temperature.GetHashCode();
                }
                if (this.Deadband != null)
                {
                    hashCode = (hashCode * 59) + this.Deadband.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
