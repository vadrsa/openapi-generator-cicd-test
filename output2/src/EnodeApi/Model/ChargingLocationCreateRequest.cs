/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// ChargingLocationCreateRequest
    /// </summary>
    [DataContract(Name = "ChargingLocationCreateRequest")]
    public partial class ChargingLocationCreateRequest : IEquatable<ChargingLocationCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargingLocationCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationCreateRequest" /> class.
        /// </summary>
        /// <param name="name">User-supplied name for the Charging Location (required).</param>
        /// <param name="longitude">Longitude in degrees (required).</param>
        /// <param name="latitude">Latitude in degrees (required).</param>
        /// <param name="timezoneName">An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to &#39;UTC&#39;. (default to &quot;UTC&quot;).</param>
        public ChargingLocationCreateRequest(string name = default(string), decimal longitude = default(decimal), decimal latitude = default(decimal), string timezoneName = "UTC")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ChargingLocationCreateRequest and cannot be null");
            }
            this.Name = name;
            this.Longitude = longitude;
            this.Latitude = latitude;
            // use default value if no "timezoneName" provided
            this.TimezoneName = timezoneName ?? "UTC";
        }

        /// <summary>
        /// User-supplied name for the Charging Location
        /// </summary>
        /// <value>User-supplied name for the Charging Location</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Longitude in degrees
        /// </summary>
        /// <value>Longitude in degrees</value>
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = true)]
        public decimal Longitude { get; set; }

        /// <summary>
        /// Latitude in degrees
        /// </summary>
        /// <value>Latitude in degrees</value>
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = true)]
        public decimal Latitude { get; set; }

        /// <summary>
        /// An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to &#39;UTC&#39;.
        /// </summary>
        /// <value>An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to &#39;UTC&#39;.</value>
        [DataMember(Name = "timezoneName", EmitDefaultValue = false)]
        public string TimezoneName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargingLocationCreateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  TimezoneName: ").Append(TimezoneName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargingLocationCreateRequest);
        }

        /// <summary>
        /// Returns true if ChargingLocationCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargingLocationCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargingLocationCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    this.Longitude.Equals(input.Longitude)
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    this.Latitude.Equals(input.Latitude)
                ) && 
                (
                    this.TimezoneName == input.TimezoneName ||
                    (this.TimezoneName != null &&
                    this.TimezoneName.Equals(input.TimezoneName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                if (this.TimezoneName != null)
                {
                    hashCode = (hashCode * 59) + this.TimezoneName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
