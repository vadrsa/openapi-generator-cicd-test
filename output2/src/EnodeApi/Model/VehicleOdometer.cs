/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Vehicle&#39;s odometer with timestamp
    /// </summary>
    [DataContract(Name = "VehicleOdometer")]
    public partial class VehicleOdometer : IEquatable<VehicleOdometer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleOdometer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleOdometer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleOdometer" /> class.
        /// </summary>
        /// <param name="distance">Odometer in kilometers (required).</param>
        /// <param name="lastUpdated">ISO8601 UTC timestamp of last received odometer update (required).</param>
        public VehicleOdometer(decimal? distance = default(decimal?), DateTime? lastUpdated = default(DateTime?))
        {
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new ArgumentNullException("distance is a required property for VehicleOdometer and cannot be null");
            }
            this.Distance = distance;
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new ArgumentNullException("lastUpdated is a required property for VehicleOdometer and cannot be null");
            }
            this.LastUpdated = lastUpdated;
        }

        /// <summary>
        /// Odometer in kilometers
        /// </summary>
        /// <value>Odometer in kilometers</value>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Distance { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp of last received odometer update
        /// </summary>
        /// <value>ISO8601 UTC timestamp of last received odometer update</value>
        [DataMember(Name = "lastUpdated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleOdometer {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleOdometer);
        }

        /// <summary>
        /// Returns true if VehicleOdometer instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleOdometer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleOdometer input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distance != null)
                {
                    hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
