/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// TariffRateInterval
    /// </summary>
    [DataContract(Name = "TariffRateInterval")]
    public partial class TariffRateInterval : IEquatable<TariffRateInterval>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TariffRateInterval" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TariffRateInterval() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TariffRateInterval" /> class.
        /// </summary>
        /// <param name="name">Rate name (required).</param>
        /// <param name="weekdays">An array of weekdays to apply the named tariff. A weekday starts with 0 for Monday, and ends with 6 for Sunday. If not specified, named tariff is applied for entire week.</param>
        /// <param name="from">Interval from time (inclusive, UTC) (required).</param>
        /// <param name="to">Interval to time (exclusive, UTC) (required).</param>
        public TariffRateInterval(string name = default(string), List<int> weekdays = default(List<int>), string from = default(string), string to = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TariffRateInterval and cannot be null");
            }
            this.Name = name;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for TariffRateInterval and cannot be null");
            }
            this.From = from;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for TariffRateInterval and cannot be null");
            }
            this.To = to;
            this.Weekdays = weekdays;
        }

        /// <summary>
        /// Rate name
        /// </summary>
        /// <value>Rate name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// An array of weekdays to apply the named tariff. A weekday starts with 0 for Monday, and ends with 6 for Sunday. If not specified, named tariff is applied for entire week
        /// </summary>
        /// <value>An array of weekdays to apply the named tariff. A weekday starts with 0 for Monday, and ends with 6 for Sunday. If not specified, named tariff is applied for entire week</value>
        [DataMember(Name = "weekdays", EmitDefaultValue = false)]
        public List<int> Weekdays { get; set; }

        /// <summary>
        /// Interval from time (inclusive, UTC)
        /// </summary>
        /// <value>Interval from time (inclusive, UTC)</value>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Interval to time (exclusive, UTC)
        /// </summary>
        /// <value>Interval to time (exclusive, UTC)</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TariffRateInterval {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Weekdays: ").Append(Weekdays).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TariffRateInterval);
        }

        /// <summary>
        /// Returns true if TariffRateInterval instances are equal
        /// </summary>
        /// <param name="input">Instance of TariffRateInterval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TariffRateInterval input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Weekdays == input.Weekdays ||
                    this.Weekdays != null &&
                    input.Weekdays != null &&
                    this.Weekdays.SequenceEqual(input.Weekdays)
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Weekdays != null)
                {
                    hashCode = (hashCode * 59) + this.Weekdays.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // From (string) pattern
            Regex regexFrom = new Regex(@"\\d{2}:\\d{2}", RegexOptions.CultureInvariant);
            if (false == regexFrom.Match(this.From).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for From, must match a pattern of " + regexFrom, new [] { "From" });
            }

            // To (string) pattern
            Regex regexTo = new Regex(@"\\d{2}:\\d{2}", RegexOptions.CultureInvariant);
            if (false == regexTo.Match(this.To).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for To, must match a pattern of " + regexTo, new [] { "To" });
            }

            yield break;
        }
    }

}
