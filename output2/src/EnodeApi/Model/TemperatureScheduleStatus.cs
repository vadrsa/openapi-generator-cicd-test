/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// TemperatureScheduleStatus
    /// </summary>
    [DataContract(Name = "TemperatureScheduleStatus")]
    public partial class TemperatureScheduleStatus : IEquatable<TemperatureScheduleStatus>, IValidatableObject
    {
        /// <summary>
        /// Defines ScheduleType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScheduleTypeEnum
        {
            /// <summary>
            /// Enum TEMPERATURE for value: TEMPERATURE
            /// </summary>
            [EnumMember(Value = "TEMPERATURE")]
            TEMPERATURE = 1

        }


        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>
        [DataMember(Name = "scheduleType", IsRequired = true, EmitDefaultValue = true)]
        public ScheduleTypeEnum ScheduleType { get; set; }
        /// <summary>
        /// An enum value that describes the current state of the Schedule
        /// </summary>
        /// <value>An enum value that describes the current state of the Schedule</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum ALIGNED for value: ALIGNED
            /// </summary>
            [EnumMember(Value = "ALIGNED")]
            ALIGNED = 1,

            /// <summary>
            /// Enum MISALIGNED for value: MISALIGNED
            /// </summary>
            [EnumMember(Value = "MISALIGNED")]
            MISALIGNED = 2,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 3,

            /// <summary>
            /// Enum INACTIVEDISABLED for value: INACTIVE:DISABLED
            /// </summary>
            [EnumMember(Value = "INACTIVE:DISABLED")]
            INACTIVEDISABLED = 4,

            /// <summary>
            /// Enum INACTIVEINCAPABLE for value: INACTIVE:INCAPABLE
            /// </summary>
            [EnumMember(Value = "INACTIVE:INCAPABLE")]
            INACTIVEINCAPABLE = 5

        }


        /// <summary>
        /// An enum value that describes the current state of the Schedule
        /// </summary>
        /// <value>An enum value that describes the current state of the Schedule</value>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public StateEnum State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureScheduleStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TemperatureScheduleStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureScheduleStatus" /> class.
        /// </summary>
        /// <param name="scheduleId">scheduleId (required).</param>
        /// <param name="scheduleType">scheduleType (required).</param>
        /// <param name="state">An enum value that describes the current state of the Schedule (required).</param>
        /// <param name="changedAt">Time at which any value of the status last changed (required).</param>
        /// <param name="current">current.</param>
        /// <param name="expected">expected (required).</param>
        /// <param name="upcomingTransitions">List of upcoming transitions. A maximum of 2 items are returned. (required).</param>
        public TemperatureScheduleStatus(Guid scheduleId = default(Guid), ScheduleTypeEnum scheduleType = default(ScheduleTypeEnum), StateEnum state = default(StateEnum), DateTime changedAt = default(DateTime), TemperatureScheduleStatusCurrent current = default(TemperatureScheduleStatusCurrent), TemperatureScheduleStatusCurrent expected = default(TemperatureScheduleStatusCurrent), List<TemperatureScheduleStatusUpcomingTransitionsInner> upcomingTransitions = default(List<TemperatureScheduleStatusUpcomingTransitionsInner>))
        {
            this.ScheduleId = scheduleId;
            this.ScheduleType = scheduleType;
            this.State = state;
            this.ChangedAt = changedAt;
            // to ensure "expected" is required (not null)
            if (expected == null)
            {
                throw new ArgumentNullException("expected is a required property for TemperatureScheduleStatus and cannot be null");
            }
            this.Expected = expected;
            // to ensure "upcomingTransitions" is required (not null)
            if (upcomingTransitions == null)
            {
                throw new ArgumentNullException("upcomingTransitions is a required property for TemperatureScheduleStatus and cannot be null");
            }
            this.UpcomingTransitions = upcomingTransitions;
            this.Current = current;
        }

        /// <summary>
        /// Gets or Sets ScheduleId
        /// </summary>
        [DataMember(Name = "scheduleId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ScheduleId { get; set; }

        /// <summary>
        /// Time at which any value of the status last changed
        /// </summary>
        /// <value>Time at which any value of the status last changed</value>
        [DataMember(Name = "changedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime ChangedAt { get; set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", EmitDefaultValue = false)]
        public TemperatureScheduleStatusCurrent Current { get; set; }

        /// <summary>
        /// Gets or Sets Expected
        /// </summary>
        [DataMember(Name = "expected", IsRequired = true, EmitDefaultValue = true)]
        public TemperatureScheduleStatusCurrent Expected { get; set; }

        /// <summary>
        /// List of upcoming transitions. A maximum of 2 items are returned.
        /// </summary>
        /// <value>List of upcoming transitions. A maximum of 2 items are returned.</value>
        [DataMember(Name = "upcomingTransitions", IsRequired = true, EmitDefaultValue = true)]
        public List<TemperatureScheduleStatusUpcomingTransitionsInner> UpcomingTransitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemperatureScheduleStatus {\n");
            sb.Append("  ScheduleId: ").Append(ScheduleId).Append("\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ChangedAt: ").Append(ChangedAt).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Expected: ").Append(Expected).Append("\n");
            sb.Append("  UpcomingTransitions: ").Append(UpcomingTransitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemperatureScheduleStatus);
        }

        /// <summary>
        /// Returns true if TemperatureScheduleStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TemperatureScheduleStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemperatureScheduleStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScheduleId == input.ScheduleId ||
                    (this.ScheduleId != null &&
                    this.ScheduleId.Equals(input.ScheduleId))
                ) && 
                (
                    this.ScheduleType == input.ScheduleType ||
                    this.ScheduleType.Equals(input.ScheduleType)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.ChangedAt == input.ChangedAt ||
                    (this.ChangedAt != null &&
                    this.ChangedAt.Equals(input.ChangedAt))
                ) && 
                (
                    this.Current == input.Current ||
                    (this.Current != null &&
                    this.Current.Equals(input.Current))
                ) && 
                (
                    this.Expected == input.Expected ||
                    (this.Expected != null &&
                    this.Expected.Equals(input.Expected))
                ) && 
                (
                    this.UpcomingTransitions == input.UpcomingTransitions ||
                    this.UpcomingTransitions != null &&
                    input.UpcomingTransitions != null &&
                    this.UpcomingTransitions.SequenceEqual(input.UpcomingTransitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduleId != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ScheduleType.GetHashCode();
                hashCode = (hashCode * 59) + this.State.GetHashCode();
                if (this.ChangedAt != null)
                {
                    hashCode = (hashCode * 59) + this.ChangedAt.GetHashCode();
                }
                if (this.Current != null)
                {
                    hashCode = (hashCode * 59) + this.Current.GetHashCode();
                }
                if (this.Expected != null)
                {
                    hashCode = (hashCode * 59) + this.Expected.GetHashCode();
                }
                if (this.UpcomingTransitions != null)
                {
                    hashCode = (hashCode * 59) + this.UpcomingTransitions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
