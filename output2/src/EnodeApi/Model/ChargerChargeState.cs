/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// ChargerChargeState
    /// </summary>
    [DataContract(Name = "ChargerChargeState")]
    public partial class ChargerChargeState : IEquatable<ChargerChargeState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargerChargeState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargerChargeState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargerChargeState" /> class.
        /// </summary>
        /// <param name="isPluggedIn">Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging) (required).</param>
        /// <param name="isCharging">Current charging status (required).</param>
        /// <param name="chargeRate">The current charge rate in kW.  This property is only available when the charger is actively charging a vehicle, and is &#x60;null&#x60; any other time. (required).</param>
        /// <param name="lastUpdated">ISO8601 UTC timestamp of last received charge state update (required).</param>
        /// <param name="maxCurrent">Desired max current in ampere, if set (required).</param>
        public ChargerChargeState(bool? isPluggedIn = default(bool?), bool? isCharging = default(bool?), decimal? chargeRate = default(decimal?), DateTime? lastUpdated = default(DateTime?), decimal? maxCurrent = default(decimal?))
        {
            // to ensure "isPluggedIn" is required (not null)
            if (isPluggedIn == null)
            {
                throw new ArgumentNullException("isPluggedIn is a required property for ChargerChargeState and cannot be null");
            }
            this.IsPluggedIn = isPluggedIn;
            // to ensure "isCharging" is required (not null)
            if (isCharging == null)
            {
                throw new ArgumentNullException("isCharging is a required property for ChargerChargeState and cannot be null");
            }
            this.IsCharging = isCharging;
            // to ensure "chargeRate" is required (not null)
            if (chargeRate == null)
            {
                throw new ArgumentNullException("chargeRate is a required property for ChargerChargeState and cannot be null");
            }
            this.ChargeRate = chargeRate;
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new ArgumentNullException("lastUpdated is a required property for ChargerChargeState and cannot be null");
            }
            this.LastUpdated = lastUpdated;
            // to ensure "maxCurrent" is required (not null)
            if (maxCurrent == null)
            {
                throw new ArgumentNullException("maxCurrent is a required property for ChargerChargeState and cannot be null");
            }
            this.MaxCurrent = maxCurrent;
        }

        /// <summary>
        /// Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)
        /// </summary>
        /// <value>Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)</value>
        [DataMember(Name = "isPluggedIn", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsPluggedIn { get; set; }

        /// <summary>
        /// Current charging status
        /// </summary>
        /// <value>Current charging status</value>
        [DataMember(Name = "isCharging", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsCharging { get; set; }

        /// <summary>
        /// The current charge rate in kW.  This property is only available when the charger is actively charging a vehicle, and is &#x60;null&#x60; any other time.
        /// </summary>
        /// <value>The current charge rate in kW.  This property is only available when the charger is actively charging a vehicle, and is &#x60;null&#x60; any other time.</value>
        [DataMember(Name = "chargeRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal? ChargeRate { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp of last received charge state update
        /// </summary>
        /// <value>ISO8601 UTC timestamp of last received charge state update</value>
        [DataMember(Name = "lastUpdated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Desired max current in ampere, if set
        /// </summary>
        /// <value>Desired max current in ampere, if set</value>
        [DataMember(Name = "maxCurrent", IsRequired = true, EmitDefaultValue = true)]
        public decimal? MaxCurrent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargerChargeState {\n");
            sb.Append("  IsPluggedIn: ").Append(IsPluggedIn).Append("\n");
            sb.Append("  IsCharging: ").Append(IsCharging).Append("\n");
            sb.Append("  ChargeRate: ").Append(ChargeRate).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  MaxCurrent: ").Append(MaxCurrent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargerChargeState);
        }

        /// <summary>
        /// Returns true if ChargerChargeState instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargerChargeState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargerChargeState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IsPluggedIn == input.IsPluggedIn ||
                    (this.IsPluggedIn != null &&
                    this.IsPluggedIn.Equals(input.IsPluggedIn))
                ) && 
                (
                    this.IsCharging == input.IsCharging ||
                    (this.IsCharging != null &&
                    this.IsCharging.Equals(input.IsCharging))
                ) && 
                (
                    this.ChargeRate == input.ChargeRate ||
                    (this.ChargeRate != null &&
                    this.ChargeRate.Equals(input.ChargeRate))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.MaxCurrent == input.MaxCurrent ||
                    (this.MaxCurrent != null &&
                    this.MaxCurrent.Equals(input.MaxCurrent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsPluggedIn != null)
                {
                    hashCode = (hashCode * 59) + this.IsPluggedIn.GetHashCode();
                }
                if (this.IsCharging != null)
                {
                    hashCode = (hashCode * 59) + this.IsCharging.GetHashCode();
                }
                if (this.ChargeRate != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeRate.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.MaxCurrent != null)
                {
                    hashCode = (hashCode * 59) + this.MaxCurrent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ChargeRate (decimal?) minimum
            if (this.ChargeRate < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargeRate, must be a value greater than or equal to 0.", new [] { "ChargeRate" });
            }

            yield break;
        }
    }

}
