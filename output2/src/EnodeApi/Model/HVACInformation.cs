/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Descriptive information about the HVAC unit
    /// </summary>
    [DataContract(Name = "HVACInformation")]
    public partial class HVACInformation : IEquatable<HVACInformation>, IValidatableObject
    {
        /// <summary>
        /// HVAC category
        /// </summary>
        /// <value>HVAC category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum HEATING for value: HEATING
            /// </summary>
            [EnumMember(Value = "HEATING")]
            HEATING = 1,

            /// <summary>
            /// Enum COOLING for value: COOLING
            /// </summary>
            [EnumMember(Value = "COOLING")]
            COOLING = 2,

            /// <summary>
            /// Enum HEATPUMP for value: HEAT_PUMP
            /// </summary>
            [EnumMember(Value = "HEAT_PUMP")]
            HEATPUMP = 3,

            /// <summary>
            /// Enum AGGREGATOR for value: AGGREGATOR
            /// </summary>
            [EnumMember(Value = "AGGREGATOR")]
            AGGREGATOR = 4

        }


        /// <summary>
        /// HVAC category
        /// </summary>
        /// <value>HVAC category</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HVACInformation" /> class.
        /// </summary>
        /// <param name="brand">Display name of OEM/vendor.</param>
        /// <param name="model">Device model name.</param>
        /// <param name="displayName">Name of the device, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names..</param>
        /// <param name="groupName">Name of the group the device belongs to, as set by the user on the device/vendor. Groups are typically presented as \&quot;rooms\&quot; or \&quot;zones\&quot;..</param>
        /// <param name="category">HVAC category.</param>
        public HVACInformation(string brand = default(string), string model = default(string), string displayName = default(string), string groupName = default(string), CategoryEnum? category = default(CategoryEnum?))
        {
            this.Brand = brand;
            this.Model = model;
            this.DisplayName = displayName;
            this.GroupName = groupName;
            this.Category = category;
        }

        /// <summary>
        /// Display name of OEM/vendor
        /// </summary>
        /// <value>Display name of OEM/vendor</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Device model name
        /// </summary>
        /// <value>Device model name</value>
        [DataMember(Name = "model", EmitDefaultValue = true)]
        public string Model { get; set; }

        /// <summary>
        /// Name of the device, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names.
        /// </summary>
        /// <value>Name of the device, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names.</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Name of the group the device belongs to, as set by the user on the device/vendor. Groups are typically presented as \&quot;rooms\&quot; or \&quot;zones\&quot;.
        /// </summary>
        /// <value>Name of the group the device belongs to, as set by the user on the device/vendor. Groups are typically presented as \&quot;rooms\&quot; or \&quot;zones\&quot;.</value>
        [DataMember(Name = "groupName", EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HVACInformation {\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HVACInformation);
        }

        /// <summary>
        /// Returns true if HVACInformation instances are equal
        /// </summary>
        /// <param name="input">Instance of HVACInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HVACInformation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Brand != null)
                {
                    hashCode = (hashCode * 59) + this.Brand.GetHashCode();
                }
                if (this.Model != null)
                {
                    hashCode = (hashCode * 59) + this.Model.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
