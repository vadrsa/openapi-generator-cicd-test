/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Update Firehose Webhook
    /// </summary>
    [DataContract(Name = "UpdateFirehoseWebhookPayload")]
    public partial class UpdateFirehoseWebhookPayload : IEquatable<UpdateFirehoseWebhookPayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFirehoseWebhookPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateFirehoseWebhookPayload() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateFirehoseWebhookPayload" /> class.
        /// </summary>
        /// <param name="secret">A cryptographically secure secret, generated and provided by your client. (required).</param>
        /// <param name="url">The HTTPS url to which Enode should POST the event payload when a watched property changes. (required).</param>
        public UpdateFirehoseWebhookPayload(string secret = default(string), string url = default(string))
        {
            // to ensure "secret" is required (not null)
            if (secret == null)
            {
                throw new ArgumentNullException("secret is a required property for UpdateFirehoseWebhookPayload and cannot be null");
            }
            this.Secret = secret;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for UpdateFirehoseWebhookPayload and cannot be null");
            }
            this.Url = url;
        }

        /// <summary>
        /// A cryptographically secure secret, generated and provided by your client.
        /// </summary>
        /// <value>A cryptographically secure secret, generated and provided by your client.</value>
        [DataMember(Name = "secret", IsRequired = true, EmitDefaultValue = true)]
        public string Secret { get; set; }

        /// <summary>
        /// The HTTPS url to which Enode should POST the event payload when a watched property changes.
        /// </summary>
        /// <value>The HTTPS url to which Enode should POST the event payload when a watched property changes.</value>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateFirehoseWebhookPayload {\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateFirehoseWebhookPayload);
        }

        /// <summary>
        /// Returns true if UpdateFirehoseWebhookPayload instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateFirehoseWebhookPayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateFirehoseWebhookPayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Secret == input.Secret ||
                    (this.Secret != null &&
                    this.Secret.Equals(input.Secret))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Secret != null)
                {
                    hashCode = (hashCode * 59) + this.Secret.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
