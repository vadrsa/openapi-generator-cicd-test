/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// ChargeScheduleStatusUpcomingTransitionsInner
    /// </summary>
    [DataContract(Name = "ChargeScheduleStatus_upcomingTransitions_inner")]
    public partial class ChargeScheduleStatusUpcomingTransitionsInner : IEquatable<ChargeScheduleStatusUpcomingTransitionsInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeScheduleStatusUpcomingTransitionsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeScheduleStatusUpcomingTransitionsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeScheduleStatusUpcomingTransitionsInner" /> class.
        /// </summary>
        /// <param name="at">ISO8601 UTC timestamp (required).</param>
        /// <param name="shouldCharge">shouldCharge.</param>
        /// <param name="targetTemperature">targetTemperature.</param>
        public ChargeScheduleStatusUpcomingTransitionsInner(DateTime at = default(DateTime), bool shouldCharge = default(bool), decimal targetTemperature = default(decimal))
        {
            this.At = at;
            this.ShouldCharge = shouldCharge;
            this.TargetTemperature = targetTemperature;
        }

        /// <summary>
        /// ISO8601 UTC timestamp
        /// </summary>
        /// <value>ISO8601 UTC timestamp</value>
        [DataMember(Name = "at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime At { get; set; }

        /// <summary>
        /// Gets or Sets ShouldCharge
        /// </summary>
        [DataMember(Name = "shouldCharge", EmitDefaultValue = true)]
        public bool ShouldCharge { get; set; }

        /// <summary>
        /// Gets or Sets TargetTemperature
        /// </summary>
        [DataMember(Name = "targetTemperature", EmitDefaultValue = false)]
        public decimal TargetTemperature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeScheduleStatusUpcomingTransitionsInner {\n");
            sb.Append("  At: ").Append(At).Append("\n");
            sb.Append("  ShouldCharge: ").Append(ShouldCharge).Append("\n");
            sb.Append("  TargetTemperature: ").Append(TargetTemperature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeScheduleStatusUpcomingTransitionsInner);
        }

        /// <summary>
        /// Returns true if ChargeScheduleStatusUpcomingTransitionsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeScheduleStatusUpcomingTransitionsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeScheduleStatusUpcomingTransitionsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.At == input.At ||
                    (this.At != null &&
                    this.At.Equals(input.At))
                ) && 
                (
                    this.ShouldCharge == input.ShouldCharge ||
                    this.ShouldCharge.Equals(input.ShouldCharge)
                ) && 
                (
                    this.TargetTemperature == input.TargetTemperature ||
                    this.TargetTemperature.Equals(input.TargetTemperature)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.At != null)
                {
                    hashCode = (hashCode * 59) + this.At.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShouldCharge.GetHashCode();
                hashCode = (hashCode * 59) + this.TargetTemperature.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
