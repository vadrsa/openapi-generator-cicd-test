/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// StatisticsProductionTimeseriesSample
    /// </summary>
    [DataContract(Name = "StatisticsProductionTimeseriesSample")]
    public partial class StatisticsProductionTimeseriesSample : IEquatable<StatisticsProductionTimeseriesSample>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsProductionTimeseriesSample" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatisticsProductionTimeseriesSample() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsProductionTimeseriesSample" /> class.
        /// </summary>
        /// <param name="kw">kw (required).</param>
        /// <param name="kwhSum">Total power consumption in kWh (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="earningsSum">Total earnings in &#x60;&lt;CURRENCY&gt;&#x60; (required).</param>
        /// <param name="date">The start date of this sample within the timeseries (required).</param>
        public StatisticsProductionTimeseriesSample(ChargeRateAggregates kw = default(ChargeRateAggregates), decimal kwhSum = default(decimal), PriceAggregates price = default(PriceAggregates), decimal earningsSum = default(decimal), DateTime date = default(DateTime))
        {
            // to ensure "kw" is required (not null)
            if (kw == null)
            {
                throw new ArgumentNullException("kw is a required property for StatisticsProductionTimeseriesSample and cannot be null");
            }
            this.Kw = kw;
            this.KwhSum = kwhSum;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for StatisticsProductionTimeseriesSample and cannot be null");
            }
            this.Price = price;
            this.EarningsSum = earningsSum;
            this.Date = date;
        }

        /// <summary>
        /// Gets or Sets Kw
        /// </summary>
        [DataMember(Name = "kw", IsRequired = true, EmitDefaultValue = true)]
        public ChargeRateAggregates Kw { get; set; }

        /// <summary>
        /// Total power consumption in kWh
        /// </summary>
        /// <value>Total power consumption in kWh</value>
        [DataMember(Name = "kwhSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal KwhSum { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public PriceAggregates Price { get; set; }

        /// <summary>
        /// Total earnings in &#x60;&lt;CURRENCY&gt;&#x60;
        /// </summary>
        /// <value>Total earnings in &#x60;&lt;CURRENCY&gt;&#x60;</value>
        [DataMember(Name = "earningsSum", IsRequired = true, EmitDefaultValue = true)]
        public decimal EarningsSum { get; set; }

        /// <summary>
        /// The start date of this sample within the timeseries
        /// </summary>
        /// <value>The start date of this sample within the timeseries</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Date { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsProductionTimeseriesSample {\n");
            sb.Append("  Kw: ").Append(Kw).Append("\n");
            sb.Append("  KwhSum: ").Append(KwhSum).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  EarningsSum: ").Append(EarningsSum).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsProductionTimeseriesSample);
        }

        /// <summary>
        /// Returns true if StatisticsProductionTimeseriesSample instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsProductionTimeseriesSample to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsProductionTimeseriesSample input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kw == input.Kw ||
                    (this.Kw != null &&
                    this.Kw.Equals(input.Kw))
                ) && 
                (
                    this.KwhSum == input.KwhSum ||
                    this.KwhSum.Equals(input.KwhSum)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.EarningsSum == input.EarningsSum ||
                    this.EarningsSum.Equals(input.EarningsSum)
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kw != null)
                {
                    hashCode = (hashCode * 59) + this.Kw.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.KwhSum.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EarningsSum.GetHashCode();
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
