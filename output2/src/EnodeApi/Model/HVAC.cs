/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// HVAC
    /// </summary>
    [DataContract(Name = "HVAC")]
    public partial class HVAC : IEquatable<HVAC>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Vendor
        /// </summary>
        [DataMember(Name = "vendor", IsRequired = true, EmitDefaultValue = true)]
        public HVACVendor Vendor { get; set; }
        /// <summary>
        /// The HVAC&#39;s mode.
        /// </summary>
        /// <value>The HVAC&#39;s mode.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum HEAT for value: HEAT
            /// </summary>
            [EnumMember(Value = "HEAT")]
            HEAT = 1,

            /// <summary>
            /// Enum COOL for value: COOL
            /// </summary>
            [EnumMember(Value = "COOL")]
            COOL = 2,

            /// <summary>
            /// Enum AUTO for value: AUTO
            /// </summary>
            [EnumMember(Value = "AUTO")]
            AUTO = 3,

            /// <summary>
            /// Enum OFF for value: OFF
            /// </summary>
            [EnumMember(Value = "OFF")]
            OFF = 4

        }


        /// <summary>
        /// The HVAC&#39;s mode.
        /// </summary>
        /// <value>The HVAC&#39;s mode.</value>
        [DataMember(Name = "mode", EmitDefaultValue = true)]
        public ModeEnum? Mode { get; set; }
        /// <summary>
        /// The duration the setpoints and mode are expected to be held. If &#x60;SCHEDULED&#x60;, the device is being controlled by an OEM schedule configured on the device.
        /// </summary>
        /// <value>The duration the setpoints and mode are expected to be held. If &#x60;SCHEDULED&#x60;, the device is being controlled by an OEM schedule configured on the device.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HoldTypeEnum
        {
            /// <summary>
            /// Enum PERMANENT for value: PERMANENT
            /// </summary>
            [EnumMember(Value = "PERMANENT")]
            PERMANENT = 1,

            /// <summary>
            /// Enum SCHEDULED for value: SCHEDULED
            /// </summary>
            [EnumMember(Value = "SCHEDULED")]
            SCHEDULED = 2

        }


        /// <summary>
        /// The duration the setpoints and mode are expected to be held. If &#x60;SCHEDULED&#x60;, the device is being controlled by an OEM schedule configured on the device.
        /// </summary>
        /// <value>The duration the setpoints and mode are expected to be held. If &#x60;SCHEDULED&#x60;, the device is being controlled by an OEM schedule configured on the device.</value>
        [DataMember(Name = "holdType", EmitDefaultValue = true)]
        public HoldTypeEnum? HoldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HVAC" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HVAC() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HVAC" /> class.
        /// </summary>
        /// <param name="id">HVAC device ID (required).</param>
        /// <param name="vendor">vendor (required).</param>
        /// <param name="lastSeen">The last time the HVAC unit was successfully communicated with (required).</param>
        /// <param name="isReachable">Whether live data from the HVAC unit is currently fetchable from Enode&#39;s perspective. It can happen that this &#39;reachability&#39; refers to reading from a cache operated by the vendor&#39;s cloud service, if that service has determined that its cache is valid. (required).</param>
        /// <param name="chargingLocationId">ID of the charging location the HVAC unit is housed at (if any).</param>
        /// <param name="isActive">Whether the HVAC unit is actively heating or cooling..</param>
        /// <param name="currentTemperature">Current air temperature reported by device in degrees Celsius..</param>
        /// <param name="targetTemperature">targetTemperature (required).</param>
        /// <param name="consumptionRate">The current rate of energy consumption in kW. An inactive HVAC will have a consumption rate of 0. This value is currently experimental and is typically estimated with a large margin of error..</param>
        /// <param name="mode">The HVAC&#39;s mode..</param>
        /// <param name="heatSetpoint">If mode allows, heat when &#x60;currentTemperature&#x60; falls below this point..</param>
        /// <param name="coolSetpoint">If mode allows, cool when &#x60;currentTemperature&#x60; rises above this point..</param>
        /// <param name="holdType">The duration the setpoints and mode are expected to be held. If &#x60;SCHEDULED&#x60;, the device is being controlled by an OEM schedule configured on the device..</param>
        /// <param name="information">information (required).</param>
        /// <param name="capabilities">capabilities (required).</param>
        public HVAC(string id = default(string), HVACVendor vendor = default(HVACVendor), DateTime? lastSeen = default(DateTime?), bool isReachable = default(bool), string chargingLocationId = default(string), bool isActive = default(bool), decimal? currentTemperature = default(decimal?), DEPRECATEDTargetTemperature targetTemperature = default(DEPRECATEDTargetTemperature), decimal? consumptionRate = default(decimal?), ModeEnum? mode = default(ModeEnum?), decimal? heatSetpoint = default(decimal?), decimal? coolSetpoint = default(decimal?), HoldTypeEnum? holdType = default(HoldTypeEnum?), HVACInformation information = default(HVACInformation), HVACCapabilities capabilities = default(HVACCapabilities))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for HVAC and cannot be null");
            }
            this.Id = id;
            this.Vendor = vendor;
            // to ensure "lastSeen" is required (not null)
            if (lastSeen == null)
            {
                throw new ArgumentNullException("lastSeen is a required property for HVAC and cannot be null");
            }
            this.LastSeen = lastSeen;
            this.IsReachable = isReachable;
            // to ensure "targetTemperature" is required (not null)
            if (targetTemperature == null)
            {
                throw new ArgumentNullException("targetTemperature is a required property for HVAC and cannot be null");
            }
            this.TargetTemperature = targetTemperature;
            // to ensure "information" is required (not null)
            if (information == null)
            {
                throw new ArgumentNullException("information is a required property for HVAC and cannot be null");
            }
            this.Information = information;
            // to ensure "capabilities" is required (not null)
            if (capabilities == null)
            {
                throw new ArgumentNullException("capabilities is a required property for HVAC and cannot be null");
            }
            this.Capabilities = capabilities;
            this.ChargingLocationId = chargingLocationId;
            this.IsActive = isActive;
            this.CurrentTemperature = currentTemperature;
            this.ConsumptionRate = consumptionRate;
            this.Mode = mode;
            this.HeatSetpoint = heatSetpoint;
            this.CoolSetpoint = coolSetpoint;
            this.HoldType = holdType;
        }

        /// <summary>
        /// HVAC device ID
        /// </summary>
        /// <value>HVAC device ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The last time the HVAC unit was successfully communicated with
        /// </summary>
        /// <value>The last time the HVAC unit was successfully communicated with</value>
        [DataMember(Name = "lastSeen", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastSeen { get; set; }

        /// <summary>
        /// Whether live data from the HVAC unit is currently fetchable from Enode&#39;s perspective. It can happen that this &#39;reachability&#39; refers to reading from a cache operated by the vendor&#39;s cloud service, if that service has determined that its cache is valid.
        /// </summary>
        /// <value>Whether live data from the HVAC unit is currently fetchable from Enode&#39;s perspective. It can happen that this &#39;reachability&#39; refers to reading from a cache operated by the vendor&#39;s cloud service, if that service has determined that its cache is valid.</value>
        [DataMember(Name = "isReachable", IsRequired = true, EmitDefaultValue = true)]
        public bool IsReachable { get; set; }

        /// <summary>
        /// ID of the charging location the HVAC unit is housed at (if any)
        /// </summary>
        /// <value>ID of the charging location the HVAC unit is housed at (if any)</value>
        [DataMember(Name = "chargingLocationId", EmitDefaultValue = true)]
        public string ChargingLocationId { get; set; }

        /// <summary>
        /// Whether the HVAC unit is actively heating or cooling.
        /// </summary>
        /// <value>Whether the HVAC unit is actively heating or cooling.</value>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Current air temperature reported by device in degrees Celsius.
        /// </summary>
        /// <value>Current air temperature reported by device in degrees Celsius.</value>
        [DataMember(Name = "currentTemperature", EmitDefaultValue = true)]
        public decimal? CurrentTemperature { get; set; }

        /// <summary>
        /// Gets or Sets TargetTemperature
        /// </summary>
        [DataMember(Name = "targetTemperature", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public DEPRECATEDTargetTemperature TargetTemperature { get; set; }

        /// <summary>
        /// The current rate of energy consumption in kW. An inactive HVAC will have a consumption rate of 0. This value is currently experimental and is typically estimated with a large margin of error.
        /// </summary>
        /// <value>The current rate of energy consumption in kW. An inactive HVAC will have a consumption rate of 0. This value is currently experimental and is typically estimated with a large margin of error.</value>
        [DataMember(Name = "consumptionRate", EmitDefaultValue = true)]
        public decimal? ConsumptionRate { get; set; }

        /// <summary>
        /// If mode allows, heat when &#x60;currentTemperature&#x60; falls below this point.
        /// </summary>
        /// <value>If mode allows, heat when &#x60;currentTemperature&#x60; falls below this point.</value>
        [DataMember(Name = "heatSetpoint", EmitDefaultValue = true)]
        public decimal? HeatSetpoint { get; set; }

        /// <summary>
        /// If mode allows, cool when &#x60;currentTemperature&#x60; rises above this point.
        /// </summary>
        /// <value>If mode allows, cool when &#x60;currentTemperature&#x60; rises above this point.</value>
        [DataMember(Name = "coolSetpoint", EmitDefaultValue = true)]
        public decimal? CoolSetpoint { get; set; }

        /// <summary>
        /// Gets or Sets Information
        /// </summary>
        [DataMember(Name = "information", IsRequired = true, EmitDefaultValue = true)]
        public HVACInformation Information { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name = "capabilities", IsRequired = true, EmitDefaultValue = true)]
        public HVACCapabilities Capabilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HVAC {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  IsReachable: ").Append(IsReachable).Append("\n");
            sb.Append("  ChargingLocationId: ").Append(ChargingLocationId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CurrentTemperature: ").Append(CurrentTemperature).Append("\n");
            sb.Append("  TargetTemperature: ").Append(TargetTemperature).Append("\n");
            sb.Append("  ConsumptionRate: ").Append(ConsumptionRate).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  HeatSetpoint: ").Append(HeatSetpoint).Append("\n");
            sb.Append("  CoolSetpoint: ").Append(CoolSetpoint).Append("\n");
            sb.Append("  HoldType: ").Append(HoldType).Append("\n");
            sb.Append("  Information: ").Append(Information).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HVAC);
        }

        /// <summary>
        /// Returns true if HVAC instances are equal
        /// </summary>
        /// <param name="input">Instance of HVAC to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HVAC input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    this.Vendor.Equals(input.Vendor)
                ) && 
                (
                    this.LastSeen == input.LastSeen ||
                    (this.LastSeen != null &&
                    this.LastSeen.Equals(input.LastSeen))
                ) && 
                (
                    this.IsReachable == input.IsReachable ||
                    this.IsReachable.Equals(input.IsReachable)
                ) && 
                (
                    this.ChargingLocationId == input.ChargingLocationId ||
                    (this.ChargingLocationId != null &&
                    this.ChargingLocationId.Equals(input.ChargingLocationId))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.CurrentTemperature == input.CurrentTemperature ||
                    (this.CurrentTemperature != null &&
                    this.CurrentTemperature.Equals(input.CurrentTemperature))
                ) && 
                (
                    this.TargetTemperature == input.TargetTemperature ||
                    (this.TargetTemperature != null &&
                    this.TargetTemperature.Equals(input.TargetTemperature))
                ) && 
                (
                    this.ConsumptionRate == input.ConsumptionRate ||
                    (this.ConsumptionRate != null &&
                    this.ConsumptionRate.Equals(input.ConsumptionRate))
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.HeatSetpoint == input.HeatSetpoint ||
                    (this.HeatSetpoint != null &&
                    this.HeatSetpoint.Equals(input.HeatSetpoint))
                ) && 
                (
                    this.CoolSetpoint == input.CoolSetpoint ||
                    (this.CoolSetpoint != null &&
                    this.CoolSetpoint.Equals(input.CoolSetpoint))
                ) && 
                (
                    this.HoldType == input.HoldType ||
                    this.HoldType.Equals(input.HoldType)
                ) && 
                (
                    this.Information == input.Information ||
                    (this.Information != null &&
                    this.Information.Equals(input.Information))
                ) && 
                (
                    this.Capabilities == input.Capabilities ||
                    (this.Capabilities != null &&
                    this.Capabilities.Equals(input.Capabilities))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vendor.GetHashCode();
                if (this.LastSeen != null)
                {
                    hashCode = (hashCode * 59) + this.LastSeen.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsReachable.GetHashCode();
                if (this.ChargingLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingLocationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                if (this.CurrentTemperature != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentTemperature.GetHashCode();
                }
                if (this.TargetTemperature != null)
                {
                    hashCode = (hashCode * 59) + this.TargetTemperature.GetHashCode();
                }
                if (this.ConsumptionRate != null)
                {
                    hashCode = (hashCode * 59) + this.ConsumptionRate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                if (this.HeatSetpoint != null)
                {
                    hashCode = (hashCode * 59) + this.HeatSetpoint.GetHashCode();
                }
                if (this.CoolSetpoint != null)
                {
                    hashCode = (hashCode * 59) + this.CoolSetpoint.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HoldType.GetHashCode();
                if (this.Information != null)
                {
                    hashCode = (hashCode * 59) + this.Information.GetHashCode();
                }
                if (this.Capabilities != null)
                {
                    hashCode = (hashCode * 59) + this.Capabilities.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // ConsumptionRate (decimal?) minimum
            if (this.ConsumptionRate < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConsumptionRate, must be a value greater than or equal to 0.", new [] { "ConsumptionRate" });
            }

            yield break;
        }
    }

}
