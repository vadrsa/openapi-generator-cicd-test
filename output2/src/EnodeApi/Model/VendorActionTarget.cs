/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;
using System.Reflection;

namespace EnodeApi.Model
{
    /// <summary>
    /// VendorActionTarget
    /// </summary>
    [JsonConverter(typeof(VendorActionTargetJsonConverter))]
    [DataContract(Name = "VendorAction_target")]
    public partial class VendorActionTarget : AbstractOpenAPISchema, IEquatable<VendorActionTarget>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorActionTarget" /> class
        /// with the <see cref="DEPRECATEDTargetTemperature" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DEPRECATEDTargetTemperature.</param>
        public VendorActionTarget(DEPRECATEDTargetTemperature actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorActionTarget" /> class
        /// with the <see cref="VendorActionTargetOneOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VendorActionTargetOneOf.</param>
        public VendorActionTarget(VendorActionTargetOneOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorActionTarget" /> class
        /// with the <see cref="VendorActionTargetOneOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VendorActionTargetOneOf1.</param>
        public VendorActionTarget(VendorActionTargetOneOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(DEPRECATEDTargetTemperature))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VendorActionTargetOneOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VendorActionTargetOneOf1))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: DEPRECATEDTargetTemperature, VendorActionTargetOneOf, VendorActionTargetOneOf1");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `DEPRECATEDTargetTemperature`. If the actual instance is not `DEPRECATEDTargetTemperature`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DEPRECATEDTargetTemperature</returns>
        public DEPRECATEDTargetTemperature GetDEPRECATEDTargetTemperature()
        {
            return (DEPRECATEDTargetTemperature)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VendorActionTargetOneOf`. If the actual instance is not `VendorActionTargetOneOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VendorActionTargetOneOf</returns>
        public VendorActionTargetOneOf GetVendorActionTargetOneOf()
        {
            return (VendorActionTargetOneOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VendorActionTargetOneOf1`. If the actual instance is not `VendorActionTargetOneOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VendorActionTargetOneOf1</returns>
        public VendorActionTargetOneOf1 GetVendorActionTargetOneOf1()
        {
            return (VendorActionTargetOneOf1)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorActionTarget {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, VendorActionTarget.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of VendorActionTarget
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of VendorActionTarget</returns>
        public static VendorActionTarget FromJson(string jsonString)
        {
            VendorActionTarget newVendorActionTarget = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newVendorActionTarget;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DEPRECATEDTargetTemperature).GetProperty("AdditionalProperties") == null)
                {
                    newVendorActionTarget = new VendorActionTarget(JsonConvert.DeserializeObject<DEPRECATEDTargetTemperature>(jsonString, VendorActionTarget.SerializerSettings));
                }
                else
                {
                    newVendorActionTarget = new VendorActionTarget(JsonConvert.DeserializeObject<DEPRECATEDTargetTemperature>(jsonString, VendorActionTarget.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DEPRECATEDTargetTemperature");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DEPRECATEDTargetTemperature: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VendorActionTargetOneOf).GetProperty("AdditionalProperties") == null)
                {
                    newVendorActionTarget = new VendorActionTarget(JsonConvert.DeserializeObject<VendorActionTargetOneOf>(jsonString, VendorActionTarget.SerializerSettings));
                }
                else
                {
                    newVendorActionTarget = new VendorActionTarget(JsonConvert.DeserializeObject<VendorActionTargetOneOf>(jsonString, VendorActionTarget.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VendorActionTargetOneOf");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VendorActionTargetOneOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(VendorActionTargetOneOf1).GetProperty("AdditionalProperties") == null)
                {
                    newVendorActionTarget = new VendorActionTarget(JsonConvert.DeserializeObject<VendorActionTargetOneOf1>(jsonString, VendorActionTarget.SerializerSettings));
                }
                else
                {
                    newVendorActionTarget = new VendorActionTarget(JsonConvert.DeserializeObject<VendorActionTargetOneOf1>(jsonString, VendorActionTarget.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("VendorActionTargetOneOf1");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VendorActionTargetOneOf1: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newVendorActionTarget;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorActionTarget);
        }

        /// <summary>
        /// Returns true if VendorActionTarget instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorActionTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorActionTarget input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for VendorActionTarget
    /// </summary>
    public class VendorActionTargetJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(VendorActionTarget).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return VendorActionTarget.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
