/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// StatisticsTimeseriesSessionSampleSmartStats
    /// </summary>
    [DataContract(Name = "StatisticsTimeseriesSessionSample_smartStats")]
    public partial class StatisticsTimeseriesSessionSampleSmartStats : IEquatable<StatisticsTimeseriesSessionSampleSmartStats>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsTimeseriesSessionSampleSmartStats" /> class.
        /// </summary>
        /// <param name="nonSmartPrice">nonSmartPrice.</param>
        /// <param name="nonSmartCostSum">Total cost for this consumption in &#x60;&lt;CURRENCY&gt;&#x60;, if it had not been shifted by Smart Charging.</param>
        /// <param name="estimatedSavings">Total estimated savings in &#x60;&lt;CURRENCY&gt;&#x60;, achieved by Smart Charging.</param>
        public StatisticsTimeseriesSessionSampleSmartStats(NonSmartSessionPriceAggregates nonSmartPrice = default(NonSmartSessionPriceAggregates), decimal? nonSmartCostSum = default(decimal?), decimal? estimatedSavings = default(decimal?))
        {
            this.NonSmartPrice = nonSmartPrice;
            this.NonSmartCostSum = nonSmartCostSum;
            this.EstimatedSavings = estimatedSavings;
        }

        /// <summary>
        /// Gets or Sets NonSmartPrice
        /// </summary>
        [DataMember(Name = "nonSmartPrice", EmitDefaultValue = false)]
        public NonSmartSessionPriceAggregates NonSmartPrice { get; set; }

        /// <summary>
        /// Total cost for this consumption in &#x60;&lt;CURRENCY&gt;&#x60;, if it had not been shifted by Smart Charging
        /// </summary>
        /// <value>Total cost for this consumption in &#x60;&lt;CURRENCY&gt;&#x60;, if it had not been shifted by Smart Charging</value>
        [DataMember(Name = "nonSmartCostSum", EmitDefaultValue = true)]
        public decimal? NonSmartCostSum { get; set; }

        /// <summary>
        /// Total estimated savings in &#x60;&lt;CURRENCY&gt;&#x60;, achieved by Smart Charging
        /// </summary>
        /// <value>Total estimated savings in &#x60;&lt;CURRENCY&gt;&#x60;, achieved by Smart Charging</value>
        [DataMember(Name = "estimatedSavings", EmitDefaultValue = true)]
        public decimal? EstimatedSavings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsTimeseriesSessionSampleSmartStats {\n");
            sb.Append("  NonSmartPrice: ").Append(NonSmartPrice).Append("\n");
            sb.Append("  NonSmartCostSum: ").Append(NonSmartCostSum).Append("\n");
            sb.Append("  EstimatedSavings: ").Append(EstimatedSavings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsTimeseriesSessionSampleSmartStats);
        }

        /// <summary>
        /// Returns true if StatisticsTimeseriesSessionSampleSmartStats instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsTimeseriesSessionSampleSmartStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsTimeseriesSessionSampleSmartStats input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NonSmartPrice == input.NonSmartPrice ||
                    (this.NonSmartPrice != null &&
                    this.NonSmartPrice.Equals(input.NonSmartPrice))
                ) && 
                (
                    this.NonSmartCostSum == input.NonSmartCostSum ||
                    (this.NonSmartCostSum != null &&
                    this.NonSmartCostSum.Equals(input.NonSmartCostSum))
                ) && 
                (
                    this.EstimatedSavings == input.EstimatedSavings ||
                    (this.EstimatedSavings != null &&
                    this.EstimatedSavings.Equals(input.EstimatedSavings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NonSmartPrice != null)
                {
                    hashCode = (hashCode * 59) + this.NonSmartPrice.GetHashCode();
                }
                if (this.NonSmartCostSum != null)
                {
                    hashCode = (hashCode * 59) + this.NonSmartCostSum.GetHashCode();
                }
                if (this.EstimatedSavings != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedSavings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
