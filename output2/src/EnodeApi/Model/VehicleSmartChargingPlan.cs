/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// VehicleSmartChargingPlan
    /// </summary>
    [DataContract(Name = "VehicleSmartChargingPlan")]
    public partial class VehicleSmartChargingPlan : IEquatable<VehicleSmartChargingPlan>, IValidatableObject
    {
        /// <summary>
        /// The final state of the plan when it ended
        /// </summary>
        /// <value>The final state of the plan when it ended</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FinalStateEnum
        {
            /// <summary>
            /// Enum FINISHED for value: PLAN:ENDED:FINISHED
            /// </summary>
            [EnumMember(Value = "PLAN:ENDED:FINISHED")]
            FINISHED = 1,

            /// <summary>
            /// Enum UNPLUGGED for value: PLAN:ENDED:UNPLUGGED
            /// </summary>
            [EnumMember(Value = "PLAN:ENDED:UNPLUGGED")]
            UNPLUGGED = 2,

            /// <summary>
            /// Enum FAILED for value: PLAN:ENDED:FAILED
            /// </summary>
            [EnumMember(Value = "PLAN:ENDED:FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum DISABLED for value: PLAN:ENDED:DISABLED
            /// </summary>
            [EnumMember(Value = "PLAN:ENDED:DISABLED")]
            DISABLED = 4,

            /// <summary>
            /// Enum DEADLINECHANGED for value: PLAN:ENDED:DEADLINE_CHANGED
            /// </summary>
            [EnumMember(Value = "PLAN:ENDED:DEADLINE_CHANGED")]
            DEADLINECHANGED = 5

        }


        /// <summary>
        /// The final state of the plan when it ended
        /// </summary>
        /// <value>The final state of the plan when it ended</value>
        [DataMember(Name = "finalState", IsRequired = true, EmitDefaultValue = true)]
        public FinalStateEnum FinalState { get; set; }
        /// <summary>
        /// If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed.
        /// </summary>
        /// <value>If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FailureConditionEnum
        {
            /// <summary>
            /// Enum STOPFAILED for value: STOP_FAILED
            /// </summary>
            [EnumMember(Value = "STOP_FAILED")]
            STOPFAILED = 1,

            /// <summary>
            /// Enum STARTFAILED for value: START_FAILED
            /// </summary>
            [EnumMember(Value = "START_FAILED")]
            STARTFAILED = 2,

            /// <summary>
            /// Enum FINISHEDLATE for value: FINISHED_LATE
            /// </summary>
            [EnumMember(Value = "FINISHED_LATE")]
            FINISHEDLATE = 3,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 4

        }


        /// <summary>
        /// If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed.
        /// </summary>
        /// <value>If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed.</value>
        [DataMember(Name = "failureCondition", IsRequired = true, EmitDefaultValue = true)]
        public FailureConditionEnum FailureCondition { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleSmartChargingPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleSmartChargingPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleSmartChargingPlan" /> class.
        /// </summary>
        /// <param name="id">ID of the Plan (required).</param>
        /// <param name="chargingLocationId">ID of the charging location at which the plan is being executed. Null for plans started before March 2022. (required).</param>
        /// <param name="vehicleId">ID of the Vehicle to which the Plan belongs (required).</param>
        /// <param name="userId">ID of the User to which the Plan belongs (required).</param>
        /// <param name="vendor">Vendor of the Vehicle to which the Plan belongs (required).</param>
        /// <param name="currency">Currency in which monetary amounts are denominated (ISO 4217 3-character Alpha code) (required).</param>
        /// <param name="nonSmartCost">nonSmartCost (required).</param>
        /// <param name="smartCost">smartCost (required).</param>
        /// <param name="stopAt">Time at which the vehicle will stop charging (required).</param>
        /// <param name="startAt">Time at which the vehicle will start charging (required).</param>
        /// <param name="estimatedFinishAt">Time at which charging is estimated to be complete (required).</param>
        /// <param name="stopConfirmedAt">Time at which the vehicle&#39;s charging was confirmed as stopped. (required).</param>
        /// <param name="startConfirmedAt">Time at which the vehicle&#39;s charging was confirmed as started. (required).</param>
        /// <param name="endedAt">The actual time at which the plan ended (required).</param>
        /// <param name="finalState">The final state of the plan when it ended (required).</param>
        /// <param name="failureCondition">If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed. (required).</param>
        /// <param name="externalStart">externalStart.</param>
        public VehicleSmartChargingPlan(string id = default(string), string chargingLocationId = default(string), string vehicleId = default(string), string userId = default(string), string vendor = default(string), string currency = default(string), decimal nonSmartCost = default(decimal), decimal? smartCost = default(decimal?), DateTime stopAt = default(DateTime), DateTime? startAt = default(DateTime?), DateTime estimatedFinishAt = default(DateTime), DateTime? stopConfirmedAt = default(DateTime?), DateTime? startConfirmedAt = default(DateTime?), DateTime? endedAt = default(DateTime?), FinalStateEnum finalState = default(FinalStateEnum), FailureConditionEnum failureCondition = default(FailureConditionEnum), DEPRECATEDExternalStart externalStart = default(DEPRECATEDExternalStart))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.Id = id;
            // to ensure "chargingLocationId" is required (not null)
            if (chargingLocationId == null)
            {
                throw new ArgumentNullException("chargingLocationId is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.ChargingLocationId = chargingLocationId;
            // to ensure "vehicleId" is required (not null)
            if (vehicleId == null)
            {
                throw new ArgumentNullException("vehicleId is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.VehicleId = vehicleId;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.UserId = userId;
            // to ensure "vendor" is required (not null)
            if (vendor == null)
            {
                throw new ArgumentNullException("vendor is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.Vendor = vendor;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.Currency = currency;
            this.NonSmartCost = nonSmartCost;
            // to ensure "smartCost" is required (not null)
            if (smartCost == null)
            {
                throw new ArgumentNullException("smartCost is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.SmartCost = smartCost;
            this.StopAt = stopAt;
            // to ensure "startAt" is required (not null)
            if (startAt == null)
            {
                throw new ArgumentNullException("startAt is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.StartAt = startAt;
            this.EstimatedFinishAt = estimatedFinishAt;
            // to ensure "stopConfirmedAt" is required (not null)
            if (stopConfirmedAt == null)
            {
                throw new ArgumentNullException("stopConfirmedAt is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.StopConfirmedAt = stopConfirmedAt;
            // to ensure "startConfirmedAt" is required (not null)
            if (startConfirmedAt == null)
            {
                throw new ArgumentNullException("startConfirmedAt is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.StartConfirmedAt = startConfirmedAt;
            // to ensure "endedAt" is required (not null)
            if (endedAt == null)
            {
                throw new ArgumentNullException("endedAt is a required property for VehicleSmartChargingPlan and cannot be null");
            }
            this.EndedAt = endedAt;
            this.FinalState = finalState;
            this.FailureCondition = failureCondition;
            this.ExternalStart = externalStart;
        }

        /// <summary>
        /// ID of the Plan
        /// </summary>
        /// <value>ID of the Plan</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// ID of the charging location at which the plan is being executed. Null for plans started before March 2022.
        /// </summary>
        /// <value>ID of the charging location at which the plan is being executed. Null for plans started before March 2022.</value>
        [DataMember(Name = "chargingLocationId", IsRequired = true, EmitDefaultValue = true)]
        public string ChargingLocationId { get; set; }

        /// <summary>
        /// ID of the Vehicle to which the Plan belongs
        /// </summary>
        /// <value>ID of the Vehicle to which the Plan belongs</value>
        [DataMember(Name = "vehicleId", IsRequired = true, EmitDefaultValue = true)]
        public string VehicleId { get; set; }

        /// <summary>
        /// ID of the User to which the Plan belongs
        /// </summary>
        /// <value>ID of the User to which the Plan belongs</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Vendor of the Vehicle to which the Plan belongs
        /// </summary>
        /// <value>Vendor of the Vehicle to which the Plan belongs</value>
        [DataMember(Name = "vendor", IsRequired = true, EmitDefaultValue = true)]
        public string Vendor { get; set; }

        /// <summary>
        /// Currency in which monetary amounts are denominated (ISO 4217 3-character Alpha code)
        /// </summary>
        /// <value>Currency in which monetary amounts are denominated (ISO 4217 3-character Alpha code)</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets NonSmartCost
        /// </summary>
        [DataMember(Name = "nonSmartCost", IsRequired = true, EmitDefaultValue = true)]
        public decimal NonSmartCost { get; set; }

        /// <summary>
        /// Gets or Sets SmartCost
        /// </summary>
        [DataMember(Name = "smartCost", IsRequired = true, EmitDefaultValue = true)]
        public decimal? SmartCost { get; set; }

        /// <summary>
        /// Time at which the vehicle will stop charging
        /// </summary>
        /// <value>Time at which the vehicle will stop charging</value>
        [DataMember(Name = "stopAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StopAt { get; set; }

        /// <summary>
        /// Time at which the vehicle will start charging
        /// </summary>
        /// <value>Time at which the vehicle will start charging</value>
        [DataMember(Name = "startAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? StartAt { get; set; }

        /// <summary>
        /// Time at which charging is estimated to be complete
        /// </summary>
        /// <value>Time at which charging is estimated to be complete</value>
        [DataMember(Name = "estimatedFinishAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EstimatedFinishAt { get; set; }

        /// <summary>
        /// Time at which the vehicle&#39;s charging was confirmed as stopped.
        /// </summary>
        /// <value>Time at which the vehicle&#39;s charging was confirmed as stopped.</value>
        [DataMember(Name = "stopConfirmedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? StopConfirmedAt { get; set; }

        /// <summary>
        /// Time at which the vehicle&#39;s charging was confirmed as started.
        /// </summary>
        /// <value>Time at which the vehicle&#39;s charging was confirmed as started.</value>
        [DataMember(Name = "startConfirmedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? StartConfirmedAt { get; set; }

        /// <summary>
        /// The actual time at which the plan ended
        /// </summary>
        /// <value>The actual time at which the plan ended</value>
        [DataMember(Name = "endedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? EndedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExternalStart
        /// </summary>
        [DataMember(Name = "externalStart", EmitDefaultValue = true)]
        [Obsolete]
        public DEPRECATEDExternalStart ExternalStart { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleSmartChargingPlan {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ChargingLocationId: ").Append(ChargingLocationId).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Vendor: ").Append(Vendor).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  NonSmartCost: ").Append(NonSmartCost).Append("\n");
            sb.Append("  SmartCost: ").Append(SmartCost).Append("\n");
            sb.Append("  StopAt: ").Append(StopAt).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  EstimatedFinishAt: ").Append(EstimatedFinishAt).Append("\n");
            sb.Append("  StopConfirmedAt: ").Append(StopConfirmedAt).Append("\n");
            sb.Append("  StartConfirmedAt: ").Append(StartConfirmedAt).Append("\n");
            sb.Append("  EndedAt: ").Append(EndedAt).Append("\n");
            sb.Append("  FinalState: ").Append(FinalState).Append("\n");
            sb.Append("  FailureCondition: ").Append(FailureCondition).Append("\n");
            sb.Append("  ExternalStart: ").Append(ExternalStart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleSmartChargingPlan);
        }

        /// <summary>
        /// Returns true if VehicleSmartChargingPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleSmartChargingPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleSmartChargingPlan input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ChargingLocationId == input.ChargingLocationId ||
                    (this.ChargingLocationId != null &&
                    this.ChargingLocationId.Equals(input.ChargingLocationId))
                ) && 
                (
                    this.VehicleId == input.VehicleId ||
                    (this.VehicleId != null &&
                    this.VehicleId.Equals(input.VehicleId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Vendor == input.Vendor ||
                    (this.Vendor != null &&
                    this.Vendor.Equals(input.Vendor))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.NonSmartCost == input.NonSmartCost ||
                    this.NonSmartCost.Equals(input.NonSmartCost)
                ) && 
                (
                    this.SmartCost == input.SmartCost ||
                    (this.SmartCost != null &&
                    this.SmartCost.Equals(input.SmartCost))
                ) && 
                (
                    this.StopAt == input.StopAt ||
                    (this.StopAt != null &&
                    this.StopAt.Equals(input.StopAt))
                ) && 
                (
                    this.StartAt == input.StartAt ||
                    (this.StartAt != null &&
                    this.StartAt.Equals(input.StartAt))
                ) && 
                (
                    this.EstimatedFinishAt == input.EstimatedFinishAt ||
                    (this.EstimatedFinishAt != null &&
                    this.EstimatedFinishAt.Equals(input.EstimatedFinishAt))
                ) && 
                (
                    this.StopConfirmedAt == input.StopConfirmedAt ||
                    (this.StopConfirmedAt != null &&
                    this.StopConfirmedAt.Equals(input.StopConfirmedAt))
                ) && 
                (
                    this.StartConfirmedAt == input.StartConfirmedAt ||
                    (this.StartConfirmedAt != null &&
                    this.StartConfirmedAt.Equals(input.StartConfirmedAt))
                ) && 
                (
                    this.EndedAt == input.EndedAt ||
                    (this.EndedAt != null &&
                    this.EndedAt.Equals(input.EndedAt))
                ) && 
                (
                    this.FinalState == input.FinalState ||
                    this.FinalState.Equals(input.FinalState)
                ) && 
                (
                    this.FailureCondition == input.FailureCondition ||
                    this.FailureCondition.Equals(input.FailureCondition)
                ) && 
                (
                    this.ExternalStart == input.ExternalStart ||
                    (this.ExternalStart != null &&
                    this.ExternalStart.Equals(input.ExternalStart))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.ChargingLocationId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingLocationId.GetHashCode();
                }
                if (this.VehicleId != null)
                {
                    hashCode = (hashCode * 59) + this.VehicleId.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.Vendor != null)
                {
                    hashCode = (hashCode * 59) + this.Vendor.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NonSmartCost.GetHashCode();
                if (this.SmartCost != null)
                {
                    hashCode = (hashCode * 59) + this.SmartCost.GetHashCode();
                }
                if (this.StopAt != null)
                {
                    hashCode = (hashCode * 59) + this.StopAt.GetHashCode();
                }
                if (this.StartAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartAt.GetHashCode();
                }
                if (this.EstimatedFinishAt != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedFinishAt.GetHashCode();
                }
                if (this.StopConfirmedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StopConfirmedAt.GetHashCode();
                }
                if (this.StartConfirmedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartConfirmedAt.GetHashCode();
                }
                if (this.EndedAt != null)
                {
                    hashCode = (hashCode * 59) + this.EndedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FinalState.GetHashCode();
                hashCode = (hashCode * 59) + this.FailureCondition.GetHashCode();
                if (this.ExternalStart != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalStart.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
