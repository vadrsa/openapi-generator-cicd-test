/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Information about the electric or hybrid battery.
    /// </summary>
    [DataContract(Name = "VehicleChargeState")]
    public partial class VehicleChargeState : IEquatable<VehicleChargeState>, IValidatableObject
    {
        /// <summary>
        /// Defines IsChargingReasons
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsChargingReasonsEnum
        {
            /// <summary>
            /// Enum DEFAULT for value: DEFAULT
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT = 1,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 2,

            /// <summary>
            /// Enum NOTPLUGGEDIN for value: NOT_PLUGGED_IN
            /// </summary>
            [EnumMember(Value = "NOT_PLUGGED_IN")]
            NOTPLUGGEDIN = 3,

            /// <summary>
            /// Enum FULLYCHARGED for value: FULLY_CHARGED
            /// </summary>
            [EnumMember(Value = "FULLY_CHARGED")]
            FULLYCHARGED = 4,

            /// <summary>
            /// Enum MANUALLYSTOPPED for value: MANUALLY_STOPPED
            /// </summary>
            [EnumMember(Value = "MANUALLY_STOPPED")]
            MANUALLYSTOPPED = 5,

            /// <summary>
            /// Enum MANUALLYSTARTED for value: MANUALLY_STARTED
            /// </summary>
            [EnumMember(Value = "MANUALLY_STARTED")]
            MANUALLYSTARTED = 6,

            /// <summary>
            /// Enum SMARTCHARGINGDELAY for value: SMART_CHARGING_DELAY
            /// </summary>
            [EnumMember(Value = "SMART_CHARGING_DELAY")]
            SMARTCHARGINGDELAY = 7,

            /// <summary>
            /// Enum SMARTCHARGINGACTIVE for value: SMART_CHARGING_ACTIVE
            /// </summary>
            [EnumMember(Value = "SMART_CHARGING_ACTIVE")]
            SMARTCHARGINGACTIVE = 8,

            /// <summary>
            /// Enum SMARTCHARGINGDEADLINE for value: SMART_CHARGING_DEADLINE
            /// </summary>
            [EnumMember(Value = "SMART_CHARGING_DEADLINE")]
            SMARTCHARGINGDEADLINE = 9

        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleChargeState" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleChargeState() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleChargeState" /> class.
        /// </summary>
        /// <param name="batteryLevel">Remaining battery in percent (required).</param>
        /// <param name="range">Estimated remaining kilometers (required).</param>
        /// <param name="isPluggedIn">Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging) (required).</param>
        /// <param name="isCharging">Current charging status of the vehicle (required).</param>
        /// <param name="isFullyCharged">Indicates whether the vehicle is fully charged. &#39;Fully charged&#39; may be a &#x60;batteryLevel&#x60; of less than 100 if a maximum charge ceiling has been configured in the vehicle. (required).</param>
        /// <param name="batteryCapacity">Vehicle&#39;s maximum physical battery capacity in kWh. This number slowly decreases/degrades over time. (required).</param>
        /// <param name="chargeLimit">Charge limit, as a percent of &#x60;batteryCapacity&#x60;. (required).</param>
        /// <param name="chargeRate">The current charge rate in kW.  This property is only available when the vehicle is charging, and is &#x60;null&#x60; any other time. (required).</param>
        /// <param name="chargeTimeRemaining">Estimated time until the current charging intent is completed, in minutes.  This property is only available when the vehicle is charging, and is &#x60;null&#x60; any other time. (required).</param>
        /// <param name="lastUpdated">ISO8601 UTC timestamp of last received charge state update (required).</param>
        /// <param name="isChargingReasons">Array of string constants that explain why the car is or is not charging. May contain multiple values..</param>
        public VehicleChargeState(decimal? batteryLevel = default(decimal?), decimal? range = default(decimal?), bool? isPluggedIn = default(bool?), bool? isCharging = default(bool?), bool? isFullyCharged = default(bool?), decimal? batteryCapacity = default(decimal?), decimal? chargeLimit = default(decimal?), decimal? chargeRate = default(decimal?), decimal? chargeTimeRemaining = default(decimal?), DateTime? lastUpdated = default(DateTime?), List<IsChargingReasonsEnum> isChargingReasons = default(List<IsChargingReasonsEnum>))
        {
            // to ensure "batteryLevel" is required (not null)
            if (batteryLevel == null)
            {
                throw new ArgumentNullException("batteryLevel is a required property for VehicleChargeState and cannot be null");
            }
            this.BatteryLevel = batteryLevel;
            // to ensure "range" is required (not null)
            if (range == null)
            {
                throw new ArgumentNullException("range is a required property for VehicleChargeState and cannot be null");
            }
            this.Range = range;
            // to ensure "isPluggedIn" is required (not null)
            if (isPluggedIn == null)
            {
                throw new ArgumentNullException("isPluggedIn is a required property for VehicleChargeState and cannot be null");
            }
            this.IsPluggedIn = isPluggedIn;
            // to ensure "isCharging" is required (not null)
            if (isCharging == null)
            {
                throw new ArgumentNullException("isCharging is a required property for VehicleChargeState and cannot be null");
            }
            this.IsCharging = isCharging;
            // to ensure "isFullyCharged" is required (not null)
            if (isFullyCharged == null)
            {
                throw new ArgumentNullException("isFullyCharged is a required property for VehicleChargeState and cannot be null");
            }
            this.IsFullyCharged = isFullyCharged;
            // to ensure "batteryCapacity" is required (not null)
            if (batteryCapacity == null)
            {
                throw new ArgumentNullException("batteryCapacity is a required property for VehicleChargeState and cannot be null");
            }
            this.BatteryCapacity = batteryCapacity;
            // to ensure "chargeLimit" is required (not null)
            if (chargeLimit == null)
            {
                throw new ArgumentNullException("chargeLimit is a required property for VehicleChargeState and cannot be null");
            }
            this.ChargeLimit = chargeLimit;
            // to ensure "chargeRate" is required (not null)
            if (chargeRate == null)
            {
                throw new ArgumentNullException("chargeRate is a required property for VehicleChargeState and cannot be null");
            }
            this.ChargeRate = chargeRate;
            // to ensure "chargeTimeRemaining" is required (not null)
            if (chargeTimeRemaining == null)
            {
                throw new ArgumentNullException("chargeTimeRemaining is a required property for VehicleChargeState and cannot be null");
            }
            this.ChargeTimeRemaining = chargeTimeRemaining;
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new ArgumentNullException("lastUpdated is a required property for VehicleChargeState and cannot be null");
            }
            this.LastUpdated = lastUpdated;
            this.IsChargingReasons = isChargingReasons;
        }

        /// <summary>
        /// Remaining battery in percent
        /// </summary>
        /// <value>Remaining battery in percent</value>
        [DataMember(Name = "batteryLevel", IsRequired = true, EmitDefaultValue = true)]
        public decimal? BatteryLevel { get; set; }

        /// <summary>
        /// Estimated remaining kilometers
        /// </summary>
        /// <value>Estimated remaining kilometers</value>
        [DataMember(Name = "range", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Range { get; set; }

        /// <summary>
        /// Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)
        /// </summary>
        /// <value>Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)</value>
        [DataMember(Name = "isPluggedIn", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsPluggedIn { get; set; }

        /// <summary>
        /// Current charging status of the vehicle
        /// </summary>
        /// <value>Current charging status of the vehicle</value>
        [DataMember(Name = "isCharging", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsCharging { get; set; }

        /// <summary>
        /// Indicates whether the vehicle is fully charged. &#39;Fully charged&#39; may be a &#x60;batteryLevel&#x60; of less than 100 if a maximum charge ceiling has been configured in the vehicle.
        /// </summary>
        /// <value>Indicates whether the vehicle is fully charged. &#39;Fully charged&#39; may be a &#x60;batteryLevel&#x60; of less than 100 if a maximum charge ceiling has been configured in the vehicle.</value>
        [DataMember(Name = "isFullyCharged", IsRequired = true, EmitDefaultValue = true)]
        public bool? IsFullyCharged { get; set; }

        /// <summary>
        /// Vehicle&#39;s maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.
        /// </summary>
        /// <value>Vehicle&#39;s maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.</value>
        [DataMember(Name = "batteryCapacity", IsRequired = true, EmitDefaultValue = true)]
        public decimal? BatteryCapacity { get; set; }

        /// <summary>
        /// Charge limit, as a percent of &#x60;batteryCapacity&#x60;.
        /// </summary>
        /// <value>Charge limit, as a percent of &#x60;batteryCapacity&#x60;.</value>
        [DataMember(Name = "chargeLimit", IsRequired = true, EmitDefaultValue = true)]
        public decimal? ChargeLimit { get; set; }

        /// <summary>
        /// The current charge rate in kW.  This property is only available when the vehicle is charging, and is &#x60;null&#x60; any other time.
        /// </summary>
        /// <value>The current charge rate in kW.  This property is only available when the vehicle is charging, and is &#x60;null&#x60; any other time.</value>
        [DataMember(Name = "chargeRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal? ChargeRate { get; set; }

        /// <summary>
        /// Estimated time until the current charging intent is completed, in minutes.  This property is only available when the vehicle is charging, and is &#x60;null&#x60; any other time.
        /// </summary>
        /// <value>Estimated time until the current charging intent is completed, in minutes.  This property is only available when the vehicle is charging, and is &#x60;null&#x60; any other time.</value>
        [DataMember(Name = "chargeTimeRemaining", IsRequired = true, EmitDefaultValue = true)]
        public decimal? ChargeTimeRemaining { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp of last received charge state update
        /// </summary>
        /// <value>ISO8601 UTC timestamp of last received charge state update</value>
        [DataMember(Name = "lastUpdated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Array of string constants that explain why the car is or is not charging. May contain multiple values.
        /// </summary>
        /// <value>Array of string constants that explain why the car is or is not charging. May contain multiple values.</value>
        [DataMember(Name = "isChargingReasons", EmitDefaultValue = false)]
        [Obsolete]
        public List<VehicleChargeState.IsChargingReasonsEnum> IsChargingReasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleChargeState {\n");
            sb.Append("  BatteryLevel: ").Append(BatteryLevel).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  IsPluggedIn: ").Append(IsPluggedIn).Append("\n");
            sb.Append("  IsCharging: ").Append(IsCharging).Append("\n");
            sb.Append("  IsFullyCharged: ").Append(IsFullyCharged).Append("\n");
            sb.Append("  BatteryCapacity: ").Append(BatteryCapacity).Append("\n");
            sb.Append("  ChargeLimit: ").Append(ChargeLimit).Append("\n");
            sb.Append("  ChargeRate: ").Append(ChargeRate).Append("\n");
            sb.Append("  ChargeTimeRemaining: ").Append(ChargeTimeRemaining).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  IsChargingReasons: ").Append(IsChargingReasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleChargeState);
        }

        /// <summary>
        /// Returns true if VehicleChargeState instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleChargeState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleChargeState input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BatteryLevel == input.BatteryLevel ||
                    (this.BatteryLevel != null &&
                    this.BatteryLevel.Equals(input.BatteryLevel))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.IsPluggedIn == input.IsPluggedIn ||
                    (this.IsPluggedIn != null &&
                    this.IsPluggedIn.Equals(input.IsPluggedIn))
                ) && 
                (
                    this.IsCharging == input.IsCharging ||
                    (this.IsCharging != null &&
                    this.IsCharging.Equals(input.IsCharging))
                ) && 
                (
                    this.IsFullyCharged == input.IsFullyCharged ||
                    (this.IsFullyCharged != null &&
                    this.IsFullyCharged.Equals(input.IsFullyCharged))
                ) && 
                (
                    this.BatteryCapacity == input.BatteryCapacity ||
                    (this.BatteryCapacity != null &&
                    this.BatteryCapacity.Equals(input.BatteryCapacity))
                ) && 
                (
                    this.ChargeLimit == input.ChargeLimit ||
                    (this.ChargeLimit != null &&
                    this.ChargeLimit.Equals(input.ChargeLimit))
                ) && 
                (
                    this.ChargeRate == input.ChargeRate ||
                    (this.ChargeRate != null &&
                    this.ChargeRate.Equals(input.ChargeRate))
                ) && 
                (
                    this.ChargeTimeRemaining == input.ChargeTimeRemaining ||
                    (this.ChargeTimeRemaining != null &&
                    this.ChargeTimeRemaining.Equals(input.ChargeTimeRemaining))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.IsChargingReasons == input.IsChargingReasons ||
                    this.IsChargingReasons != null &&
                    input.IsChargingReasons != null &&
                    this.IsChargingReasons.SequenceEqual(input.IsChargingReasons)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatteryLevel != null)
                {
                    hashCode = (hashCode * 59) + this.BatteryLevel.GetHashCode();
                }
                if (this.Range != null)
                {
                    hashCode = (hashCode * 59) + this.Range.GetHashCode();
                }
                if (this.IsPluggedIn != null)
                {
                    hashCode = (hashCode * 59) + this.IsPluggedIn.GetHashCode();
                }
                if (this.IsCharging != null)
                {
                    hashCode = (hashCode * 59) + this.IsCharging.GetHashCode();
                }
                if (this.IsFullyCharged != null)
                {
                    hashCode = (hashCode * 59) + this.IsFullyCharged.GetHashCode();
                }
                if (this.BatteryCapacity != null)
                {
                    hashCode = (hashCode * 59) + this.BatteryCapacity.GetHashCode();
                }
                if (this.ChargeLimit != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeLimit.GetHashCode();
                }
                if (this.ChargeRate != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeRate.GetHashCode();
                }
                if (this.ChargeTimeRemaining != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeTimeRemaining.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.IsChargingReasons != null)
                {
                    hashCode = (hashCode * 59) + this.IsChargingReasons.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // BatteryLevel (decimal?) maximum
            if (this.BatteryLevel > (decimal?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatteryLevel, must be a value less than or equal to 100.", new [] { "BatteryLevel" });
            }

            // BatteryLevel (decimal?) minimum
            if (this.BatteryLevel < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatteryLevel, must be a value greater than or equal to 0.", new [] { "BatteryLevel" });
            }

            // Range (decimal?) minimum
            if (this.Range < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Range, must be a value greater than or equal to 0.", new [] { "Range" });
            }

            // BatteryCapacity (decimal?) minimum
            if (this.BatteryCapacity < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BatteryCapacity, must be a value greater than or equal to 0.", new [] { "BatteryCapacity" });
            }

            // ChargeLimit (decimal?) maximum
            if (this.ChargeLimit > (decimal?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargeLimit, must be a value less than or equal to 100.", new [] { "ChargeLimit" });
            }

            // ChargeLimit (decimal?) minimum
            if (this.ChargeLimit < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargeLimit, must be a value greater than or equal to 0.", new [] { "ChargeLimit" });
            }

            // ChargeRate (decimal?) minimum
            if (this.ChargeRate < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargeRate, must be a value greater than or equal to 0.", new [] { "ChargeRate" });
            }

            yield break;
        }
    }

}
