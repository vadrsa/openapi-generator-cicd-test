/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// ChargeAction
    /// </summary>
    [DataContract(Name = "ChargeAction")]
    public partial class ChargeAction : IEquatable<ChargeAction>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TargetType
        /// </summary>
        [DataMember(Name = "targetType", IsRequired = true, EmitDefaultValue = true)]
        public ChargeableVendorType TargetType { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", IsRequired = true, EmitDefaultValue = true)]
        public ChargingAction Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChargeAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeAction" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="targetId">targetId (required).</param>
        /// <param name="targetType">targetType (required).</param>
        /// <param name="kind">kind (required).</param>
        /// <param name="createdAt">ISO8601 UTC timestamp (required).</param>
        /// <param name="updatedAt">ISO8601 UTC timestamp (required).</param>
        /// <param name="completedAt">ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable. (required).</param>
        /// <param name="state">state (required).</param>
        /// <param name="entityId">entityId (required).</param>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="chargeableId">chargeableId (required).</param>
        /// <param name="chargeableType">chargeableType (required).</param>
        public ChargeAction(string id = default(string), string targetId = default(string), ChargeableVendorType targetType = default(ChargeableVendorType), ChargingAction kind = default(ChargingAction), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), DateTime completedAt = default(DateTime), VendorActionState state = default(VendorActionState), string entityId = default(string), string entityType = default(string), string chargeableId = default(string), string chargeableType = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ChargeAction and cannot be null");
            }
            this.Id = id;
            // to ensure "targetId" is required (not null)
            if (targetId == null)
            {
                throw new ArgumentNullException("targetId is a required property for ChargeAction and cannot be null");
            }
            this.TargetId = targetId;
            this.TargetType = targetType;
            this.Kind = kind;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.CompletedAt = completedAt;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for ChargeAction and cannot be null");
            }
            this.State = state;
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new ArgumentNullException("entityId is a required property for ChargeAction and cannot be null");
            }
            this.EntityId = entityId;
            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new ArgumentNullException("entityType is a required property for ChargeAction and cannot be null");
            }
            this.EntityType = entityType;
            // to ensure "chargeableId" is required (not null)
            if (chargeableId == null)
            {
                throw new ArgumentNullException("chargeableId is a required property for ChargeAction and cannot be null");
            }
            this.ChargeableId = chargeableId;
            // to ensure "chargeableType" is required (not null)
            if (chargeableType == null)
            {
                throw new ArgumentNullException("chargeableType is a required property for ChargeAction and cannot be null");
            }
            this.ChargeableType = chargeableType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name = "targetId", IsRequired = true, EmitDefaultValue = true)]
        public string TargetId { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp
        /// </summary>
        /// <value>ISO8601 UTC timestamp</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp
        /// </summary>
        /// <value>ISO8601 UTC timestamp</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable.
        /// </summary>
        /// <value>ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable.</value>
        [DataMember(Name = "completedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public VendorActionState State { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets ChargeableId
        /// </summary>
        [DataMember(Name = "chargeableId", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string ChargeableId { get; set; }

        /// <summary>
        /// Gets or Sets ChargeableType
        /// </summary>
        [DataMember(Name = "chargeableType", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string ChargeableType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChargeAction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  ChargeableId: ").Append(ChargeableId).Append("\n");
            sb.Append("  ChargeableType: ").Append(ChargeableType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeAction);
        }

        /// <summary>
        /// Returns true if ChargeAction instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeAction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.TargetType == input.TargetType ||
                    this.TargetType.Equals(input.TargetType)
                ) && 
                (
                    this.Kind == input.Kind ||
                    this.Kind.Equals(input.Kind)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.ChargeableId == input.ChargeableId ||
                    (this.ChargeableId != null &&
                    this.ChargeableId.Equals(input.ChargeableId))
                ) && 
                (
                    this.ChargeableType == input.ChargeableType ||
                    (this.ChargeableType != null &&
                    this.ChargeableType.Equals(input.ChargeableType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.TargetId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TargetType.GetHashCode();
                hashCode = (hashCode * 59) + this.Kind.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                if (this.EntityType != null)
                {
                    hashCode = (hashCode * 59) + this.EntityType.GetHashCode();
                }
                if (this.ChargeableId != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeableId.GetHashCode();
                }
                if (this.ChargeableType != null)
                {
                    hashCode = (hashCode * 59) + this.ChargeableType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
