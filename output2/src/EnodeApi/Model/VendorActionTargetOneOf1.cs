/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// VendorActionTargetOneOf1
    /// </summary>
    [DataContract(Name = "VendorAction_target_oneOf_1")]
    public partial class VendorActionTargetOneOf1 : IEquatable<VendorActionTargetOneOf1>, IValidatableObject
    {
        /// <summary>
        /// Defines HoldType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HoldTypeEnum
        {
            /// <summary>
            /// Enum SCHEDULED for value: SCHEDULED
            /// </summary>
            [EnumMember(Value = "SCHEDULED")]
            SCHEDULED = 1

        }


        /// <summary>
        /// Gets or Sets HoldType
        /// </summary>
        [DataMember(Name = "holdType", EmitDefaultValue = false)]
        public HoldTypeEnum? HoldType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorActionTargetOneOf1" /> class.
        /// </summary>
        /// <param name="holdType">holdType.</param>
        public VendorActionTargetOneOf1(HoldTypeEnum? holdType = default(HoldTypeEnum?))
        {
            this.HoldType = holdType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorActionTargetOneOf1 {\n");
            sb.Append("  HoldType: ").Append(HoldType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorActionTargetOneOf1);
        }

        /// <summary>
        /// Returns true if VendorActionTargetOneOf1 instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorActionTargetOneOf1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorActionTargetOneOf1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.HoldType == input.HoldType ||
                    this.HoldType.Equals(input.HoldType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.HoldType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
