/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EnodeApi.Client.OpenAPIDateConverter;

namespace EnodeApi.Model
{
    /// <summary>
    /// Vehicle&#39;s GPS coordinates with timestamp
    /// </summary>
    [DataContract(Name = "VehicleLocation")]
    public partial class VehicleLocation : IEquatable<VehicleLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleLocation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VehicleLocation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VehicleLocation" /> class.
        /// </summary>
        /// <param name="longitude">Longitude in degrees (required).</param>
        /// <param name="latitude">Latitude in degrees (required).</param>
        /// <param name="lastUpdated">ISO8601 UTC timestamp of last received location (required).</param>
        public VehicleLocation(decimal? longitude = default(decimal?), decimal? latitude = default(decimal?), DateTime? lastUpdated = default(DateTime?))
        {
            // to ensure "longitude" is required (not null)
            if (longitude == null)
            {
                throw new ArgumentNullException("longitude is a required property for VehicleLocation and cannot be null");
            }
            this.Longitude = longitude;
            // to ensure "latitude" is required (not null)
            if (latitude == null)
            {
                throw new ArgumentNullException("latitude is a required property for VehicleLocation and cannot be null");
            }
            this.Latitude = latitude;
            // to ensure "lastUpdated" is required (not null)
            if (lastUpdated == null)
            {
                throw new ArgumentNullException("lastUpdated is a required property for VehicleLocation and cannot be null");
            }
            this.LastUpdated = lastUpdated;
        }

        /// <summary>
        /// Longitude in degrees
        /// </summary>
        /// <value>Longitude in degrees</value>
        [DataMember(Name = "longitude", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Longitude { get; set; }

        /// <summary>
        /// Latitude in degrees
        /// </summary>
        /// <value>Latitude in degrees</value>
        [DataMember(Name = "latitude", IsRequired = true, EmitDefaultValue = true)]
        public decimal? Latitude { get; set; }

        /// <summary>
        /// ISO8601 UTC timestamp of last received location
        /// </summary>
        /// <value>ISO8601 UTC timestamp of last received location</value>
        [DataMember(Name = "lastUpdated", IsRequired = true, EmitDefaultValue = true)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VehicleLocation {\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VehicleLocation);
        }

        /// <summary>
        /// Returns true if VehicleLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of VehicleLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleLocation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
