/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehiclesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List Vehicles
        /// </summary>
        /// <remarks>
        /// List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Vehicle&gt;</returns>
        List<Vehicle> GetVehicles(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0);

        /// <summary>
        /// List Vehicles
        /// </summary>
        /// <remarks>
        /// List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        ApiResponse<List<Vehicle>> GetVehiclesWithHttpInfo(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0);
        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAction</returns>
        ChargeAction GetVehiclesAction(string vendorActionId, int operationIndex = 0);

        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAction</returns>
        ApiResponse<ChargeAction> GetVehiclesActionWithHttpInfo(string vendorActionId, int operationIndex = 0);
        /// <summary>
        /// Get Vehicle
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vehicle</returns>
        Vehicle GetVehiclesVehicleid(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0);

        /// <summary>
        /// Get Vehicle
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vehicle</returns>
        ApiResponse<Vehicle> GetVehiclesVehicleidWithHttpInfo(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0);
        /// <summary>
        /// Get Smart Charging Plan
        /// </summary>
        /// <remarks>
        /// Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VehicleSmartChargingPlan</returns>
        VehicleSmartChargingPlan GetVehiclesVehicleidSmartchargingplans(string vehicleId, string smartChargingPlanId, int operationIndex = 0);

        /// <summary>
        /// Get Smart Charging Plan
        /// </summary>
        /// <remarks>
        /// Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VehicleSmartChargingPlan</returns>
        ApiResponse<VehicleSmartChargingPlan> GetVehiclesVehicleidSmartchargingplansWithHttpInfo(string vehicleId, string smartChargingPlanId, int operationIndex = 0);
        /// <summary>
        /// Get Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        GetVehiclesVehicleidSmartchargingpolicy200Response GetVehiclesVehicleidSmartchargingpolicy(string vehicleId, int operationIndex = 0);

        /// <summary>
        /// Get Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> GetVehiclesVehicleidSmartchargingpolicyWithHttpInfo(string vehicleId, int operationIndex = 0);
        /// <summary>
        /// Get Vehicle Smart Charging Status
        /// </summary>
        /// <remarks>
        /// Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVehiclesVehicleidSmartchargingstatus200Response</returns>
        GetVehiclesVehicleidSmartchargingstatus200Response GetVehiclesVehicleidSmartchargingstatus(string vehicleId, int operationIndex = 0);

        /// <summary>
        /// Get Vehicle Smart Charging Status
        /// </summary>
        /// <remarks>
        /// Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVehiclesVehicleidSmartchargingstatus200Response</returns>
        ApiResponse<GetVehiclesVehicleidSmartchargingstatus200Response> GetVehiclesVehicleidSmartchargingstatusWithHttpInfo(string vehicleId, int operationIndex = 0);
        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAction</returns>
        ChargeAction PostVehiclesVehicleidCharging(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0);

        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAction</returns>
        ApiResponse<ChargeAction> PostVehiclesVehicleidChargingWithHttpInfo(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0);
        /// <summary>
        /// Update Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        GetVehiclesVehicleidSmartchargingpolicy200Response UpdateVehicleSmartChargingPolicy(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0);

        /// <summary>
        /// Update Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> UpdateVehicleSmartChargingPolicyWithHttpInfo(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0);
        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        SmartOverrideResponse VehicleCreateExternalStart(string vehicleId, int operationIndex = 0);

        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        ApiResponse<SmartOverrideResponse> VehicleCreateExternalStartWithHttpInfo(string vehicleId, int operationIndex = 0);
        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        SmartOverrideResponse VehicleCreateSmartOverride(string vehicleId, int operationIndex = 0);

        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        ApiResponse<SmartOverrideResponse> VehicleCreateSmartOverrideWithHttpInfo(string vehicleId, int operationIndex = 0);
        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        SmartOverrideResponse VehicleEndExternalStart(string vehicleId, int operationIndex = 0);

        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        ApiResponse<SmartOverrideResponse> VehicleEndExternalStartWithHttpInfo(string vehicleId, int operationIndex = 0);
        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        SmartOverrideResponse VehicleEndSmartOverride(string vehicleId, int operationIndex = 0);

        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        ApiResponse<SmartOverrideResponse> VehicleEndSmartOverrideWithHttpInfo(string vehicleId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehiclesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List Vehicles
        /// </summary>
        /// <remarks>
        /// List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        System.Threading.Tasks.Task<List<Vehicle>> GetVehiclesAsync(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Vehicles
        /// </summary>
        /// <remarks>
        /// List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vehicle>>> GetVehiclesWithHttpInfoAsync(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAction</returns>
        System.Threading.Tasks.Task<ChargeAction> GetVehiclesActionAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargeAction>> GetVehiclesActionWithHttpInfoAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vehicle
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        System.Threading.Tasks.Task<Vehicle> GetVehiclesVehicleidAsync(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vehicle
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vehicle>> GetVehiclesVehicleidWithHttpInfoAsync(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Smart Charging Plan
        /// </summary>
        /// <remarks>
        /// Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VehicleSmartChargingPlan</returns>
        System.Threading.Tasks.Task<VehicleSmartChargingPlan> GetVehiclesVehicleidSmartchargingplansAsync(string vehicleId, string smartChargingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Smart Charging Plan
        /// </summary>
        /// <remarks>
        /// Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VehicleSmartChargingPlan)</returns>
        System.Threading.Tasks.Task<ApiResponse<VehicleSmartChargingPlan>> GetVehiclesVehicleidSmartchargingplansWithHttpInfoAsync(string vehicleId, string smartChargingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        System.Threading.Tasks.Task<GetVehiclesVehicleidSmartchargingpolicy200Response> GetVehiclesVehicleidSmartchargingpolicyAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVehiclesVehicleidSmartchargingpolicy200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response>> GetVehiclesVehicleidSmartchargingpolicyWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Vehicle Smart Charging Status
        /// </summary>
        /// <remarks>
        /// Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVehiclesVehicleidSmartchargingstatus200Response</returns>
        System.Threading.Tasks.Task<GetVehiclesVehicleidSmartchargingstatus200Response> GetVehiclesVehicleidSmartchargingstatusAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Vehicle Smart Charging Status
        /// </summary>
        /// <remarks>
        /// Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVehiclesVehicleidSmartchargingstatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVehiclesVehicleidSmartchargingstatus200Response>> GetVehiclesVehicleidSmartchargingstatusWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAction</returns>
        System.Threading.Tasks.Task<ChargeAction> PostVehiclesVehicleidChargingAsync(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargeAction>> PostVehiclesVehicleidChargingWithHttpInfoAsync(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        System.Threading.Tasks.Task<GetVehiclesVehicleidSmartchargingpolicy200Response> UpdateVehicleSmartChargingPolicyAsync(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Vehicle Smart Charging Policy
        /// </summary>
        /// <remarks>
        /// Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVehiclesVehicleidSmartchargingpolicy200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response>> UpdateVehicleSmartChargingPolicyWithHttpInfoAsync(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SmartOverrideResponse> VehicleCreateExternalStartAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> VehicleCreateExternalStartWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        System.Threading.Tasks.Task<SmartOverrideResponse> VehicleCreateSmartOverrideAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> VehicleCreateSmartOverrideWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SmartOverrideResponse> VehicleEndExternalStartAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> VehicleEndExternalStartWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        System.Threading.Tasks.Task<SmartOverrideResponse> VehicleEndSmartOverrideAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> VehicleEndSmartOverrideWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVehiclesApi : IVehiclesApiSync, IVehiclesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VehiclesApi : IVehiclesApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VehiclesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VehiclesApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VehiclesApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VehiclesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VehiclesApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List Vehicles List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Vehicle&gt;</returns>
        public List<Vehicle> GetVehicles(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<Vehicle>> localVarResponse = GetVehiclesWithHttpInfo(field);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Vehicles List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Vehicle&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<Vehicle>> GetVehiclesWithHttpInfo(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (field != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "field", field));
            }

            localVarRequestOptions.Operation = "VehiclesApi.GetVehicles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Vehicle>>("/vehicles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehicles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Vehicles List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Vehicle&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vehicle>> GetVehiclesAsync(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<Vehicle>> localVarResponse = await GetVehiclesWithHttpInfoAsync(field, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Vehicles List all available Vehicles for the User.  If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Vehicle&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<Vehicle>>> GetVehiclesWithHttpInfoAsync(GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (field != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "field", field));
            }

            localVarRequestOptions.Operation = "VehiclesApi.GetVehicles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Vehicle>>("/vehicles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehicles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAction</returns>
        public ChargeAction GetVehiclesAction(string vendorActionId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ChargeAction> localVarResponse = GetVehiclesActionWithHttpInfo(vendorActionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAction</returns>
        public EnodeApi.Client.ApiResponse<ChargeAction> GetVehiclesActionWithHttpInfo(string vendorActionId, int operationIndex = 0)
        {
            // verify the required parameter 'vendorActionId' is set
            if (vendorActionId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendorActionId' when calling VehiclesApi->GetVehiclesAction");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendorActionId", EnodeApi.Client.ClientUtils.ParameterToString(vendorActionId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChargeAction>("/vehicles/actions/{vendorActionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAction</returns>
        public async System.Threading.Tasks.Task<ChargeAction> GetVehiclesActionAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ChargeAction> localVarResponse = await GetVehiclesActionWithHttpInfoAsync(vendorActionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ChargeAction>> GetVehiclesActionWithHttpInfoAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vendorActionId' is set
            if (vendorActionId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendorActionId' when calling VehiclesApi->GetVehiclesAction");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendorActionId", EnodeApi.Client.ClientUtils.ParameterToString(vendorActionId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChargeAction>("/vehicles/actions/{vendorActionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vehicle 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Vehicle</returns>
        public Vehicle GetVehiclesVehicleid(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<Vehicle> localVarResponse = GetVehiclesVehicleidWithHttpInfo(vehicleId, field);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vehicle 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Vehicle</returns>
        public EnodeApi.Client.ApiResponse<Vehicle> GetVehiclesVehicleidWithHttpInfo(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleid");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            if (field != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "field", field));
            }

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Vehicle>("/vehicles/{vehicleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vehicle 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Vehicle</returns>
        public async System.Threading.Tasks.Task<Vehicle> GetVehiclesVehicleidAsync(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<Vehicle> localVarResponse = await GetVehiclesVehicleidWithHttpInfoAsync(vehicleId, field, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vehicle 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="field">If you specify any fields here, we make a request to the Vehicle&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the vehicle).   Note that the field values &#x60;capabilities&#x60; &amp; &#x60;smartChargingPolicy&#x60; are deprecated and will always be returned.    If no fields are included, and the latest cached full Vehicle object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Vehicle)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Vehicle>> GetVehiclesVehicleidWithHttpInfoAsync(string vehicleId, GetVehiclesFieldParameter? field = default(GetVehiclesFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleid");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            if (field != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "field", field));
            }

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Vehicle>("/vehicles/{vehicleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Smart Charging Plan Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VehicleSmartChargingPlan</returns>
        public VehicleSmartChargingPlan GetVehiclesVehicleidSmartchargingplans(string vehicleId, string smartChargingPlanId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<VehicleSmartChargingPlan> localVarResponse = GetVehiclesVehicleidSmartchargingplansWithHttpInfo(vehicleId, smartChargingPlanId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Smart Charging Plan Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VehicleSmartChargingPlan</returns>
        public EnodeApi.Client.ApiResponse<VehicleSmartChargingPlan> GetVehiclesVehicleidSmartchargingplansWithHttpInfo(string vehicleId, string smartChargingPlanId, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingplans");
            }

            // verify the required parameter 'smartChargingPlanId' is set
            if (smartChargingPlanId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'smartChargingPlanId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingplans");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("smartChargingPlanId", EnodeApi.Client.ClientUtils.ParameterToString(smartChargingPlanId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleidSmartchargingplans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VehicleSmartChargingPlan>("/vehicles/{vehicleId}/smart-charging-plans/{smartChargingPlanId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleidSmartchargingplans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Smart Charging Plan Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VehicleSmartChargingPlan</returns>
        public async System.Threading.Tasks.Task<VehicleSmartChargingPlan> GetVehiclesVehicleidSmartchargingplansAsync(string vehicleId, string smartChargingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<VehicleSmartChargingPlan> localVarResponse = await GetVehiclesVehicleidSmartchargingplansWithHttpInfoAsync(vehicleId, smartChargingPlanId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Smart Charging Plan Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.  To fetch the most recently created plan, call the endpoint with &#x60;smartChargingPlanId&#x60; set to &#x60;latest&#x60;.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="smartChargingPlanId">ID of the Smart Charging Plan</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VehicleSmartChargingPlan)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<VehicleSmartChargingPlan>> GetVehiclesVehicleidSmartchargingplansWithHttpInfoAsync(string vehicleId, string smartChargingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingplans");
            }

            // verify the required parameter 'smartChargingPlanId' is set
            if (smartChargingPlanId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'smartChargingPlanId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingplans");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("smartChargingPlanId", EnodeApi.Client.ClientUtils.ParameterToString(smartChargingPlanId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleidSmartchargingplans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VehicleSmartChargingPlan>("/vehicles/{vehicleId}/smart-charging-plans/{smartChargingPlanId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleidSmartchargingplans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Policy Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        public GetVehiclesVehicleidSmartchargingpolicy200Response GetVehiclesVehicleidSmartchargingpolicy(string vehicleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> localVarResponse = GetVehiclesVehicleidSmartchargingpolicyWithHttpInfo(vehicleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Policy Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        public EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> GetVehiclesVehicleidSmartchargingpolicyWithHttpInfo(string vehicleId, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingpolicy");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleidSmartchargingpolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetVehiclesVehicleidSmartchargingpolicy200Response>("/vehicles/{vehicleId}/smart-charging-policy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleidSmartchargingpolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Policy Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        public async System.Threading.Tasks.Task<GetVehiclesVehicleidSmartchargingpolicy200Response> GetVehiclesVehicleidSmartchargingpolicyAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> localVarResponse = await GetVehiclesVehicleidSmartchargingpolicyWithHttpInfoAsync(vehicleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Policy Get a vehicle&#39;s [Smart Charging](/docs/smart-charging/introduction) policy
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVehiclesVehicleidSmartchargingpolicy200Response)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response>> GetVehiclesVehicleidSmartchargingpolicyWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingpolicy");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleidSmartchargingpolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetVehiclesVehicleidSmartchargingpolicy200Response>("/vehicles/{vehicleId}/smart-charging-policy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleidSmartchargingpolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Status Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVehiclesVehicleidSmartchargingstatus200Response</returns>
        public GetVehiclesVehicleidSmartchargingstatus200Response GetVehiclesVehicleidSmartchargingstatus(string vehicleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingstatus200Response> localVarResponse = GetVehiclesVehicleidSmartchargingstatusWithHttpInfo(vehicleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Status Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVehiclesVehicleidSmartchargingstatus200Response</returns>
        public EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingstatus200Response> GetVehiclesVehicleidSmartchargingstatusWithHttpInfo(string vehicleId, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingstatus");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleidSmartchargingstatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetVehiclesVehicleidSmartchargingstatus200Response>("/vehicles/{vehicleId}/smart-charging-status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleidSmartchargingstatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Status Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVehiclesVehicleidSmartchargingstatus200Response</returns>
        public async System.Threading.Tasks.Task<GetVehiclesVehicleidSmartchargingstatus200Response> GetVehiclesVehicleidSmartchargingstatusAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingstatus200Response> localVarResponse = await GetVehiclesVehicleidSmartchargingstatusWithHttpInfoAsync(vehicleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vehicle Smart Charging Status Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVehiclesVehicleidSmartchargingstatus200Response)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingstatus200Response>> GetVehiclesVehicleidSmartchargingstatusWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->GetVehiclesVehicleidSmartchargingstatus");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.GetVehiclesVehicleidSmartchargingstatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetVehiclesVehicleidSmartchargingstatus200Response>("/vehicles/{vehicleId}/smart-charging-status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVehiclesVehicleidSmartchargingstatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Control Charging Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAction</returns>
        public ChargeAction PostVehiclesVehicleidCharging(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ChargeAction> localVarResponse = PostVehiclesVehicleidChargingWithHttpInfo(vehicleId, chargeActionPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Control Charging Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAction</returns>
        public EnodeApi.Client.ApiResponse<ChargeAction> PostVehiclesVehicleidChargingWithHttpInfo(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->PostVehiclesVehicleidCharging");
            }

            // verify the required parameter 'chargeActionPayload' is set
            if (chargeActionPayload == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargeActionPayload' when calling VehiclesApi->PostVehiclesVehicleidCharging");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            localVarRequestOptions.Data = chargeActionPayload;

            localVarRequestOptions.Operation = "VehiclesApi.PostVehiclesVehicleidCharging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChargeAction>("/vehicles/{vehicleId}/charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVehiclesVehicleidCharging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Control Charging Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAction</returns>
        public async System.Threading.Tasks.Task<ChargeAction> PostVehiclesVehicleidChargingAsync(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ChargeAction> localVarResponse = await PostVehiclesVehicleidChargingWithHttpInfoAsync(vehicleId, chargeActionPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Control Charging Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).   This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="chargeActionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ChargeAction>> PostVehiclesVehicleidChargingWithHttpInfoAsync(string vehicleId, ChargeActionPayload chargeActionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->PostVehiclesVehicleidCharging");
            }

            // verify the required parameter 'chargeActionPayload' is set
            if (chargeActionPayload == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargeActionPayload' when calling VehiclesApi->PostVehiclesVehicleidCharging");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            localVarRequestOptions.Data = chargeActionPayload;

            localVarRequestOptions.Operation = "VehiclesApi.PostVehiclesVehicleidCharging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChargeAction>("/vehicles/{vehicleId}/charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostVehiclesVehicleidCharging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Vehicle Smart Charging Policy Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        public GetVehiclesVehicleidSmartchargingpolicy200Response UpdateVehicleSmartChargingPolicy(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> localVarResponse = UpdateVehicleSmartChargingPolicyWithHttpInfo(vehicleId, vehicleSmartChargingPolicy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Vehicle Smart Charging Policy Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        public EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> UpdateVehicleSmartChargingPolicyWithHttpInfo(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->UpdateVehicleSmartChargingPolicy");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            localVarRequestOptions.Data = vehicleSmartChargingPolicy;

            localVarRequestOptions.Operation = "VehiclesApi.UpdateVehicleSmartChargingPolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetVehiclesVehicleidSmartchargingpolicy200Response>("/vehicles/{vehicleId}/smart-charging-policy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVehicleSmartChargingPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Vehicle Smart Charging Policy Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetVehiclesVehicleidSmartchargingpolicy200Response</returns>
        public async System.Threading.Tasks.Task<GetVehiclesVehicleidSmartchargingpolicy200Response> UpdateVehicleSmartChargingPolicyAsync(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response> localVarResponse = await UpdateVehicleSmartChargingPolicyWithHttpInfoAsync(vehicleId, vehicleSmartChargingPolicy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Vehicle Smart Charging Policy Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="vehicleSmartChargingPolicy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetVehiclesVehicleidSmartchargingpolicy200Response)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<GetVehiclesVehicleidSmartchargingpolicy200Response>> UpdateVehicleSmartChargingPolicyWithHttpInfoAsync(string vehicleId, VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = default(VehicleSmartChargingPolicy?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->UpdateVehicleSmartChargingPolicy");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter
            localVarRequestOptions.Data = vehicleSmartChargingPolicy;

            localVarRequestOptions.Operation = "VehiclesApi.UpdateVehicleSmartChargingPolicy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetVehiclesVehicleidSmartchargingpolicy200Response>("/vehicles/{vehicleId}/smart-charging-policy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateVehicleSmartChargingPolicy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        public SmartOverrideResponse VehicleCreateExternalStart(string vehicleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = VehicleCreateExternalStartWithHttpInfo(vehicleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> VehicleCreateExternalStartWithHttpInfo(string vehicleId, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleCreateExternalStart");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleCreateExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SmartOverrideResponse>("/vehicles/{vehicleId}/external-start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleCreateExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SmartOverrideResponse> VehicleCreateExternalStartAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await VehicleCreateExternalStartWithHttpInfoAsync(vehicleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> VehicleCreateExternalStartWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleCreateExternalStart");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleCreateExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmartOverrideResponse>("/vehicles/{vehicleId}/external-start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleCreateExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        public SmartOverrideResponse VehicleCreateSmartOverride(string vehicleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = VehicleCreateSmartOverrideWithHttpInfo(vehicleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> VehicleCreateSmartOverrideWithHttpInfo(string vehicleId, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleCreateSmartOverride");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleCreateSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SmartOverrideResponse>("/vehicles/{vehicleId}/smart-override", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleCreateSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        public async System.Threading.Tasks.Task<SmartOverrideResponse> VehicleCreateSmartOverrideAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await VehicleCreateSmartOverrideWithHttpInfoAsync(vehicleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> VehicleCreateSmartOverrideWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleCreateSmartOverride");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleCreateSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmartOverrideResponse>("/vehicles/{vehicleId}/smart-override", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleCreateSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        public SmartOverrideResponse VehicleEndExternalStart(string vehicleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = VehicleEndExternalStartWithHttpInfo(vehicleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> VehicleEndExternalStartWithHttpInfo(string vehicleId, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleEndExternalStart");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleEndExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SmartOverrideResponse>("/vehicles/{vehicleId}/external-start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleEndExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SmartOverrideResponse> VehicleEndExternalStartAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await VehicleEndExternalStartWithHttpInfoAsync(vehicleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> VehicleEndExternalStartWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleEndExternalStart");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleEndExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SmartOverrideResponse>("/vehicles/{vehicleId}/external-start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleEndExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        public SmartOverrideResponse VehicleEndSmartOverride(string vehicleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = VehicleEndSmartOverrideWithHttpInfo(vehicleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> VehicleEndSmartOverrideWithHttpInfo(string vehicleId, int operationIndex = 0)
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleEndSmartOverride");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleEndSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SmartOverrideResponse>("/vehicles/{vehicleId}/smart-override", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleEndSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        public async System.Threading.Tasks.Task<SmartOverrideResponse> VehicleEndSmartOverrideAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await VehicleEndSmartOverrideWithHttpInfoAsync(vehicleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the vehicle specified by &#x60;vehicleId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vehicleId">ID of the Vehicle.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> VehicleEndSmartOverrideWithHttpInfoAsync(string vehicleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vehicleId' is set
            if (vehicleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vehicleId' when calling VehiclesApi->VehicleEndSmartOverride");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vehicleId", EnodeApi.Client.ClientUtils.ParameterToString(vehicleId)); // path parameter

            localVarRequestOptions.Operation = "VehiclesApi.VehicleEndSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SmartOverrideResponse>("/vehicles/{vehicleId}/smart-override", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VehicleEndSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
