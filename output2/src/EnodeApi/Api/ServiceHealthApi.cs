/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceHealthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check Available Charger Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthChargerVendors200ResponseInner&gt;</returns>
        List<GetHealthChargerVendors200ResponseInner> GetHealthChargerVendors(int operationIndex = 0);

        /// <summary>
        /// Check Available Charger Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthChargerVendors200ResponseInner&gt;</returns>
        ApiResponse<List<GetHealthChargerVendors200ResponseInner>> GetHealthChargerVendorsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Check Available Hvac Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthHvacVendors200ResponseInner&gt;</returns>
        List<GetHealthHvacVendors200ResponseInner> GetHealthHvacVendors(int operationIndex = 0);

        /// <summary>
        /// Check Available Hvac Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthHvacVendors200ResponseInner&gt;</returns>
        ApiResponse<List<GetHealthHvacVendors200ResponseInner>> GetHealthHvacVendorsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Check Available Inverter Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthInverterVendors200ResponseInner&gt;</returns>
        List<GetHealthInverterVendors200ResponseInner> GetHealthInverterVendors(int operationIndex = 0);

        /// <summary>
        /// Check Available Inverter Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthInverterVendors200ResponseInner&gt;</returns>
        ApiResponse<List<GetHealthInverterVendors200ResponseInner>> GetHealthInverterVendorsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Check Service Readiness
        /// </summary>
        /// <remarks>
        /// Gets the combined health status of the service and all functionalities and dependencies.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetHealthReady(int operationIndex = 0);

        /// <summary>
        /// Check Service Readiness
        /// </summary>
        /// <remarks>
        /// Gets the combined health status of the service and all functionalities and dependencies.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetHealthReadyWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Check Available Vehicle Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthVehicleVendors200ResponseInner&gt;</returns>
        List<GetHealthVehicleVendors200ResponseInner> GetHealthVehicleVendors(int operationIndex = 0);

        /// <summary>
        /// Check Available Vehicle Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthVehicleVendors200ResponseInner&gt;</returns>
        ApiResponse<List<GetHealthVehicleVendors200ResponseInner>> GetHealthVehicleVendorsWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceHealthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check Available Charger Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthChargerVendors200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetHealthChargerVendors200ResponseInner>> GetHealthChargerVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Available Charger Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthChargerVendors200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetHealthChargerVendors200ResponseInner>>> GetHealthChargerVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Available Hvac Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthHvacVendors200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetHealthHvacVendors200ResponseInner>> GetHealthHvacVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Available Hvac Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthHvacVendors200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetHealthHvacVendors200ResponseInner>>> GetHealthHvacVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Available Inverter Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthInverterVendors200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetHealthInverterVendors200ResponseInner>> GetHealthInverterVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Available Inverter Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthInverterVendors200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetHealthInverterVendors200ResponseInner>>> GetHealthInverterVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Service Readiness
        /// </summary>
        /// <remarks>
        /// Gets the combined health status of the service and all functionalities and dependencies.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetHealthReadyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Service Readiness
        /// </summary>
        /// <remarks>
        /// Gets the combined health status of the service and all functionalities and dependencies.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetHealthReadyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Check Available Vehicle Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthVehicleVendors200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetHealthVehicleVendors200ResponseInner>> GetHealthVehicleVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Check Available Vehicle Vendors
        /// </summary>
        /// <remarks>
        /// Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthVehicleVendors200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetHealthVehicleVendors200ResponseInner>>> GetHealthVehicleVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceHealthApi : IServiceHealthApiSync, IServiceHealthApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceHealthApi : IServiceHealthApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceHealthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceHealthApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceHealthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceHealthApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceHealthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceHealthApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceHealthApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServiceHealthApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check Available Charger Vendors Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthChargerVendors200ResponseInner&gt;</returns>
        public List<GetHealthChargerVendors200ResponseInner> GetHealthChargerVendors(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<GetHealthChargerVendors200ResponseInner>> localVarResponse = GetHealthChargerVendorsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Charger Vendors Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthChargerVendors200ResponseInner&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<GetHealthChargerVendors200ResponseInner>> GetHealthChargerVendorsWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthChargerVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetHealthChargerVendors200ResponseInner>>("/health/chargers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthChargerVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Available Charger Vendors Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthChargerVendors200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetHealthChargerVendors200ResponseInner>> GetHealthChargerVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<GetHealthChargerVendors200ResponseInner>> localVarResponse = await GetHealthChargerVendorsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Charger Vendors Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthChargerVendors200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<GetHealthChargerVendors200ResponseInner>>> GetHealthChargerVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthChargerVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetHealthChargerVendors200ResponseInner>>("/health/chargers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthChargerVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Available Hvac Vendors Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthHvacVendors200ResponseInner&gt;</returns>
        public List<GetHealthHvacVendors200ResponseInner> GetHealthHvacVendors(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<GetHealthHvacVendors200ResponseInner>> localVarResponse = GetHealthHvacVendorsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Hvac Vendors Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthHvacVendors200ResponseInner&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<GetHealthHvacVendors200ResponseInner>> GetHealthHvacVendorsWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthHvacVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetHealthHvacVendors200ResponseInner>>("/health/hvacs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthHvacVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Available Hvac Vendors Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthHvacVendors200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetHealthHvacVendors200ResponseInner>> GetHealthHvacVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<GetHealthHvacVendors200ResponseInner>> localVarResponse = await GetHealthHvacVendorsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Hvac Vendors Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthHvacVendors200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<GetHealthHvacVendors200ResponseInner>>> GetHealthHvacVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthHvacVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetHealthHvacVendors200ResponseInner>>("/health/hvacs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthHvacVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Available Inverter Vendors Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthInverterVendors200ResponseInner&gt;</returns>
        public List<GetHealthInverterVendors200ResponseInner> GetHealthInverterVendors(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<GetHealthInverterVendors200ResponseInner>> localVarResponse = GetHealthInverterVendorsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Inverter Vendors Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthInverterVendors200ResponseInner&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<GetHealthInverterVendors200ResponseInner>> GetHealthInverterVendorsWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthInverterVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetHealthInverterVendors200ResponseInner>>("/health/inverters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthInverterVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Available Inverter Vendors Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthInverterVendors200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetHealthInverterVendors200ResponseInner>> GetHealthInverterVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<GetHealthInverterVendors200ResponseInner>> localVarResponse = await GetHealthInverterVendorsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Inverter Vendors Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthInverterVendors200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<GetHealthInverterVendors200ResponseInner>>> GetHealthInverterVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthInverterVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetHealthInverterVendors200ResponseInner>>("/health/inverters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthInverterVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Service Readiness Gets the combined health status of the service and all functionalities and dependencies.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetHealthReady(int operationIndex = 0)
        {
            GetHealthReadyWithHttpInfo();
        }

        /// <summary>
        /// Check Service Readiness Gets the combined health status of the service and all functionalities and dependencies.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnodeApi.Client.ApiResponse<Object> GetHealthReadyWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthReady";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/health/ready", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthReady", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Service Readiness Gets the combined health status of the service and all functionalities and dependencies.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetHealthReadyAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetHealthReadyWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Check Service Readiness Gets the combined health status of the service and all functionalities and dependencies.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Object>> GetHealthReadyWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthReady";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/health/ready", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthReady", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Available Vehicle Vendors Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetHealthVehicleVendors200ResponseInner&gt;</returns>
        public List<GetHealthVehicleVendors200ResponseInner> GetHealthVehicleVendors(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<GetHealthVehicleVendors200ResponseInner>> localVarResponse = GetHealthVehicleVendorsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Vehicle Vendors Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetHealthVehicleVendors200ResponseInner&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<GetHealthVehicleVendors200ResponseInner>> GetHealthVehicleVendorsWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthVehicleVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetHealthVehicleVendors200ResponseInner>>("/health/vehicles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthVehicleVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Available Vehicle Vendors Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetHealthVehicleVendors200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetHealthVehicleVendors200ResponseInner>> GetHealthVehicleVendorsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<GetHealthVehicleVendors200ResponseInner>> localVarResponse = await GetHealthVehicleVendorsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Available Vehicle Vendors Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog&#x3D;glossary&amp;value&#x3D;activation-required).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetHealthVehicleVendors200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<GetHealthVehicleVendors200ResponseInner>>> GetHealthVehicleVendorsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ServiceHealthApi.GetHealthVehicleVendors";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetHealthVehicleVendors200ResponseInner>>("/health/vehicles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHealthVehicleVendors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
