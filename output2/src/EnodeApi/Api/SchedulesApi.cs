/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchedulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Schedule
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleResponse</returns>
        ScheduleResponse CreateSchedule(Schedule? schedule = default(Schedule?), int operationIndex = 0);

        /// <summary>
        /// Create Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        ApiResponse<ScheduleResponse> CreateScheduleWithHttpInfo(Schedule? schedule = default(Schedule?), int operationIndex = 0);
        /// <summary>
        /// Delete Schedule
        /// </summary>
        /// <remarks>
        /// Delete a Schedule
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSchedule(string scheduleId, int operationIndex = 0);

        /// <summary>
        /// Delete Schedule
        /// </summary>
        /// <remarks>
        /// Delete a Schedule
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduleWithHttpInfo(string scheduleId, int operationIndex = 0);
        /// <summary>
        /// Get Schedule
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleResponse</returns>
        ScheduleResponse GetSchedule(string scheduleId, int operationIndex = 0);

        /// <summary>
        /// Get Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        ApiResponse<ScheduleResponse> GetScheduleWithHttpInfo(string scheduleId, int operationIndex = 0);
        /// <summary>
        /// Get Schedule Status
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleStatusResponse</returns>
        ScheduleStatusResponse GetScheduleStatus(string scheduleId, int operationIndex = 0);

        /// <summary>
        /// Get Schedule Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleStatusResponse</returns>
        ApiResponse<ScheduleStatusResponse> GetScheduleStatusWithHttpInfo(string scheduleId, int operationIndex = 0);
        /// <summary>
        /// List Schedules
        /// </summary>
        /// <remarks>
        /// Returns a list of Schedules registered to the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduleResponse&gt;</returns>
        List<ScheduleResponse> GetSchedules(int operationIndex = 0);

        /// <summary>
        /// List Schedules
        /// </summary>
        /// <remarks>
        /// Returns a list of Schedules registered to the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduleResponse&gt;</returns>
        ApiResponse<List<ScheduleResponse>> GetSchedulesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update Schedule
        /// </summary>
        /// <remarks>
        /// Does a partial update of a schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleResponse</returns>
        ScheduleResponse UpdateSchedule(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0);

        /// <summary>
        /// Update Schedule
        /// </summary>
        /// <remarks>
        /// Does a partial update of a schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        ApiResponse<ScheduleResponse> UpdateScheduleWithHttpInfo(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchedulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleResponse</returns>
        System.Threading.Tasks.Task<ScheduleResponse> CreateScheduleAsync(Schedule? schedule = default(Schedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleResponse>> CreateScheduleWithHttpInfoAsync(Schedule? schedule = default(Schedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Schedule
        /// </summary>
        /// <remarks>
        /// Delete a Schedule
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduleAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Schedule
        /// </summary>
        /// <remarks>
        /// Delete a Schedule
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduleWithHttpInfoAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleResponse</returns>
        System.Threading.Tasks.Task<ScheduleResponse> GetScheduleAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleResponse>> GetScheduleWithHttpInfoAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Schedule Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleStatusResponse</returns>
        System.Threading.Tasks.Task<ScheduleStatusResponse> GetScheduleStatusAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Schedule Status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleStatusResponse>> GetScheduleStatusWithHttpInfoAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Schedules
        /// </summary>
        /// <remarks>
        /// Returns a list of Schedules registered to the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduleResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ScheduleResponse>> GetSchedulesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Schedules
        /// </summary>
        /// <remarks>
        /// Returns a list of Schedules registered to the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduleResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ScheduleResponse>>> GetSchedulesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Schedule
        /// </summary>
        /// <remarks>
        /// Does a partial update of a schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleResponse</returns>
        System.Threading.Tasks.Task<ScheduleResponse> UpdateScheduleAsync(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Schedule
        /// </summary>
        /// <remarks>
        /// Does a partial update of a schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleResponse>> UpdateScheduleWithHttpInfoAsync(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchedulesApi : ISchedulesApiSync, ISchedulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchedulesApi : ISchedulesApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchedulesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchedulesApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchedulesApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchedulesApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleResponse</returns>
        public ScheduleResponse CreateSchedule(Schedule? schedule = default(Schedule?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ScheduleResponse> localVarResponse = CreateScheduleWithHttpInfo(schedule);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        public EnodeApi.Client.ApiResponse<ScheduleResponse> CreateScheduleWithHttpInfo(Schedule? schedule = default(Schedule?), int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = schedule;

            localVarRequestOptions.Operation = "SchedulesApi.CreateSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScheduleResponse>("/schedules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleResponse</returns>
        public async System.Threading.Tasks.Task<ScheduleResponse> CreateScheduleAsync(Schedule? schedule = default(Schedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ScheduleResponse> localVarResponse = await CreateScheduleWithHttpInfoAsync(schedule, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ScheduleResponse>> CreateScheduleWithHttpInfoAsync(Schedule? schedule = default(Schedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = schedule;

            localVarRequestOptions.Operation = "SchedulesApi.CreateSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScheduleResponse>("/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Schedule Delete a Schedule
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSchedule(string scheduleId, int operationIndex = 0)
        {
            DeleteScheduleWithHttpInfo(scheduleId);
        }

        /// <summary>
        /// Delete Schedule Delete a Schedule
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnodeApi.Client.ApiResponse<Object> DeleteScheduleWithHttpInfo(string scheduleId, int operationIndex = 0)
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->DeleteSchedule");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter

            localVarRequestOptions.Operation = "SchedulesApi.DeleteSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/schedules/{scheduleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Schedule Delete a Schedule
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduleAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteScheduleWithHttpInfoAsync(scheduleId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Schedule Delete a Schedule
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Object>> DeleteScheduleWithHttpInfoAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->DeleteSchedule");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter

            localVarRequestOptions.Operation = "SchedulesApi.DeleteSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/schedules/{scheduleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleResponse</returns>
        public ScheduleResponse GetSchedule(string scheduleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ScheduleResponse> localVarResponse = GetScheduleWithHttpInfo(scheduleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        public EnodeApi.Client.ApiResponse<ScheduleResponse> GetScheduleWithHttpInfo(string scheduleId, int operationIndex = 0)
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->GetSchedule");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter

            localVarRequestOptions.Operation = "SchedulesApi.GetSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduleResponse>("/schedules/{scheduleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleResponse</returns>
        public async System.Threading.Tasks.Task<ScheduleResponse> GetScheduleAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ScheduleResponse> localVarResponse = await GetScheduleWithHttpInfoAsync(scheduleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Schedule 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ScheduleResponse>> GetScheduleWithHttpInfoAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->GetSchedule");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter

            localVarRequestOptions.Operation = "SchedulesApi.GetSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduleResponse>("/schedules/{scheduleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Schedule Status 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleStatusResponse</returns>
        public ScheduleStatusResponse GetScheduleStatus(string scheduleId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ScheduleStatusResponse> localVarResponse = GetScheduleStatusWithHttpInfo(scheduleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Schedule Status 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleStatusResponse</returns>
        public EnodeApi.Client.ApiResponse<ScheduleStatusResponse> GetScheduleStatusWithHttpInfo(string scheduleId, int operationIndex = 0)
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->GetScheduleStatus");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter

            localVarRequestOptions.Operation = "SchedulesApi.GetScheduleStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduleStatusResponse>("/schedules/{scheduleId}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Schedule Status 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleStatusResponse</returns>
        public async System.Threading.Tasks.Task<ScheduleStatusResponse> GetScheduleStatusAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ScheduleStatusResponse> localVarResponse = await GetScheduleStatusWithHttpInfoAsync(scheduleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Schedule Status 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleStatusResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ScheduleStatusResponse>> GetScheduleStatusWithHttpInfoAsync(string scheduleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->GetScheduleStatus");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter

            localVarRequestOptions.Operation = "SchedulesApi.GetScheduleStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduleStatusResponse>("/schedules/{scheduleId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetScheduleStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Schedules Returns a list of Schedules registered to the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ScheduleResponse&gt;</returns>
        public List<ScheduleResponse> GetSchedules(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<ScheduleResponse>> localVarResponse = GetSchedulesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Schedules Returns a list of Schedules registered to the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ScheduleResponse&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<ScheduleResponse>> GetSchedulesWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SchedulesApi.GetSchedules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ScheduleResponse>>("/schedules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Schedules Returns a list of Schedules registered to the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ScheduleResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ScheduleResponse>> GetSchedulesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<ScheduleResponse>> localVarResponse = await GetSchedulesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Schedules Returns a list of Schedules registered to the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ScheduleResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<ScheduleResponse>>> GetSchedulesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SchedulesApi.GetSchedules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ScheduleResponse>>("/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Schedule Does a partial update of a schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScheduleResponse</returns>
        public ScheduleResponse UpdateSchedule(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ScheduleResponse> localVarResponse = UpdateScheduleWithHttpInfo(scheduleId, partialSchedule);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Schedule Does a partial update of a schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScheduleResponse</returns>
        public EnodeApi.Client.ApiResponse<ScheduleResponse> UpdateScheduleWithHttpInfo(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0)
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->UpdateSchedule");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            localVarRequestOptions.Data = partialSchedule;

            localVarRequestOptions.Operation = "SchedulesApi.UpdateSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ScheduleResponse>("/schedules/{scheduleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Schedule Does a partial update of a schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleResponse</returns>
        public async System.Threading.Tasks.Task<ScheduleResponse> UpdateScheduleAsync(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ScheduleResponse> localVarResponse = await UpdateScheduleWithHttpInfoAsync(scheduleId, partialSchedule, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Schedule Does a partial update of a schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheduleId">ID of the Schedule.</param>
        /// <param name="partialSchedule"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ScheduleResponse>> UpdateScheduleWithHttpInfoAsync(string scheduleId, PartialSchedule? partialSchedule = default(PartialSchedule?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scheduleId' is set
            if (scheduleId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'scheduleId' when calling SchedulesApi->UpdateSchedule");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scheduleId", EnodeApi.Client.ClientUtils.ParameterToString(scheduleId)); // path parameter
            localVarRequestOptions.Data = partialSchedule;

            localVarRequestOptions.Operation = "SchedulesApi.UpdateSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ScheduleResponse>("/schedules/{scheduleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
