/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargingLocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssociateChargingLocationWithTariff(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0);

        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateChargingLocationWithTariffWithHttpInfo(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0);
        /// <summary>
        /// Delete Charging Location
        /// </summary>
        /// <remarks>
        /// Delete a Charging Location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        ChargingLocationResponse DeleteCharginglocationsCharginglocationid(string chargingLocationId, int operationIndex = 0);

        /// <summary>
        /// Delete Charging Location
        /// </summary>
        /// <remarks>
        /// Delete a Charging Location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        ApiResponse<ChargingLocationResponse> DeleteCharginglocationsCharginglocationidWithHttpInfo(string chargingLocationId, int operationIndex = 0);
        /// <summary>
        /// Get Charging Location Tariff
        /// </summary>
        /// <remarks>
        /// Get Tariff intervals for a given charging location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChargingLocationTariffInner&gt;</returns>
        List<ChargingLocationTariffInner> GetChargingLocationTariff(string chargingLocationId, int operationIndex = 0);

        /// <summary>
        /// Get Charging Location Tariff
        /// </summary>
        /// <remarks>
        /// Get Tariff intervals for a given charging location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChargingLocationTariffInner&gt;</returns>
        ApiResponse<List<ChargingLocationTariffInner>> GetChargingLocationTariffWithHttpInfo(string chargingLocationId, int operationIndex = 0);
        /// <summary>
        /// List Charging Locations
        /// </summary>
        /// <remarks>
        /// Returns a list of Charging Locations registered to the User
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChargingLocationResponse&gt;</returns>
        List<ChargingLocationResponse> GetCharginglocations(int operationIndex = 0);

        /// <summary>
        /// List Charging Locations
        /// </summary>
        /// <remarks>
        /// Returns a list of Charging Locations registered to the User
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChargingLocationResponse&gt;</returns>
        ApiResponse<List<ChargingLocationResponse>> GetCharginglocationsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Charging Location
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        ChargingLocationResponse GetCharginglocationsCharginglocationid(string chargingLocationId, int operationIndex = 0);

        /// <summary>
        /// Get Charging Location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        ApiResponse<ChargingLocationResponse> GetCharginglocationsCharginglocationidWithHttpInfo(string chargingLocationId, int operationIndex = 0);
        /// <summary>
        /// Create Charging Location
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        ChargingLocationResponse PostCharginglocations(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0);

        /// <summary>
        /// Create Charging Location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        ApiResponse<ChargingLocationResponse> PostCharginglocationsWithHttpInfo(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0);
        /// <summary>
        /// Update Charging Location
        /// </summary>
        /// <remarks>
        /// Updates a charging location with new configuration.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        ChargingLocationResponse PutCharginglocationsCharginglocationid(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0);

        /// <summary>
        /// Update Charging Location
        /// </summary>
        /// <remarks>
        /// Updates a charging location with new configuration.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        ApiResponse<ChargingLocationResponse> PutCharginglocationsCharginglocationidWithHttpInfo(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargingLocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateChargingLocationWithTariffAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateChargingLocationWithTariffWithHttpInfoAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Charging Location
        /// </summary>
        /// <remarks>
        /// Delete a Charging Location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        System.Threading.Tasks.Task<ChargingLocationResponse> DeleteCharginglocationsCharginglocationidAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Charging Location
        /// </summary>
        /// <remarks>
        /// Delete a Charging Location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLocationResponse>> DeleteCharginglocationsCharginglocationidWithHttpInfoAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Charging Location Tariff
        /// </summary>
        /// <remarks>
        /// Get Tariff intervals for a given charging location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChargingLocationTariffInner&gt;</returns>
        System.Threading.Tasks.Task<List<ChargingLocationTariffInner>> GetChargingLocationTariffAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Charging Location Tariff
        /// </summary>
        /// <remarks>
        /// Get Tariff intervals for a given charging location.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLocationTariffInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChargingLocationTariffInner>>> GetChargingLocationTariffWithHttpInfoAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Charging Locations
        /// </summary>
        /// <remarks>
        /// Returns a list of Charging Locations registered to the User
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChargingLocationResponse&gt;</returns>
        System.Threading.Tasks.Task<List<ChargingLocationResponse>> GetCharginglocationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Charging Locations
        /// </summary>
        /// <remarks>
        /// Returns a list of Charging Locations registered to the User
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLocationResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChargingLocationResponse>>> GetCharginglocationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Charging Location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        System.Threading.Tasks.Task<ChargingLocationResponse> GetCharginglocationsCharginglocationidAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Charging Location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLocationResponse>> GetCharginglocationsCharginglocationidWithHttpInfoAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Charging Location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        System.Threading.Tasks.Task<ChargingLocationResponse> PostCharginglocationsAsync(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Charging Location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLocationResponse>> PostCharginglocationsWithHttpInfoAsync(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Charging Location
        /// </summary>
        /// <remarks>
        /// Updates a charging location with new configuration.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        System.Threading.Tasks.Task<ChargingLocationResponse> PutCharginglocationsCharginglocationidAsync(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Charging Location
        /// </summary>
        /// <remarks>
        /// Updates a charging location with new configuration.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargingLocationResponse>> PutCharginglocationsCharginglocationidWithHttpInfoAsync(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargingLocationsApi : IChargingLocationsApiSync, IChargingLocationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChargingLocationsApi : IChargingLocationsApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargingLocationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargingLocationsApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChargingLocationsApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargingLocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChargingLocationsApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssociateChargingLocationWithTariff(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0)
        {
            AssociateChargingLocationWithTariffWithHttpInfo(chargingLocationId, chargingLocationTariffInterval);
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnodeApi.Client.ApiResponse<Object> AssociateChargingLocationWithTariffWithHttpInfo(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0)
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->AssociateChargingLocationWithTariff");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter
            localVarRequestOptions.Data = chargingLocationTariffInterval;

            localVarRequestOptions.Operation = "ChargingLocationsApi.AssociateChargingLocationWithTariff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/charging-locations/{chargingLocationId}/tariff", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateChargingLocationWithTariff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateChargingLocationWithTariffAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssociateChargingLocationWithTariffWithHttpInfoAsync(chargingLocationId, chargingLocationTariffInterval, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Object>> AssociateChargingLocationWithTariffWithHttpInfoAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->AssociateChargingLocationWithTariff");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter
            localVarRequestOptions.Data = chargingLocationTariffInterval;

            localVarRequestOptions.Operation = "ChargingLocationsApi.AssociateChargingLocationWithTariff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/charging-locations/{chargingLocationId}/tariff", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateChargingLocationWithTariff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Charging Location Delete a Charging Location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        public ChargingLocationResponse DeleteCharginglocationsCharginglocationid(string chargingLocationId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = DeleteCharginglocationsCharginglocationidWithHttpInfo(chargingLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Charging Location Delete a Charging Location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        public EnodeApi.Client.ApiResponse<ChargingLocationResponse> DeleteCharginglocationsCharginglocationidWithHttpInfo(string chargingLocationId, int operationIndex = 0)
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->DeleteCharginglocationsCharginglocationid");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter

            localVarRequestOptions.Operation = "ChargingLocationsApi.DeleteCharginglocationsCharginglocationid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ChargingLocationResponse>("/charging-locations/{chargingLocationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCharginglocationsCharginglocationid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Charging Location Delete a Charging Location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        public async System.Threading.Tasks.Task<ChargingLocationResponse> DeleteCharginglocationsCharginglocationidAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = await DeleteCharginglocationsCharginglocationidWithHttpInfoAsync(chargingLocationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Charging Location Delete a Charging Location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ChargingLocationResponse>> DeleteCharginglocationsCharginglocationidWithHttpInfoAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->DeleteCharginglocationsCharginglocationid");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter

            localVarRequestOptions.Operation = "ChargingLocationsApi.DeleteCharginglocationsCharginglocationid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ChargingLocationResponse>("/charging-locations/{chargingLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCharginglocationsCharginglocationid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charging Location Tariff Get Tariff intervals for a given charging location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChargingLocationTariffInner&gt;</returns>
        public List<ChargingLocationTariffInner> GetChargingLocationTariff(string chargingLocationId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<ChargingLocationTariffInner>> localVarResponse = GetChargingLocationTariffWithHttpInfo(chargingLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charging Location Tariff Get Tariff intervals for a given charging location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChargingLocationTariffInner&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<ChargingLocationTariffInner>> GetChargingLocationTariffWithHttpInfo(string chargingLocationId, int operationIndex = 0)
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->GetChargingLocationTariff");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter

            localVarRequestOptions.Operation = "ChargingLocationsApi.GetChargingLocationTariff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChargingLocationTariffInner>>("/charging-locations/{chargingLocationId}/tariff", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChargingLocationTariff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charging Location Tariff Get Tariff intervals for a given charging location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChargingLocationTariffInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChargingLocationTariffInner>> GetChargingLocationTariffAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<ChargingLocationTariffInner>> localVarResponse = await GetChargingLocationTariffWithHttpInfoAsync(chargingLocationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charging Location Tariff Get Tariff intervals for a given charging location.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLocationTariffInner&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<ChargingLocationTariffInner>>> GetChargingLocationTariffWithHttpInfoAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->GetChargingLocationTariff");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter

            localVarRequestOptions.Operation = "ChargingLocationsApi.GetChargingLocationTariff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChargingLocationTariffInner>>("/charging-locations/{chargingLocationId}/tariff", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChargingLocationTariff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Charging Locations Returns a list of Charging Locations registered to the User
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChargingLocationResponse&gt;</returns>
        public List<ChargingLocationResponse> GetCharginglocations(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<ChargingLocationResponse>> localVarResponse = GetCharginglocationsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Charging Locations Returns a list of Charging Locations registered to the User
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChargingLocationResponse&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<ChargingLocationResponse>> GetCharginglocationsWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChargingLocationsApi.GetCharginglocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChargingLocationResponse>>("/charging-locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharginglocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Charging Locations Returns a list of Charging Locations registered to the User
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChargingLocationResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChargingLocationResponse>> GetCharginglocationsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<ChargingLocationResponse>> localVarResponse = await GetCharginglocationsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Charging Locations Returns a list of Charging Locations registered to the User
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChargingLocationResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<ChargingLocationResponse>>> GetCharginglocationsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChargingLocationsApi.GetCharginglocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChargingLocationResponse>>("/charging-locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharginglocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        public ChargingLocationResponse GetCharginglocationsCharginglocationid(string chargingLocationId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = GetCharginglocationsCharginglocationidWithHttpInfo(chargingLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        public EnodeApi.Client.ApiResponse<ChargingLocationResponse> GetCharginglocationsCharginglocationidWithHttpInfo(string chargingLocationId, int operationIndex = 0)
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->GetCharginglocationsCharginglocationid");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter

            localVarRequestOptions.Operation = "ChargingLocationsApi.GetCharginglocationsCharginglocationid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ChargingLocationResponse>("/charging-locations/{chargingLocationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharginglocationsCharginglocationid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        public async System.Threading.Tasks.Task<ChargingLocationResponse> GetCharginglocationsCharginglocationidAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = await GetCharginglocationsCharginglocationidWithHttpInfoAsync(chargingLocationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ChargingLocationResponse>> GetCharginglocationsCharginglocationidWithHttpInfoAsync(string chargingLocationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->GetCharginglocationsCharginglocationid");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter

            localVarRequestOptions.Operation = "ChargingLocationsApi.GetCharginglocationsCharginglocationid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ChargingLocationResponse>("/charging-locations/{chargingLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharginglocationsCharginglocationid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        public ChargingLocationResponse PostCharginglocations(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = PostCharginglocationsWithHttpInfo(chargingLocationCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        public EnodeApi.Client.ApiResponse<ChargingLocationResponse> PostCharginglocationsWithHttpInfo(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chargingLocationCreateRequest;

            localVarRequestOptions.Operation = "ChargingLocationsApi.PostCharginglocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChargingLocationResponse>("/charging-locations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCharginglocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        public async System.Threading.Tasks.Task<ChargingLocationResponse> PostCharginglocationsAsync(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = await PostCharginglocationsWithHttpInfoAsync(chargingLocationCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Charging Location 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationCreateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ChargingLocationResponse>> PostCharginglocationsWithHttpInfoAsync(ChargingLocationCreateRequest? chargingLocationCreateRequest = default(ChargingLocationCreateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = chargingLocationCreateRequest;

            localVarRequestOptions.Operation = "ChargingLocationsApi.PostCharginglocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChargingLocationResponse>("/charging-locations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCharginglocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Charging Location Updates a charging location with new configuration.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargingLocationResponse</returns>
        public ChargingLocationResponse PutCharginglocationsCharginglocationid(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = PutCharginglocationsCharginglocationidWithHttpInfo(chargingLocationId, chargingLocationUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Charging Location Updates a charging location with new configuration.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargingLocationResponse</returns>
        public EnodeApi.Client.ApiResponse<ChargingLocationResponse> PutCharginglocationsCharginglocationidWithHttpInfo(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->PutCharginglocationsCharginglocationid");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter
            localVarRequestOptions.Data = chargingLocationUpdateRequest;

            localVarRequestOptions.Operation = "ChargingLocationsApi.PutCharginglocationsCharginglocationid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ChargingLocationResponse>("/charging-locations/{chargingLocationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCharginglocationsCharginglocationid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Charging Location Updates a charging location with new configuration.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargingLocationResponse</returns>
        public async System.Threading.Tasks.Task<ChargingLocationResponse> PutCharginglocationsCharginglocationidAsync(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ChargingLocationResponse> localVarResponse = await PutCharginglocationsCharginglocationidWithHttpInfoAsync(chargingLocationId, chargingLocationUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Charging Location Updates a charging location with new configuration.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationUpdateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargingLocationResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ChargingLocationResponse>> PutCharginglocationsCharginglocationidWithHttpInfoAsync(string chargingLocationId, ChargingLocationUpdateRequest? chargingLocationUpdateRequest = default(ChargingLocationUpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling ChargingLocationsApi->PutCharginglocationsCharginglocationid");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter
            localVarRequestOptions.Data = chargingLocationUpdateRequest;

            localVarRequestOptions.Operation = "ChargingLocationsApi.PutCharginglocationsCharginglocationid";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ChargingLocationResponse>("/charging-locations/{chargingLocationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutCharginglocationsCharginglocationid", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
