/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get User Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatisticsChargingTimeseriesSample&gt;</returns>
        List<StatisticsChargingTimeseriesSample> GetStatisticsCharging(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get User Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatisticsChargingTimeseriesSample&gt;</returns>
        ApiResponse<List<StatisticsChargingTimeseriesSample>> GetStatisticsChargingWithHttpInfo(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get User Sessions Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatisticsTimeseriesSessionSample&gt;</returns>
        List<StatisticsTimeseriesSessionSample> GetStatisticsChargingSessions(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get User Sessions Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatisticsTimeseriesSessionSample&gt;</returns>
        ApiResponse<List<StatisticsTimeseriesSessionSample>> GetStatisticsChargingSessionsWithHttpInfo(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get User Production Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power production and price for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatisticsProductionTimeseriesSample&gt;</returns>
        List<StatisticsProductionTimeseriesSample> GetStatisticsProduction(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get User Production Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power production and price for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatisticsProductionTimeseriesSample&gt;</returns>
        ApiResponse<List<StatisticsProductionTimeseriesSample>> GetStatisticsProductionWithHttpInfo(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get User Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsChargingTimeseriesSample&gt;</returns>
        System.Threading.Tasks.Task<List<StatisticsChargingTimeseriesSample>> GetStatisticsChargingAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsChargingTimeseriesSample&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatisticsChargingTimeseriesSample>>> GetStatisticsChargingWithHttpInfoAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Sessions Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsTimeseriesSessionSample&gt;</returns>
        System.Threading.Tasks.Task<List<StatisticsTimeseriesSessionSample>> GetStatisticsChargingSessionsAsync(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Sessions Charging Statistics
        /// </summary>
        /// <remarks>
        /// Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsTimeseriesSessionSample&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatisticsTimeseriesSessionSample>>> GetStatisticsChargingSessionsWithHttpInfoAsync(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Production Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power production and price for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsProductionTimeseriesSample&gt;</returns>
        System.Threading.Tasks.Task<List<StatisticsProductionTimeseriesSample>> GetStatisticsProductionAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Production Statistics
        /// </summary>
        /// <remarks>
        /// Returns a normalized time series of statistics about power production and price for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsProductionTimeseriesSample&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatisticsProductionTimeseriesSample>>> GetStatisticsProductionWithHttpInfoAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IStatisticsApiSync, IStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatisticsApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get User Charging Statistics Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatisticsChargingTimeseriesSample&gt;</returns>
        public List<StatisticsChargingTimeseriesSample> GetStatisticsCharging(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<StatisticsChargingTimeseriesSample>> localVarResponse = GetStatisticsChargingWithHttpInfo(startDate, resolution, endDate, type, id, utcOffset, chargingLocationId, vehicleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Charging Statistics Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatisticsChargingTimeseriesSample&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<StatisticsChargingTimeseriesSample>> GetStatisticsChargingWithHttpInfo(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'startDate' when calling StatisticsApi->GetStatisticsCharging");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (utcOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "utcOffset", utcOffset));
            }
            if (chargingLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "chargingLocationId", chargingLocationId));
            }
            if (vehicleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "vehicleId", vehicleId));
            }

            localVarRequestOptions.Operation = "StatisticsApi.GetStatisticsCharging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StatisticsChargingTimeseriesSample>>("/statistics/charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsCharging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Charging Statistics Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsChargingTimeseriesSample&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatisticsChargingTimeseriesSample>> GetStatisticsChargingAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<StatisticsChargingTimeseriesSample>> localVarResponse = await GetStatisticsChargingWithHttpInfoAsync(startDate, resolution, endDate, type, id, utcOffset, chargingLocationId, vehicleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Charging Statistics Returns a normalized time series of statistics about power consumption and price for the User.  If Smart Charging has shifted the consumption, the &#39;non-smart&#39; price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the &#x60;estimatedSavings&#x60; field for convenience. &#x60;&lt;CURRENCY&gt;&#x60; is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="vehicleId"> (optional) (deprecated)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsChargingTimeseriesSample&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<StatisticsChargingTimeseriesSample>>> GetStatisticsChargingWithHttpInfoAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ConsumingVendorType? type = default(ConsumingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), string? vehicleId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'startDate' when calling StatisticsApi->GetStatisticsCharging");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (utcOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "utcOffset", utcOffset));
            }
            if (chargingLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "chargingLocationId", chargingLocationId));
            }
            if (vehicleId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "vehicleId", vehicleId));
            }

            localVarRequestOptions.Operation = "StatisticsApi.GetStatisticsCharging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StatisticsChargingTimeseriesSample>>("/statistics/charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsCharging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Sessions Charging Statistics Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatisticsTimeseriesSessionSample&gt;</returns>
        public List<StatisticsTimeseriesSessionSample> GetStatisticsChargingSessions(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<StatisticsTimeseriesSessionSample>> localVarResponse = GetStatisticsChargingSessionsWithHttpInfo(startDate, targetType, endDate, targetId, chargingLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Sessions Charging Statistics Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatisticsTimeseriesSessionSample&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<StatisticsTimeseriesSessionSample>> GetStatisticsChargingSessionsWithHttpInfo(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'startDate' when calling StatisticsApi->GetStatisticsChargingSessions");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "targetType", targetType));
            }
            localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (targetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "targetId", targetId));
            }
            if (chargingLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "chargingLocationId", chargingLocationId));
            }

            localVarRequestOptions.Operation = "StatisticsApi.GetStatisticsChargingSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StatisticsTimeseriesSessionSample>>("/statistics/charging/sessions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsChargingSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Sessions Charging Statistics Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsTimeseriesSessionSample&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatisticsTimeseriesSessionSample>> GetStatisticsChargingSessionsAsync(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<StatisticsTimeseriesSessionSample>> localVarResponse = await GetStatisticsChargingSessionsWithHttpInfoAsync(startDate, targetType, endDate, targetId, chargingLocationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Sessions Charging Statistics Returns a list of statistics about power consumption and price for the User binned by sessions.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="targetType">Get statistics for this hardware type. (optional)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="targetId">Filter statistics to only include a specific entity. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsTimeseriesSessionSample&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<StatisticsTimeseriesSessionSample>>> GetStatisticsChargingSessionsWithHttpInfoAsync(string startDate, ConsumingVendorType? targetType = default(ConsumingVendorType?), string? endDate = default(string?), string? targetId = default(string?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'startDate' when calling StatisticsApi->GetStatisticsChargingSessions");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (targetType != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "targetType", targetType));
            }
            localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (targetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "targetId", targetId));
            }
            if (chargingLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "chargingLocationId", chargingLocationId));
            }

            localVarRequestOptions.Operation = "StatisticsApi.GetStatisticsChargingSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StatisticsTimeseriesSessionSample>>("/statistics/charging/sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsChargingSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Production Statistics Returns a normalized time series of statistics about power production and price for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;StatisticsProductionTimeseriesSample&gt;</returns>
        public List<StatisticsProductionTimeseriesSample> GetStatisticsProduction(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<StatisticsProductionTimeseriesSample>> localVarResponse = GetStatisticsProductionWithHttpInfo(startDate, resolution, endDate, type, id, utcOffset, chargingLocationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Production Statistics Returns a normalized time series of statistics about power production and price for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;StatisticsProductionTimeseriesSample&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<StatisticsProductionTimeseriesSample>> GetStatisticsProductionWithHttpInfo(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'startDate' when calling StatisticsApi->GetStatisticsProduction");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (utcOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "utcOffset", utcOffset));
            }
            if (chargingLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "chargingLocationId", chargingLocationId));
            }

            localVarRequestOptions.Operation = "StatisticsApi.GetStatisticsProduction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StatisticsProductionTimeseriesSample>>("/statistics/production", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsProduction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Production Statistics Returns a normalized time series of statistics about power production and price for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsProductionTimeseriesSample&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatisticsProductionTimeseriesSample>> GetStatisticsProductionAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<StatisticsProductionTimeseriesSample>> localVarResponse = await GetStatisticsProductionWithHttpInfoAsync(startDate, resolution, endDate, type, id, utcOffset, chargingLocationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Production Statistics Returns a normalized time series of statistics about power production and price for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: &#x60;2021-03-21T00:25:43.511Z&#x60;</param>
        /// <param name="resolution">The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified. (optional, default to DAY)</param>
        /// <param name="endDate">Latest date to include in the response (defaults to current date/time) in ISO format. Example: &#x60;2021-03-21T00:25:43.511Z&#x60; (optional)</param>
        /// <param name="type">Get statistics for this hardware type. (optional)</param>
        /// <param name="id">Filter statistics to only include a specific entity. Hardware category of the entity must match the &#x60;type&#x60; parameter. (optional)</param>
        /// <param name="utcOffset">Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing &#x60;utcOffset&#x60; instead aligns these to the viewer&#39;s timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid. (optional)</param>
        /// <param name="chargingLocationId">Filter statistics to only include this charging location. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsProductionTimeseriesSample&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<StatisticsProductionTimeseriesSample>>> GetStatisticsProductionWithHttpInfoAsync(string startDate, string? resolution = default(string?), string? endDate = default(string?), ProducingVendorType? type = default(ProducingVendorType?), string? id = default(string?), float? utcOffset = default(float?), string? chargingLocationId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'startDate' when calling StatisticsApi->GetStatisticsProduction");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (resolution != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "resolution", resolution));
            }
            localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (utcOffset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "utcOffset", utcOffset));
            }
            if (chargingLocationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "chargingLocationId", chargingLocationId));
            }

            localVarRequestOptions.Operation = "StatisticsApi.GetStatisticsProduction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StatisticsProductionTimeseriesSample>>("/statistics/production", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStatisticsProduction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
