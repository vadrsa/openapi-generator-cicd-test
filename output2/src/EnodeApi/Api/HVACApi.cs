/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHVACApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get HVAC Unit
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HVAC</returns>
        HVAC GetHVAC(string hvacId, int operationIndex = 0);

        /// <summary>
        /// Get HVAC Unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HVAC</returns>
        ApiResponse<HVAC> GetHVACWithHttpInfo(string hvacId, int operationIndex = 0);
        /// <summary>
        /// Get Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        HvacAction GetHvacsAction(string vendorActionId, int operationIndex = 0);

        /// <summary>
        /// Get Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        ApiResponse<HvacAction> GetHvacsActionWithHttpInfo(string vendorActionId, int operationIndex = 0);
        /// <summary>
        /// List HVAC units
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ListHVACs(int operationIndex = 0);

        /// <summary>
        /// List HVAC units
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ListHVACsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Set HVAC to follow device schedule
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        HvacAction PostSetHvacFollowSchedule(string hvacId, int operationIndex = 0);

        /// <summary>
        /// Set HVAC to follow device schedule
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        ApiResponse<HvacAction> PostSetHvacFollowScheduleWithHttpInfo(string hvacId, int operationIndex = 0);
        /// <summary>
        /// Set HVAC Mode as Permanent Hold
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        HvacAction PostSetHvacPermanentHold(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0);

        /// <summary>
        /// Set HVAC Mode as Permanent Hold
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        ApiResponse<HvacAction> PostSetHvacPermanentHoldWithHttpInfo(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0);
        /// <summary>
        /// Set HVAC Temperature
        /// </summary>
        /// <remarks>
        /// This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        [Obsolete]
        HvacAction PostSetHvacTargetTemperature(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0);

        /// <summary>
        /// Set HVAC Temperature
        /// </summary>
        /// <remarks>
        /// This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        [Obsolete]
        ApiResponse<HvacAction> PostSetHvacTargetTemperatureWithHttpInfo(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0);
        /// <summary>
        /// Set HVAC Location
        /// </summary>
        /// <remarks>
        /// Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HVAC</returns>
        HVAC UpdateHVAC(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0);

        /// <summary>
        /// Set HVAC Location
        /// </summary>
        /// <remarks>
        /// Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HVAC</returns>
        ApiResponse<HVAC> UpdateHVACWithHttpInfo(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHVACApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get HVAC Unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HVAC</returns>
        System.Threading.Tasks.Task<HVAC> GetHVACAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get HVAC Unit
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HVAC)</returns>
        System.Threading.Tasks.Task<ApiResponse<HVAC>> GetHVACWithHttpInfoAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        System.Threading.Tasks.Task<HvacAction> GetHvacsActionAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<HvacAction>> GetHvacsActionWithHttpInfoAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List HVAC units
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ListHVACsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List HVAC units
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ListHVACsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set HVAC to follow device schedule
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        System.Threading.Tasks.Task<HvacAction> PostSetHvacFollowScheduleAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set HVAC to follow device schedule
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<HvacAction>> PostSetHvacFollowScheduleWithHttpInfoAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set HVAC Mode as Permanent Hold
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        System.Threading.Tasks.Task<HvacAction> PostSetHvacPermanentHoldAsync(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set HVAC Mode as Permanent Hold
        /// </summary>
        /// <remarks>
        /// Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<HvacAction>> PostSetHvacPermanentHoldWithHttpInfoAsync(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set HVAC Temperature
        /// </summary>
        /// <remarks>
        /// This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        [Obsolete]
        System.Threading.Tasks.Task<HvacAction> PostSetHvacTargetTemperatureAsync(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set HVAC Temperature
        /// </summary>
        /// <remarks>
        /// This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<HvacAction>> PostSetHvacTargetTemperatureWithHttpInfoAsync(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set HVAC Location
        /// </summary>
        /// <remarks>
        /// Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HVAC</returns>
        System.Threading.Tasks.Task<HVAC> UpdateHVACAsync(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set HVAC Location
        /// </summary>
        /// <remarks>
        /// Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HVAC)</returns>
        System.Threading.Tasks.Task<ApiResponse<HVAC>> UpdateHVACWithHttpInfoAsync(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHVACApi : IHVACApiSync, IHVACApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HVACApi : IHVACApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HVACApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HVACApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HVACApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HVACApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HVACApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HVACApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HVACApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HVACApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get HVAC Unit 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HVAC</returns>
        public HVAC GetHVAC(string hvacId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<HVAC> localVarResponse = GetHVACWithHttpInfo(hvacId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get HVAC Unit 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HVAC</returns>
        public EnodeApi.Client.ApiResponse<HVAC> GetHVACWithHttpInfo(string hvacId, int operationIndex = 0)
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->GetHVAC");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter

            localVarRequestOptions.Operation = "HVACApi.GetHVAC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HVAC>("/hvacs/{hvacId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHVAC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get HVAC Unit 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HVAC</returns>
        public async System.Threading.Tasks.Task<HVAC> GetHVACAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<HVAC> localVarResponse = await GetHVACWithHttpInfoAsync(hvacId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get HVAC Unit 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HVAC)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<HVAC>> GetHVACWithHttpInfoAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->GetHVAC");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter

            localVarRequestOptions.Operation = "HVACApi.GetHVAC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HVAC>("/hvacs/{hvacId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHVAC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        public HvacAction GetHvacsAction(string vendorActionId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = GetHvacsActionWithHttpInfo(vendorActionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        public EnodeApi.Client.ApiResponse<HvacAction> GetHvacsActionWithHttpInfo(string vendorActionId, int operationIndex = 0)
        {
            // verify the required parameter 'vendorActionId' is set
            if (vendorActionId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendorActionId' when calling HVACApi->GetHvacsAction");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendorActionId", EnodeApi.Client.ClientUtils.ParameterToString(vendorActionId)); // path parameter

            localVarRequestOptions.Operation = "HVACApi.GetHvacsAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<HvacAction>("/hvacs/actions/{vendorActionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHvacsAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        public async System.Threading.Tasks.Task<HvacAction> GetHvacsActionAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = await GetHvacsActionWithHttpInfoAsync(vendorActionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<HvacAction>> GetHvacsActionWithHttpInfoAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vendorActionId' is set
            if (vendorActionId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendorActionId' when calling HVACApi->GetHvacsAction");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendorActionId", EnodeApi.Client.ClientUtils.ParameterToString(vendorActionId)); // path parameter

            localVarRequestOptions.Operation = "HVACApi.GetHvacsAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HvacAction>("/hvacs/actions/{vendorActionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHvacsAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List HVAC units 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ListHVACs(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<string>> localVarResponse = ListHVACsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List HVAC units 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<string>> ListHVACsWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HVACApi.ListHVACs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/hvacs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHVACs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List HVAC units 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ListHVACsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<string>> localVarResponse = await ListHVACsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List HVAC units 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<string>>> ListHVACsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HVACApi.ListHVACs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/hvacs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListHVACs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC to follow device schedule Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        public HvacAction PostSetHvacFollowSchedule(string hvacId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = PostSetHvacFollowScheduleWithHttpInfo(hvacId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC to follow device schedule Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        public EnodeApi.Client.ApiResponse<HvacAction> PostSetHvacFollowScheduleWithHttpInfo(string hvacId, int operationIndex = 0)
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->PostSetHvacFollowSchedule");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter

            localVarRequestOptions.Operation = "HVACApi.PostSetHvacFollowSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<HvacAction>("/hvacs/{hvacId}/follow-schedule", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetHvacFollowSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC to follow device schedule Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        public async System.Threading.Tasks.Task<HvacAction> PostSetHvacFollowScheduleAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = await PostSetHvacFollowScheduleWithHttpInfoAsync(hvacId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC to follow device schedule Tell an HVAC unit to follow the schedule set on the device. Only available if &#x60;SCHEDULED&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit&#39;s fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<HvacAction>> PostSetHvacFollowScheduleWithHttpInfoAsync(string hvacId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->PostSetHvacFollowSchedule");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter

            localVarRequestOptions.Operation = "HVACApi.PostSetHvacFollowSchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HvacAction>("/hvacs/{hvacId}/follow-schedule", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetHvacFollowSchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC Mode as Permanent Hold Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        public HvacAction PostSetHvacPermanentHold(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = PostSetHvacPermanentHoldWithHttpInfo(hvacId, hVACSetPermanentHoldPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC Mode as Permanent Hold Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        public EnodeApi.Client.ApiResponse<HvacAction> PostSetHvacPermanentHoldWithHttpInfo(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0)
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->PostSetHvacPermanentHold");
            }

            // verify the required parameter 'hVACSetPermanentHoldPayload' is set
            if (hVACSetPermanentHoldPayload == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hVACSetPermanentHoldPayload' when calling HVACApi->PostSetHvacPermanentHold");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter
            localVarRequestOptions.Data = hVACSetPermanentHoldPayload;

            localVarRequestOptions.Operation = "HVACApi.PostSetHvacPermanentHold";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<HvacAction>("/hvacs/{hvacId}/permanent-hold", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetHvacPermanentHold", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC Mode as Permanent Hold Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        public async System.Threading.Tasks.Task<HvacAction> PostSetHvacPermanentHoldAsync(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = await PostSetHvacPermanentHoldWithHttpInfoAsync(hvacId, hVACSetPermanentHoldPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC Mode as Permanent Hold Tell an HVAC unit to enter a permanent hold. Only available if &#x60;PERMANENT&#x60; is present in the target&#39;s &#x60;capabilities.capableHoldType&#x60;. We retry sending the command until the HVAC unit&#39;s &#x60;target&#x60; field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACSetPermanentHoldPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<HvacAction>> PostSetHvacPermanentHoldWithHttpInfoAsync(string hvacId, HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->PostSetHvacPermanentHold");
            }

            // verify the required parameter 'hVACSetPermanentHoldPayload' is set
            if (hVACSetPermanentHoldPayload == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hVACSetPermanentHoldPayload' when calling HVACApi->PostSetHvacPermanentHold");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter
            localVarRequestOptions.Data = hVACSetPermanentHoldPayload;

            localVarRequestOptions.Operation = "HVACApi.PostSetHvacPermanentHold";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HvacAction>("/hvacs/{hvacId}/permanent-hold", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetHvacPermanentHold", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC Temperature This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HvacAction</returns>
        [Obsolete]
        public HvacAction PostSetHvacTargetTemperature(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = PostSetHvacTargetTemperatureWithHttpInfo(hvacId, dEPRECATEDTargetTemperature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC Temperature This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HvacAction</returns>
        [Obsolete]
        public EnodeApi.Client.ApiResponse<HvacAction> PostSetHvacTargetTemperatureWithHttpInfo(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0)
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->PostSetHvacTargetTemperature");
            }

            // verify the required parameter 'dEPRECATEDTargetTemperature' is set
            if (dEPRECATEDTargetTemperature == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'dEPRECATEDTargetTemperature' when calling HVACApi->PostSetHvacTargetTemperature");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter
            localVarRequestOptions.Data = dEPRECATEDTargetTemperature;

            localVarRequestOptions.Operation = "HVACApi.PostSetHvacTargetTemperature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<HvacAction>("/hvacs/{hvacId}/temperature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetHvacTargetTemperature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC Temperature This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HvacAction</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<HvacAction> PostSetHvacTargetTemperatureAsync(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<HvacAction> localVarResponse = await PostSetHvacTargetTemperatureWithHttpInfoAsync(hvacId, dEPRECATEDTargetTemperature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC Temperature This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.  Register a request for a change of the &#x60;targetTemperature&#x60; field on an HVAC unit. We retry sending the command until the HVAC unit&#39;s &#x60;targetTemperature&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).  This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="dEPRECATEDTargetTemperature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HvacAction)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<HvacAction>> PostSetHvacTargetTemperatureWithHttpInfoAsync(string hvacId, DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->PostSetHvacTargetTemperature");
            }

            // verify the required parameter 'dEPRECATEDTargetTemperature' is set
            if (dEPRECATEDTargetTemperature == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'dEPRECATEDTargetTemperature' when calling HVACApi->PostSetHvacTargetTemperature");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter
            localVarRequestOptions.Data = dEPRECATEDTargetTemperature;

            localVarRequestOptions.Operation = "HVACApi.PostSetHvacTargetTemperature";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<HvacAction>("/hvacs/{hvacId}/temperature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetHvacTargetTemperature", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC Location Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HVAC</returns>
        public HVAC UpdateHVAC(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<HVAC> localVarResponse = UpdateHVACWithHttpInfo(hvacId, hVACUpdatePayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC Location Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HVAC</returns>
        public EnodeApi.Client.ApiResponse<HVAC> UpdateHVACWithHttpInfo(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0)
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->UpdateHVAC");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter
            localVarRequestOptions.Data = hVACUpdatePayload;

            localVarRequestOptions.Operation = "HVACApi.UpdateHVAC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<HVAC>("/hvacs/{hvacId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHVAC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set HVAC Location Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HVAC</returns>
        public async System.Threading.Tasks.Task<HVAC> UpdateHVACAsync(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<HVAC> localVarResponse = await UpdateHVACWithHttpInfoAsync(hvacId, hVACUpdatePayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set HVAC Location Update the &#x60;chargingLocationId&#x60; field on an HVAC device.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hvacId">ID of the HVAC</param>
        /// <param name="hVACUpdatePayload"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HVAC)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<HVAC>> UpdateHVACWithHttpInfoAsync(string hvacId, HVACUpdatePayload? hVACUpdatePayload = default(HVACUpdatePayload?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'hvacId' is set
            if (hvacId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'hvacId' when calling HVACApi->UpdateHVAC");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("hvacId", EnodeApi.Client.ClientUtils.ParameterToString(hvacId)); // path parameter
            localVarRequestOptions.Data = hVACUpdatePayload;

            localVarRequestOptions.Operation = "HVACApi.UpdateHVAC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<HVAC>("/hvacs/{hvacId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateHVAC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
