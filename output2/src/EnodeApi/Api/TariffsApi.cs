/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITariffsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AssociateChargingLocationWithTariff(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0);

        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateChargingLocationWithTariffWithHttpInfo(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0);
        /// <summary>
        /// Send Tariff information
        /// </summary>
        /// <remarks>
        /// Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SendTariffInformation(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0);

        /// <summary>
        /// Send Tariff information
        /// </summary>
        /// <remarks>
        /// Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SendTariffInformationWithHttpInfo(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITariffsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateChargingLocationWithTariffAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate Charging Location With Tariff
        /// </summary>
        /// <remarks>
        /// Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateChargingLocationWithTariffWithHttpInfoAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send Tariff information
        /// </summary>
        /// <remarks>
        /// Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SendTariffInformationAsync(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send Tariff information
        /// </summary>
        /// <remarks>
        /// Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendTariffInformationWithHttpInfoAsync(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITariffsApi : ITariffsApiSync, ITariffsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TariffsApi : ITariffsApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TariffsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TariffsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TariffsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TariffsApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TariffsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TariffsApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TariffsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TariffsApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AssociateChargingLocationWithTariff(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0)
        {
            AssociateChargingLocationWithTariffWithHttpInfo(chargingLocationId, chargingLocationTariffInterval);
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnodeApi.Client.ApiResponse<Object> AssociateChargingLocationWithTariffWithHttpInfo(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0)
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling TariffsApi->AssociateChargingLocationWithTariff");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter
            localVarRequestOptions.Data = chargingLocationTariffInterval;

            localVarRequestOptions.Operation = "TariffsApi.AssociateChargingLocationWithTariff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/charging-locations/{chargingLocationId}/tariff", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateChargingLocationWithTariff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateChargingLocationWithTariffAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AssociateChargingLocationWithTariffWithHttpInfoAsync(chargingLocationId, chargingLocationTariffInterval, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Associate Charging Location With Tariff Associates a tariff to a charging location and specifies time intervals for the tariff&#39;s rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargingLocationId">ID of the Charging Location</param>
        /// <param name="chargingLocationTariffInterval"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Object>> AssociateChargingLocationWithTariffWithHttpInfoAsync(string chargingLocationId, ChargingLocationTariffInterval? chargingLocationTariffInterval = default(ChargingLocationTariffInterval?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargingLocationId' is set
            if (chargingLocationId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargingLocationId' when calling TariffsApi->AssociateChargingLocationWithTariff");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargingLocationId", EnodeApi.Client.ClientUtils.ParameterToString(chargingLocationId)); // path parameter
            localVarRequestOptions.Data = chargingLocationTariffInterval;

            localVarRequestOptions.Operation = "TariffsApi.AssociateChargingLocationWithTariff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/charging-locations/{chargingLocationId}/tariff", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateChargingLocationWithTariff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Tariff information Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SendTariffInformation(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0)
        {
            SendTariffInformationWithHttpInfo(tariffId, tariffRate);
        }

        /// <summary>
        /// Send Tariff information Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnodeApi.Client.ApiResponse<Object> SendTariffInformationWithHttpInfo(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0)
        {
            // verify the required parameter 'tariffId' is set
            if (tariffId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'tariffId' when calling TariffsApi->SendTariffInformation");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tariffId", EnodeApi.Client.ClientUtils.ParameterToString(tariffId)); // path parameter
            localVarRequestOptions.Data = tariffRate;

            localVarRequestOptions.Operation = "TariffsApi.SendTariffInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/tariffs/{tariffId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTariffInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send Tariff information Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SendTariffInformationAsync(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SendTariffInformationWithHttpInfoAsync(tariffId, tariffRate, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Send Tariff information Set a list of rates for a given &#x60;tariffId&#x60;. If previous data exists for a given &#x60;tariffId&#x60;, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tariffId">ID of the Tariff</param>
        /// <param name="tariffRate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Object>> SendTariffInformationWithHttpInfoAsync(string tariffId, List<TariffRate>? tariffRate = default(List<TariffRate>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tariffId' is set
            if (tariffId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'tariffId' when calling TariffsApi->SendTariffInformation");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tariffId", EnodeApi.Client.ClientUtils.ParameterToString(tariffId)); // path parameter
            localVarRequestOptions.Data = tariffRate;

            localVarRequestOptions.Operation = "TariffsApi.SendTariffInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/tariffs/{tariffId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendTariffInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
