/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Disconnect Vendor
        /// </summary>
        /// <remarks>
        /// Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DisconnectVendor(AnyVendor vendor, int operationIndex = 0);

        /// <summary>
        /// Disconnect Vendor
        /// </summary>
        /// <remarks>
        /// Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisconnectVendorWithHttpInfo(AnyVendor vendor, int operationIndex = 0);
        /// <summary>
        /// Get My User
        /// </summary>
        /// <remarks>
        /// Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Me</returns>
        Me GetMe(int operationIndex = 0);

        /// <summary>
        /// Get My User
        /// </summary>
        /// <remarks>
        /// Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Me</returns>
        ApiResponse<Me> GetMeWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Disconnect Vendor
        /// </summary>
        /// <remarks>
        /// Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisconnectVendorAsync(AnyVendor vendor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disconnect Vendor
        /// </summary>
        /// <remarks>
        /// Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisconnectVendorWithHttpInfoAsync(AnyVendor vendor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get My User
        /// </summary>
        /// <remarks>
        /// Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Me</returns>
        System.Threading.Tasks.Task<Me> GetMeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get My User
        /// </summary>
        /// <remarks>
        /// Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Me)</returns>
        System.Threading.Tasks.Task<ApiResponse<Me>> GetMeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeApi : IMeApiSync, IMeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeApi : IMeApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MeApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Disconnect Vendor Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DisconnectVendor(AnyVendor vendor, int operationIndex = 0)
        {
            DisconnectVendorWithHttpInfo(vendor);
        }

        /// <summary>
        /// Disconnect Vendor Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnodeApi.Client.ApiResponse<Object> DisconnectVendorWithHttpInfo(AnyVendor vendor, int operationIndex = 0)
        {
            // verify the required parameter 'vendor' is set
            if (vendor == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendor' when calling MeApi->DisconnectVendor");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor", EnodeApi.Client.ClientUtils.ParameterToString(vendor)); // path parameter

            localVarRequestOptions.Operation = "MeApi.DisconnectVendor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/me/vendors/{vendor}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisconnectVendor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disconnect Vendor Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisconnectVendorAsync(AnyVendor vendor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DisconnectVendorWithHttpInfoAsync(vendor, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Disconnect Vendor Disconnect a single Vendor from the User&#39;s account.  All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendor">Vendor to be unlinked</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Object>> DisconnectVendorWithHttpInfoAsync(AnyVendor vendor, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vendor' is set
            if (vendor == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendor' when calling MeApi->DisconnectVendor");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendor", EnodeApi.Client.ClientUtils.ParameterToString(vendor)); // path parameter

            localVarRequestOptions.Operation = "MeApi.DisconnectVendor";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/me/vendors/{vendor}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisconnectVendor", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get My User Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Me</returns>
        public Me GetMe(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<Me> localVarResponse = GetMeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get My User Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Me</returns>
        public EnodeApi.Client.ApiResponse<Me> GetMeWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeApi.GetMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Me>("/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get My User Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Me</returns>
        public async System.Threading.Tasks.Task<Me> GetMeAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<Me> localVarResponse = await GetMeWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get My User Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Me)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Me>> GetMeWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeApi.GetMe";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Me>("/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMe", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
