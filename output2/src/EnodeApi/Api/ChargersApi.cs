/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnodeApi.Client;
using EnodeApi.Client.Auth;
using EnodeApi.Model;

namespace EnodeApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        SmartOverrideResponse ChargerCreateExternalStart(string chargerId, int operationIndex = 0);

        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        ApiResponse<SmartOverrideResponse> ChargerCreateExternalStartWithHttpInfo(string chargerId, int operationIndex = 0);
        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        SmartOverrideResponse ChargerCreateSmartOverride(string chargerId, int operationIndex = 0);

        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        ApiResponse<SmartOverrideResponse> ChargerCreateSmartOverrideWithHttpInfo(string chargerId, int operationIndex = 0);
        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        SmartOverrideResponse ChargerEndExternalStart(string chargerId, int operationIndex = 0);

        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        ApiResponse<SmartOverrideResponse> ChargerEndExternalStartWithHttpInfo(string chargerId, int operationIndex = 0);
        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        SmartOverrideResponse ChargerEndSmartOverride(string chargerId, int operationIndex = 0);

        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        ApiResponse<SmartOverrideResponse> ChargerEndSmartOverrideWithHttpInfo(string chargerId, int operationIndex = 0);
        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAction</returns>
        ChargeAction ControlChargerCharging(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0);

        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAction</returns>
        ApiResponse<ChargeAction> ControlChargerChargingWithHttpInfo(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0);
        /// <summary>
        /// Get Charger
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Charger</returns>
        Charger GetCharger(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0);

        /// <summary>
        /// Get Charger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Charger</returns>
        ApiResponse<Charger> GetChargerWithHttpInfo(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0);
        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DEPRECATEDVendorAction</returns>
        DEPRECATEDVendorAction GetChargersAction(string vendorActionId, int operationIndex = 0);

        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DEPRECATEDVendorAction</returns>
        ApiResponse<DEPRECATEDVendorAction> GetChargersActionWithHttpInfo(string vendorActionId, int operationIndex = 0);
        /// <summary>
        /// List Chargers
        /// </summary>
        /// <remarks>
        /// List all available Chargers for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ListChargers(int operationIndex = 0);

        /// <summary>
        /// List Chargers
        /// </summary>
        /// <remarks>
        /// List all available Chargers for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ListChargersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Set Max Current
        /// </summary>
        /// <remarks>
        /// Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MaxCurrentAction</returns>
        MaxCurrentAction PostSetChargerMaxCurrent(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0);

        /// <summary>
        /// Set Max Current
        /// </summary>
        /// <remarks>
        /// Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MaxCurrentAction</returns>
        ApiResponse<MaxCurrentAction> PostSetChargerMaxCurrentWithHttpInfo(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SmartOverrideResponse> ChargerCreateExternalStartAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> ChargerCreateExternalStartWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        System.Threading.Tasks.Task<SmartOverrideResponse> ChargerCreateSmartOverrideAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Smart Override
        /// </summary>
        /// <remarks>
        /// Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> ChargerCreateSmartOverrideWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<SmartOverrideResponse> ChargerEndExternalStartAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End External Start
        /// </summary>
        /// <remarks>
        /// Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> ChargerEndExternalStartWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        System.Threading.Tasks.Task<SmartOverrideResponse> ChargerEndSmartOverrideAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// End Smart Override
        /// </summary>
        /// <remarks>
        /// Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmartOverrideResponse>> ChargerEndSmartOverrideWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAction</returns>
        System.Threading.Tasks.Task<ChargeAction> ControlChargerChargingAsync(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Control Charging
        /// </summary>
        /// <remarks>
        /// Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargeAction>> ControlChargerChargingWithHttpInfoAsync(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Charger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Charger</returns>
        System.Threading.Tasks.Task<Charger> GetChargerAsync(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Charger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Charger)</returns>
        System.Threading.Tasks.Task<ApiResponse<Charger>> GetChargerWithHttpInfoAsync(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DEPRECATEDVendorAction</returns>
        System.Threading.Tasks.Task<DEPRECATEDVendorAction> GetChargersActionAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Charge Action
        /// </summary>
        /// <remarks>
        /// Returns the current state of the requested action.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DEPRECATEDVendorAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<DEPRECATEDVendorAction>> GetChargersActionWithHttpInfoAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Chargers
        /// </summary>
        /// <remarks>
        /// List all available Chargers for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ListChargersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Chargers
        /// </summary>
        /// <remarks>
        /// List all available Chargers for the User.
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ListChargersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Max Current
        /// </summary>
        /// <remarks>
        /// Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MaxCurrentAction</returns>
        System.Threading.Tasks.Task<MaxCurrentAction> PostSetChargerMaxCurrentAsync(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Max Current
        /// </summary>
        /// <remarks>
        /// Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </remarks>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MaxCurrentAction)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaxCurrentAction>> PostSetChargerMaxCurrentWithHttpInfoAsync(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChargersApi : IChargersApiSync, IChargersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChargersApi : IChargersApi
    {
        private EnodeApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChargersApi(string basePath)
        {
            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                new EnodeApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChargersApi(EnodeApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EnodeApi.Client.Configuration.MergeConfigurations(
                EnodeApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EnodeApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChargersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChargersApi(EnodeApi.Client.ISynchronousClient client, EnodeApi.Client.IAsynchronousClient asyncClient, EnodeApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnodeApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnodeApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnodeApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnodeApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnodeApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        public SmartOverrideResponse ChargerCreateExternalStart(string chargerId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = ChargerCreateExternalStartWithHttpInfo(chargerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> ChargerCreateExternalStartWithHttpInfo(string chargerId, int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerCreateExternalStart");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerCreateExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SmartOverrideResponse>("/chargers/{chargerId}/external-start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerCreateExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SmartOverrideResponse> ChargerCreateExternalStartAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await ChargerCreateExternalStartWithHttpInfoAsync(chargerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create External Start Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> ChargerCreateExternalStartWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerCreateExternalStart");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerCreateExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmartOverrideResponse>("/chargers/{chargerId}/external-start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerCreateExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        public SmartOverrideResponse ChargerCreateSmartOverride(string chargerId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = ChargerCreateSmartOverrideWithHttpInfo(chargerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> ChargerCreateSmartOverrideWithHttpInfo(string chargerId, int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerCreateSmartOverride");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerCreateSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SmartOverrideResponse>("/chargers/{chargerId}/smart-override", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerCreateSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        public async System.Threading.Tasks.Task<SmartOverrideResponse> ChargerCreateSmartOverrideAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await ChargerCreateSmartOverrideWithHttpInfoAsync(chargerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Smart Override Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> ChargerCreateSmartOverrideWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerCreateSmartOverride");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerCreateSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SmartOverrideResponse>("/chargers/{chargerId}/smart-override", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerCreateSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        [Obsolete]
        public SmartOverrideResponse ChargerEndExternalStart(string chargerId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = ChargerEndExternalStartWithHttpInfo(chargerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        [Obsolete]
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> ChargerEndExternalStartWithHttpInfo(string chargerId, int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerEndExternalStart");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerEndExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SmartOverrideResponse>("/chargers/{chargerId}/external-start", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerEndExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<SmartOverrideResponse> ChargerEndExternalStartAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await ChargerEndExternalStartWithHttpInfoAsync(chargerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End External Start Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> ChargerEndExternalStartWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerEndExternalStart");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerEndExternalStart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SmartOverrideResponse>("/chargers/{chargerId}/external-start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerEndExternalStart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SmartOverrideResponse</returns>
        public SmartOverrideResponse ChargerEndSmartOverride(string chargerId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = ChargerEndSmartOverrideWithHttpInfo(chargerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SmartOverrideResponse</returns>
        public EnodeApi.Client.ApiResponse<SmartOverrideResponse> ChargerEndSmartOverrideWithHttpInfo(string chargerId, int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerEndSmartOverride");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerEndSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SmartOverrideResponse>("/chargers/{chargerId}/smart-override", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerEndSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SmartOverrideResponse</returns>
        public async System.Threading.Tasks.Task<SmartOverrideResponse> ChargerEndSmartOverrideAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<SmartOverrideResponse> localVarResponse = await ChargerEndSmartOverrideWithHttpInfoAsync(chargerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// End Smart Override Ends any active Smart Override for the charger specified by &#x60;chargerId&#x60;. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SmartOverrideResponse)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<SmartOverrideResponse>> ChargerEndSmartOverrideWithHttpInfoAsync(string chargerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ChargerEndSmartOverride");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.ChargerEndSmartOverride";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SmartOverrideResponse>("/chargers/{chargerId}/smart-override", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChargerEndSmartOverride", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Control Charging Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChargeAction</returns>
        public ChargeAction ControlChargerCharging(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<ChargeAction> localVarResponse = ControlChargerChargingWithHttpInfo(chargerId, controlChargerChargingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Control Charging Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChargeAction</returns>
        public EnodeApi.Client.ApiResponse<ChargeAction> ControlChargerChargingWithHttpInfo(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ControlChargerCharging");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.Data = controlChargerChargingRequest;

            localVarRequestOptions.Operation = "ChargersApi.ControlChargerCharging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ChargeAction>("/chargers/{chargerId}/charging", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ControlChargerCharging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Control Charging Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChargeAction</returns>
        public async System.Threading.Tasks.Task<ChargeAction> ControlChargerChargingAsync(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<ChargeAction> localVarResponse = await ControlChargerChargingWithHttpInfoAsync(chargerId, controlChargerChargingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Control Charging Register a request for a charger to start or stop charging. We retry sending the command until the charger&#39;s &#x60;chargeStateIsCharging&#x60; field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).   This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="controlChargerChargingRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChargeAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<ChargeAction>> ControlChargerChargingWithHttpInfoAsync(string chargerId, ControlChargerChargingRequest? controlChargerChargingRequest = default(ControlChargerChargingRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->ControlChargerCharging");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.Data = controlChargerChargingRequest;

            localVarRequestOptions.Operation = "ChargersApi.ControlChargerCharging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ChargeAction>("/chargers/{chargerId}/charging", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ControlChargerCharging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charger 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Charger</returns>
        public Charger GetCharger(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<Charger> localVarResponse = GetChargerWithHttpInfo(chargerId, field);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charger 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Charger</returns>
        public EnodeApi.Client.ApiResponse<Charger> GetChargerWithHttpInfo(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->GetCharger");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (field != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "field", field));
            }

            localVarRequestOptions.Operation = "ChargersApi.GetCharger";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Charger>("/chargers/{chargerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharger", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charger 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Charger</returns>
        public async System.Threading.Tasks.Task<Charger> GetChargerAsync(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<Charger> localVarResponse = await GetChargerWithHttpInfoAsync(chargerId, field, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charger 
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="field">If you specify any fields here, we make a request to the Charger&#39;s OEM APIs and return the updated data.   This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the &#x60;lastSeen&#x60; &amp; &#x60;isReachable&#x60; fields on the charger).  By default, no fields are included, and the latest cached full Charger object will be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Charger)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<Charger>> GetChargerWithHttpInfoAsync(string chargerId, GetChargerFieldParameter? field = default(GetChargerFieldParameter?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->GetCharger");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            if (field != null)
            {
                localVarRequestOptions.QueryParameters.Add(EnodeApi.Client.ClientUtils.ParameterToMultiMap("", "field", field));
            }

            localVarRequestOptions.Operation = "ChargersApi.GetCharger";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Charger>("/chargers/{chargerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCharger", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DEPRECATEDVendorAction</returns>
        public DEPRECATEDVendorAction GetChargersAction(string vendorActionId, int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<DEPRECATEDVendorAction> localVarResponse = GetChargersActionWithHttpInfo(vendorActionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DEPRECATEDVendorAction</returns>
        public EnodeApi.Client.ApiResponse<DEPRECATEDVendorAction> GetChargersActionWithHttpInfo(string vendorActionId, int operationIndex = 0)
        {
            // verify the required parameter 'vendorActionId' is set
            if (vendorActionId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendorActionId' when calling ChargersApi->GetChargersAction");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendorActionId", EnodeApi.Client.ClientUtils.ParameterToString(vendorActionId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.GetChargersAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DEPRECATEDVendorAction>("/chargers/actions/{vendorActionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChargersAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DEPRECATEDVendorAction</returns>
        public async System.Threading.Tasks.Task<DEPRECATEDVendorAction> GetChargersActionAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<DEPRECATEDVendorAction> localVarResponse = await GetChargersActionWithHttpInfoAsync(vendorActionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Charge Action Returns the current state of the requested action.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vendorActionId">ID of the Action</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DEPRECATEDVendorAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<DEPRECATEDVendorAction>> GetChargersActionWithHttpInfoAsync(string vendorActionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'vendorActionId' is set
            if (vendorActionId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'vendorActionId' when calling ChargersApi->GetChargersAction");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("vendorActionId", EnodeApi.Client.ClientUtils.ParameterToString(vendorActionId)); // path parameter

            localVarRequestOptions.Operation = "ChargersApi.GetChargersAction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DEPRECATEDVendorAction>("/chargers/actions/{vendorActionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChargersAction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Chargers List all available Chargers for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ListChargers(int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<List<string>> localVarResponse = ListChargersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Chargers List all available Chargers for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public EnodeApi.Client.ApiResponse<List<string>> ListChargersWithHttpInfo(int operationIndex = 0)
        {
            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChargersApi.ListChargers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/chargers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListChargers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Chargers List all available Chargers for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ListChargersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<List<string>> localVarResponse = await ListChargersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Chargers List all available Chargers for the User.
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<List<string>>> ListChargersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ChargersApi.ListChargers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/chargers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListChargers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Max Current Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MaxCurrentAction</returns>
        public MaxCurrentAction PostSetChargerMaxCurrent(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0)
        {
            EnodeApi.Client.ApiResponse<MaxCurrentAction> localVarResponse = PostSetChargerMaxCurrentWithHttpInfo(chargerId, targetMaxCurrent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Max Current Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MaxCurrentAction</returns>
        public EnodeApi.Client.ApiResponse<MaxCurrentAction> PostSetChargerMaxCurrentWithHttpInfo(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0)
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->PostSetChargerMaxCurrent");
            }

            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.Data = targetMaxCurrent;

            localVarRequestOptions.Operation = "ChargersApi.PostSetChargerMaxCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MaxCurrentAction>("/chargers/{chargerId}/max-current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetChargerMaxCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Max Current Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MaxCurrentAction</returns>
        public async System.Threading.Tasks.Task<MaxCurrentAction> PostSetChargerMaxCurrentAsync(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EnodeApi.Client.ApiResponse<MaxCurrentAction> localVarResponse = await PostSetChargerMaxCurrentWithHttpInfoAsync(chargerId, targetMaxCurrent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Max Current Register a request for a change of the &#x60;maxCurrent&#x60; field on a charger. We retry sending the command until the charger&#39;s &#x60;maxCurrent&#x60; field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the &#x60;CANCELLED&#x60; state. You may react to transitions by listening for the &#x60;user:vendor-action:updated&#x60; webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
        /// </summary>
        /// <exception cref="EnodeApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chargerId">ID of the Charger</param>
        /// <param name="targetMaxCurrent"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MaxCurrentAction)</returns>
        public async System.Threading.Tasks.Task<EnodeApi.Client.ApiResponse<MaxCurrentAction>> PostSetChargerMaxCurrentWithHttpInfoAsync(string chargerId, TargetMaxCurrent? targetMaxCurrent = default(TargetMaxCurrent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chargerId' is set
            if (chargerId == null)
            {
                throw new EnodeApi.Client.ApiException(400, "Missing required parameter 'chargerId' when calling ChargersApi->PostSetChargerMaxCurrent");
            }


            EnodeApi.Client.RequestOptions localVarRequestOptions = new EnodeApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EnodeApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnodeApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chargerId", EnodeApi.Client.ClientUtils.ParameterToString(chargerId)); // path parameter
            localVarRequestOptions.Data = targetMaxCurrent;

            localVarRequestOptions.Operation = "ChargersApi.PostSetChargerMaxCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientAccessToken) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MaxCurrentAction>("/chargers/{chargerId}/max-current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSetChargerMaxCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
