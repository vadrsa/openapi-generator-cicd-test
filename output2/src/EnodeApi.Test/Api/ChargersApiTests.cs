/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EnodeApi.Client;
using EnodeApi.Api;
// uncomment below to import models
//using EnodeApi.Model;

namespace EnodeApi.Test.Api
{
    /// <summary>
    ///  Class for testing ChargersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChargersApiTests : IDisposable
    {
        private ChargersApi instance;

        public ChargersApiTests()
        {
            instance = new ChargersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChargersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ChargersApi
            //Assert.IsType<ChargersApi>(instance);
        }

        /// <summary>
        /// Test ChargerCreateExternalStart
        /// </summary>
        [Fact]
        public void ChargerCreateExternalStartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargerId = null;
            //var response = instance.ChargerCreateExternalStart(chargerId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }

        /// <summary>
        /// Test ChargerCreateSmartOverride
        /// </summary>
        [Fact]
        public void ChargerCreateSmartOverrideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargerId = null;
            //var response = instance.ChargerCreateSmartOverride(chargerId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }

        /// <summary>
        /// Test ChargerEndExternalStart
        /// </summary>
        [Fact]
        public void ChargerEndExternalStartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargerId = null;
            //var response = instance.ChargerEndExternalStart(chargerId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }

        /// <summary>
        /// Test ChargerEndSmartOverride
        /// </summary>
        [Fact]
        public void ChargerEndSmartOverrideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargerId = null;
            //var response = instance.ChargerEndSmartOverride(chargerId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }

        /// <summary>
        /// Test ControlChargerCharging
        /// </summary>
        [Fact]
        public void ControlChargerChargingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargerId = null;
            //ControlChargerChargingRequest? controlChargerChargingRequest = null;
            //var response = instance.ControlChargerCharging(chargerId, controlChargerChargingRequest);
            //Assert.IsType<ChargeAction>(response);
        }

        /// <summary>
        /// Test GetCharger
        /// </summary>
        [Fact]
        public void GetChargerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargerId = null;
            //GetChargerFieldParameter? field = null;
            //var response = instance.GetCharger(chargerId, field);
            //Assert.IsType<Charger>(response);
        }

        /// <summary>
        /// Test GetChargersAction
        /// </summary>
        [Fact]
        public void GetChargersActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vendorActionId = null;
            //var response = instance.GetChargersAction(vendorActionId);
            //Assert.IsType<DEPRECATEDVendorAction>(response);
        }

        /// <summary>
        /// Test ListChargers
        /// </summary>
        [Fact]
        public void ListChargersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListChargers();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test PostSetChargerMaxCurrent
        /// </summary>
        [Fact]
        public void PostSetChargerMaxCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargerId = null;
            //TargetMaxCurrent? targetMaxCurrent = null;
            //var response = instance.PostSetChargerMaxCurrent(chargerId, targetMaxCurrent);
            //Assert.IsType<MaxCurrentAction>(response);
        }
    }
}
