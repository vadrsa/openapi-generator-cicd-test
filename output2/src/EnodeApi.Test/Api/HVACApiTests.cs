/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EnodeApi.Client;
using EnodeApi.Api;
// uncomment below to import models
//using EnodeApi.Model;

namespace EnodeApi.Test.Api
{
    /// <summary>
    ///  Class for testing HVACApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class HVACApiTests : IDisposable
    {
        private HVACApi instance;

        public HVACApiTests()
        {
            instance = new HVACApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of HVACApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' HVACApi
            //Assert.IsType<HVACApi>(instance);
        }

        /// <summary>
        /// Test GetHVAC
        /// </summary>
        [Fact]
        public void GetHVACTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hvacId = null;
            //var response = instance.GetHVAC(hvacId);
            //Assert.IsType<HVAC>(response);
        }

        /// <summary>
        /// Test GetHvacsAction
        /// </summary>
        [Fact]
        public void GetHvacsActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vendorActionId = null;
            //var response = instance.GetHvacsAction(vendorActionId);
            //Assert.IsType<HvacAction>(response);
        }

        /// <summary>
        /// Test ListHVACs
        /// </summary>
        [Fact]
        public void ListHVACsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListHVACs();
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test PostSetHvacFollowSchedule
        /// </summary>
        [Fact]
        public void PostSetHvacFollowScheduleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hvacId = null;
            //var response = instance.PostSetHvacFollowSchedule(hvacId);
            //Assert.IsType<HvacAction>(response);
        }

        /// <summary>
        /// Test PostSetHvacPermanentHold
        /// </summary>
        [Fact]
        public void PostSetHvacPermanentHoldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hvacId = null;
            //HVACSetPermanentHoldPayload hVACSetPermanentHoldPayload = null;
            //var response = instance.PostSetHvacPermanentHold(hvacId, hVACSetPermanentHoldPayload);
            //Assert.IsType<HvacAction>(response);
        }

        /// <summary>
        /// Test PostSetHvacTargetTemperature
        /// </summary>
        [Fact]
        public void PostSetHvacTargetTemperatureTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hvacId = null;
            //DEPRECATEDTargetTemperature dEPRECATEDTargetTemperature = null;
            //var response = instance.PostSetHvacTargetTemperature(hvacId, dEPRECATEDTargetTemperature);
            //Assert.IsType<HvacAction>(response);
        }

        /// <summary>
        /// Test UpdateHVAC
        /// </summary>
        [Fact]
        public void UpdateHVACTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hvacId = null;
            //HVACUpdatePayload? hVACUpdatePayload = null;
            //var response = instance.UpdateHVAC(hvacId, hVACUpdatePayload);
            //Assert.IsType<HVAC>(response);
        }
    }
}
