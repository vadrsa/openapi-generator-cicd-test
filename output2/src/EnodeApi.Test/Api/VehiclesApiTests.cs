/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EnodeApi.Client;
using EnodeApi.Api;
// uncomment below to import models
//using EnodeApi.Model;

namespace EnodeApi.Test.Api
{
    /// <summary>
    ///  Class for testing VehiclesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class VehiclesApiTests : IDisposable
    {
        private VehiclesApi instance;

        public VehiclesApiTests()
        {
            instance = new VehiclesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VehiclesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' VehiclesApi
            //Assert.IsType<VehiclesApi>(instance);
        }

        /// <summary>
        /// Test GetVehicles
        /// </summary>
        [Fact]
        public void GetVehiclesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetVehiclesFieldParameter? field = null;
            //var response = instance.GetVehicles(field);
            //Assert.IsType<List<Vehicle>>(response);
        }

        /// <summary>
        /// Test GetVehiclesAction
        /// </summary>
        [Fact]
        public void GetVehiclesActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vendorActionId = null;
            //var response = instance.GetVehiclesAction(vendorActionId);
            //Assert.IsType<ChargeAction>(response);
        }

        /// <summary>
        /// Test GetVehiclesVehicleid
        /// </summary>
        [Fact]
        public void GetVehiclesVehicleidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //GetVehiclesFieldParameter? field = null;
            //var response = instance.GetVehiclesVehicleid(vehicleId, field);
            //Assert.IsType<Vehicle>(response);
        }

        /// <summary>
        /// Test GetVehiclesVehicleidSmartchargingplans
        /// </summary>
        [Fact]
        public void GetVehiclesVehicleidSmartchargingplansTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //string smartChargingPlanId = null;
            //var response = instance.GetVehiclesVehicleidSmartchargingplans(vehicleId, smartChargingPlanId);
            //Assert.IsType<VehicleSmartChargingPlan>(response);
        }

        /// <summary>
        /// Test GetVehiclesVehicleidSmartchargingpolicy
        /// </summary>
        [Fact]
        public void GetVehiclesVehicleidSmartchargingpolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //var response = instance.GetVehiclesVehicleidSmartchargingpolicy(vehicleId);
            //Assert.IsType<GetVehiclesVehicleidSmartchargingpolicy200Response>(response);
        }

        /// <summary>
        /// Test GetVehiclesVehicleidSmartchargingstatus
        /// </summary>
        [Fact]
        public void GetVehiclesVehicleidSmartchargingstatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //var response = instance.GetVehiclesVehicleidSmartchargingstatus(vehicleId);
            //Assert.IsType<GetVehiclesVehicleidSmartchargingstatus200Response>(response);
        }

        /// <summary>
        /// Test PostVehiclesVehicleidCharging
        /// </summary>
        [Fact]
        public void PostVehiclesVehicleidChargingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //ChargeActionPayload chargeActionPayload = null;
            //var response = instance.PostVehiclesVehicleidCharging(vehicleId, chargeActionPayload);
            //Assert.IsType<ChargeAction>(response);
        }

        /// <summary>
        /// Test UpdateVehicleSmartChargingPolicy
        /// </summary>
        [Fact]
        public void UpdateVehicleSmartChargingPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //VehicleSmartChargingPolicy? vehicleSmartChargingPolicy = null;
            //var response = instance.UpdateVehicleSmartChargingPolicy(vehicleId, vehicleSmartChargingPolicy);
            //Assert.IsType<GetVehiclesVehicleidSmartchargingpolicy200Response>(response);
        }

        /// <summary>
        /// Test VehicleCreateExternalStart
        /// </summary>
        [Fact]
        public void VehicleCreateExternalStartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //var response = instance.VehicleCreateExternalStart(vehicleId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }

        /// <summary>
        /// Test VehicleCreateSmartOverride
        /// </summary>
        [Fact]
        public void VehicleCreateSmartOverrideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //var response = instance.VehicleCreateSmartOverride(vehicleId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }

        /// <summary>
        /// Test VehicleEndExternalStart
        /// </summary>
        [Fact]
        public void VehicleEndExternalStartTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //var response = instance.VehicleEndExternalStart(vehicleId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }

        /// <summary>
        /// Test VehicleEndSmartOverride
        /// </summary>
        [Fact]
        public void VehicleEndSmartOverrideTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string vehicleId = null;
            //var response = instance.VehicleEndSmartOverride(vehicleId);
            //Assert.IsType<SmartOverrideResponse>(response);
        }
    }
}
