/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EnodeApi.Client;
using EnodeApi.Api;
// uncomment below to import models
//using EnodeApi.Model;

namespace EnodeApi.Test.Api
{
    /// <summary>
    ///  Class for testing ChargingLocationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ChargingLocationsApiTests : IDisposable
    {
        private ChargingLocationsApi instance;

        public ChargingLocationsApiTests()
        {
            instance = new ChargingLocationsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ChargingLocationsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ChargingLocationsApi
            //Assert.IsType<ChargingLocationsApi>(instance);
        }

        /// <summary>
        /// Test AssociateChargingLocationWithTariff
        /// </summary>
        [Fact]
        public void AssociateChargingLocationWithTariffTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargingLocationId = null;
            //ChargingLocationTariffInterval? chargingLocationTariffInterval = null;
            //instance.AssociateChargingLocationWithTariff(chargingLocationId, chargingLocationTariffInterval);
        }

        /// <summary>
        /// Test DeleteCharginglocationsCharginglocationid
        /// </summary>
        [Fact]
        public void DeleteCharginglocationsCharginglocationidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargingLocationId = null;
            //var response = instance.DeleteCharginglocationsCharginglocationid(chargingLocationId);
            //Assert.IsType<ChargingLocationResponse>(response);
        }

        /// <summary>
        /// Test GetChargingLocationTariff
        /// </summary>
        [Fact]
        public void GetChargingLocationTariffTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargingLocationId = null;
            //var response = instance.GetChargingLocationTariff(chargingLocationId);
            //Assert.IsType<List<ChargingLocationTariffInner>>(response);
        }

        /// <summary>
        /// Test GetCharginglocations
        /// </summary>
        [Fact]
        public void GetCharginglocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCharginglocations();
            //Assert.IsType<List<ChargingLocationResponse>>(response);
        }

        /// <summary>
        /// Test GetCharginglocationsCharginglocationid
        /// </summary>
        [Fact]
        public void GetCharginglocationsCharginglocationidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargingLocationId = null;
            //var response = instance.GetCharginglocationsCharginglocationid(chargingLocationId);
            //Assert.IsType<ChargingLocationResponse>(response);
        }

        /// <summary>
        /// Test PostCharginglocations
        /// </summary>
        [Fact]
        public void PostCharginglocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChargingLocationCreateRequest? chargingLocationCreateRequest = null;
            //var response = instance.PostCharginglocations(chargingLocationCreateRequest);
            //Assert.IsType<ChargingLocationResponse>(response);
        }

        /// <summary>
        /// Test PutCharginglocationsCharginglocationid
        /// </summary>
        [Fact]
        public void PutCharginglocationsCharginglocationidTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string chargingLocationId = null;
            //ChargingLocationUpdateRequest? chargingLocationUpdateRequest = null;
            //var response = instance.PutCharginglocationsCharginglocationid(chargingLocationId, chargingLocationUpdateRequest);
            //Assert.IsType<ChargingLocationResponse>(response);
        }
    }
}
