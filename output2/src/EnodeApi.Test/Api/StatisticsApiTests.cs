/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EnodeApi.Client;
using EnodeApi.Api;
// uncomment below to import models
//using EnodeApi.Model;

namespace EnodeApi.Test.Api
{
    /// <summary>
    ///  Class for testing StatisticsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class StatisticsApiTests : IDisposable
    {
        private StatisticsApi instance;

        public StatisticsApiTests()
        {
            instance = new StatisticsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of StatisticsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' StatisticsApi
            //Assert.IsType<StatisticsApi>(instance);
        }

        /// <summary>
        /// Test GetStatisticsCharging
        /// </summary>
        [Fact]
        public void GetStatisticsChargingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string? resolution = null;
            //string? endDate = null;
            //ConsumingVendorType? type = null;
            //string? id = null;
            //float? utcOffset = null;
            //string? chargingLocationId = null;
            //string? vehicleId = null;
            //var response = instance.GetStatisticsCharging(startDate, resolution, endDate, type, id, utcOffset, chargingLocationId, vehicleId);
            //Assert.IsType<List<StatisticsChargingTimeseriesSample>>(response);
        }

        /// <summary>
        /// Test GetStatisticsChargingSessions
        /// </summary>
        [Fact]
        public void GetStatisticsChargingSessionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //ConsumingVendorType? targetType = null;
            //string? endDate = null;
            //string? targetId = null;
            //string? chargingLocationId = null;
            //var response = instance.GetStatisticsChargingSessions(startDate, targetType, endDate, targetId, chargingLocationId);
            //Assert.IsType<List<StatisticsTimeseriesSessionSample>>(response);
        }

        /// <summary>
        /// Test GetStatisticsProduction
        /// </summary>
        [Fact]
        public void GetStatisticsProductionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string startDate = null;
            //string? resolution = null;
            //string? endDate = null;
            //ProducingVendorType? type = null;
            //string? id = null;
            //float? utcOffset = null;
            //string? chargingLocationId = null;
            //var response = instance.GetStatisticsProduction(startDate, resolution, endDate, type, id, utcOffset, chargingLocationId);
            //Assert.IsType<List<StatisticsProductionTimeseriesSample>>(response);
        }
    }
}
