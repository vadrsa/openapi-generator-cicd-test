/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using EnodeApi.Client;
using EnodeApi.Api;
// uncomment below to import models
//using EnodeApi.Model;

namespace EnodeApi.Test.Api
{
    /// <summary>
    ///  Class for testing UserManagementApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserManagementApiTests : IDisposable
    {
        private UserManagementApi instance;

        public UserManagementApiTests()
        {
            instance = new UserManagementApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserManagementApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserManagementApi
            //Assert.IsType<UserManagementApi>(instance);
        }

        /// <summary>
        /// Test DeleteUsersUserid
        /// </summary>
        [Fact]
        public void DeleteUsersUseridTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.DeleteUsersUserid(userId);
        }

        /// <summary>
        /// Test DeleteUsersUseridAuthorization
        /// </summary>
        [Fact]
        public void DeleteUsersUseridAuthorizationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.DeleteUsersUseridAuthorization(userId);
        }

        /// <summary>
        /// Test PostUsersUseridLink
        /// </summary>
        [Fact]
        public void PostUsersUseridLinkTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //LinkUserOptions? linkUserOptions = null;
            //var response = instance.PostUsersUseridLink(userId, linkUserOptions);
            //Assert.IsType<LinkUserResponse>(response);
        }
    }
}
