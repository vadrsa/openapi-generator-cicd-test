/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using EnodeApi.Api;
using EnodeApi.Model;
using EnodeApi.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace EnodeApi.Test.Model
{
    /// <summary>
    ///  Class for testing DEPRECATEDConsideration
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DEPRECATEDConsiderationTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DEPRECATEDConsideration
        //private DEPRECATEDConsideration instance;

        public DEPRECATEDConsiderationTests()
        {
            // TODO uncomment below to create an instance of DEPRECATEDConsideration
            //instance = new DEPRECATEDConsideration();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DEPRECATEDConsideration
        /// </summary>
        [Fact]
        public void DEPRECATEDConsiderationInstanceTest()
        {
            // TODO uncomment below to test "IsType" DEPRECATEDConsideration
            //Assert.IsType<DEPRECATEDConsideration>(instance);
        }


        /// <summary>
        /// Test the property 'IsSmartChargeCapable'
        /// </summary>
        [Fact]
        public void IsSmartChargeCapableTest()
        {
            // TODO unit test for the property 'IsSmartChargeCapable'
        }
        /// <summary>
        /// Test the property 'IsPluggedIn'
        /// </summary>
        [Fact]
        public void IsPluggedInTest()
        {
            // TODO unit test for the property 'IsPluggedIn'
        }
        /// <summary>
        /// Test the property 'IsCharging'
        /// </summary>
        [Fact]
        public void IsChargingTest()
        {
            // TODO unit test for the property 'IsCharging'
        }
        /// <summary>
        /// Test the property 'HasTimeEstimate'
        /// </summary>
        [Fact]
        public void HasTimeEstimateTest()
        {
            // TODO unit test for the property 'HasTimeEstimate'
        }
        /// <summary>
        /// Test the property 'NeedsSignificantCharge'
        /// </summary>
        [Fact]
        public void NeedsSignificantChargeTest()
        {
            // TODO unit test for the property 'NeedsSignificantCharge'
        }
        /// <summary>
        /// Test the property 'HasChargeAboveThreshold'
        /// </summary>
        [Fact]
        public void HasChargeAboveThresholdTest()
        {
            // TODO unit test for the property 'HasChargeAboveThreshold'
        }
        /// <summary>
        /// Test the property 'SingleUser'
        /// </summary>
        [Fact]
        public void SingleUserTest()
        {
            // TODO unit test for the property 'SingleUser'
        }
        /// <summary>
        /// Test the property 'ConfidentBatteryCapacity'
        /// </summary>
        [Fact]
        public void ConfidentBatteryCapacityTest()
        {
            // TODO unit test for the property 'ConfidentBatteryCapacity'
        }
        /// <summary>
        /// Test the property 'AtChargingLocation'
        /// </summary>
        [Fact]
        public void AtChargingLocationTest()
        {
            // TODO unit test for the property 'AtChargingLocation'
        }
        /// <summary>
        /// Test the property 'LocationIsFresh'
        /// </summary>
        [Fact]
        public void LocationIsFreshTest()
        {
            // TODO unit test for the property 'LocationIsFresh'
        }
        /// <summary>
        /// Test the property 'ConfidentTimeEstimate'
        /// </summary>
        [Fact]
        public void ConfidentTimeEstimateTest()
        {
            // TODO unit test for the property 'ConfidentTimeEstimate'
        }
        /// <summary>
        /// Test the property 'NeedsCharge'
        /// </summary>
        [Fact]
        public void NeedsChargeTest()
        {
            // TODO unit test for the property 'NeedsCharge'
        }
        /// <summary>
        /// Test the property 'PriceDataAvailable'
        /// </summary>
        [Fact]
        public void PriceDataAvailableTest()
        {
            // TODO unit test for the property 'PriceDataAvailable'
        }
        /// <summary>
        /// Test the property 'MinimumSavings'
        /// </summary>
        [Fact]
        public void MinimumSavingsTest()
        {
            // TODO unit test for the property 'MinimumSavings'
        }
        /// <summary>
        /// Test the property 'MinimumDelay'
        /// </summary>
        [Fact]
        public void MinimumDelayTest()
        {
            // TODO unit test for the property 'MinimumDelay'
        }
        /// <summary>
        /// Test the property 'IsNormalSchedule'
        /// </summary>
        [Fact]
        public void IsNormalScheduleTest()
        {
            // TODO unit test for the property 'IsNormalSchedule'
        }
        /// <summary>
        /// Test the property 'NoCommittedDelay'
        /// </summary>
        [Fact]
        public void NoCommittedDelayTest()
        {
            // TODO unit test for the property 'NoCommittedDelay'
        }

    }

}
