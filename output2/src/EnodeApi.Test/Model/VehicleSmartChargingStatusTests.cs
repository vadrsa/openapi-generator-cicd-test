/*
 * Enode API
 *
 * The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.  The API has a RESTful architecture and utilizes OAuth2 authorization. 
 *
 * The version of the OpenAPI document: 1.17.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using EnodeApi.Api;
using EnodeApi.Model;
using EnodeApi.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace EnodeApi.Test.Model
{
    /// <summary>
    ///  Class for testing VehicleSmartChargingStatus
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class VehicleSmartChargingStatusTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for VehicleSmartChargingStatus
        //private VehicleSmartChargingStatus instance;

        public VehicleSmartChargingStatusTests()
        {
            // TODO uncomment below to create an instance of VehicleSmartChargingStatus
            //instance = new VehicleSmartChargingStatus();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of VehicleSmartChargingStatus
        /// </summary>
        [Fact]
        public void VehicleSmartChargingStatusInstanceTest()
        {
            // TODO uncomment below to test "IsType" VehicleSmartChargingStatus
            //Assert.IsType<VehicleSmartChargingStatus>(instance);
        }


        /// <summary>
        /// Test the property 'UpdatedAt'
        /// </summary>
        [Fact]
        public void UpdatedAtTest()
        {
            // TODO unit test for the property 'UpdatedAt'
        }
        /// <summary>
        /// Test the property 'VehicleId'
        /// </summary>
        [Fact]
        public void VehicleIdTest()
        {
            // TODO unit test for the property 'VehicleId'
        }
        /// <summary>
        /// Test the property 'UserId'
        /// </summary>
        [Fact]
        public void UserIdTest()
        {
            // TODO unit test for the property 'UserId'
        }
        /// <summary>
        /// Test the property 'Vendor'
        /// </summary>
        [Fact]
        public void VendorTest()
        {
            // TODO unit test for the property 'Vendor'
        }
        /// <summary>
        /// Test the property 'State'
        /// </summary>
        [Fact]
        public void StateTest()
        {
            // TODO unit test for the property 'State'
        }
        /// <summary>
        /// Test the property 'StateChangedAt'
        /// </summary>
        [Fact]
        public void StateChangedAtTest()
        {
            // TODO unit test for the property 'StateChangedAt'
        }
        /// <summary>
        /// Test the property 'Consideration'
        /// </summary>
        [Fact]
        public void ConsiderationTest()
        {
            // TODO unit test for the property 'Consideration'
        }
        /// <summary>
        /// Test the property 'Plan'
        /// </summary>
        [Fact]
        public void PlanTest()
        {
            // TODO unit test for the property 'Plan'
        }
        /// <summary>
        /// Test the property 'SmartOverride'
        /// </summary>
        [Fact]
        public void SmartOverrideTest()
        {
            // TODO unit test for the property 'SmartOverride'
        }

    }

}
