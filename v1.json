openapi: 3.0.3
info:
  title: Enode API
  version: 1.17.0
  description: |
    The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.

    The API has a RESTful architecture and utilizes OAuth2 authorization.
  license:
    name: Enode Commercial License
    url: https://enode.io
tags:
  - name: Charging Locations
    description: A user creates charging Locations to denote locations where they pay for the power used to charge their vehicle, heat their home, etc. Smart Charging is active at these locations only.
  - name: Webhooks
    description: |-
      Webhooks are a mechanism that allows your server to receive notifications of events from the Enode system.

      Currently, there is only one webhook available - a preconfigured webhook called `Firehose` that reports all supported events occurring within the system. You can configure it using the [Update Firehose Webhook](/api/reference#putWebhooksFirehose) endpoint.

      See the related guide for more information about timeouts, failures, and retry logic: [Using Webhooks](/docs/webhooks)
  - name: Me
    description: The `Me` endpoint returns metadata about the authenticated User.
  - name: Schedules
    description: |-
      A Schedule is a policy that targets a specific chargeable (vehicle or charger) at a specific Charging Location. It describes whether the target should be charging at any given point in time. This value is called `shouldCharge`. 

      More information and examples are available in the [Using Schedules](/docs/scheduling) guide.
  - name: HVAC
    description: HVAC units (heaters, heat pumps, air conditioning, thermostats, etc.) are controlled by altering the mode & target setpoints. This can be done directly using the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) endpoint, [Return to Schedule](/api/reference#postSetHvacFollowSchedule), or via [Schedules](/docs/scheduling).
  - name: Chargers
    description: EV Chargers provide charging data and can be controlled through the [Control Charger endpoint](/api/reference#controlChargerCharging) and through [Schedules](/docs/scheduling)
  - name: Vehicles
    description: EVs provide charge, location, and odometer data. Vehicles can be controlled either directly using the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint, or through [Smart Charging](/docs/smart-charging/introduction) and [Schedules](/docs/scheduling).
  - name: Solar inverters
    description: Solar inverters can be queried for current production state
  - name: Service Health
    description: Endpoints that return information about the health of Enode and our integrations.
  - name: Statistics
    description: Endpoints returning timeseries data collected from any linked devices.
  - name: User Management
    description: Endpoints used to link and unlink users or vendors.
  - name: Tariffs
    description: Endpoints used to submit pricing information to Enode.
paths:
  /chargers:
    get:
      summary: List Chargers
      operationId: listChargers
      description: List all available Chargers for the User.
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargerList'
  /chargers/{chargerId}:
    get:
      summary: Get Charger
      operationId: getCharger
      parameters:
        - $ref: '#/components/parameters/ChargerPathId'
        - $ref: '#/components/parameters/ChargerFieldParameter'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charger'
  /chargers/{chargerId}/charging:
    post:
      summary: Control Charging
      operationId: controlChargerCharging
      description: |-
        Register a request for a charger to start or stop charging. We retry sending the command until the charger's `chargeStateIsCharging` field transitions to the expected state. Note that this API request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [charger action endpoint](/api/reference#getChargersAction).

         This endpoint returns an error with status code 422 if the charger is controlled by a schedule. To restore user control, either disable the schedule or use our [Smart Override API](/api/reference#chargerCreateSmartOverride) to temporarily enable charging.
      parameters:
        - description: ID of the Charger
          name: chargerId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  $ref: '#/components/schemas/ChargingAction'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Resulting charge action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAction'
        '422':
          description: Charger controlled by a Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /chargers/actions/{vendorActionId}:
    get:
      summary: Get Charge Action
      description: Returns the current state of the requested action.
      operationId: getChargersAction
      parameters:
        - $ref: '#/components/parameters/ActionPathId'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DEPRECATED_VendorAction'
        '404':
          description: Action not found.
  /chargers/{chargerId}/smart-override:
    post:
      summary: Create Smart Override
      operationId: chargerCreateSmartOverride
      description: Overrides an active smart feature by forcing the charger to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the charger stops charging, or until the [Delete Smart Override](/api/reference#chargerEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the charger. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
      parameters:
        - $ref: '#/components/parameters/ChargerPathId'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
    delete:
      summary: End Smart Override
      operationId: chargerEndSmartOverride
      description: Ends any active Smart Override for the charger specified by `chargerId`. If previously configured, Schedules or Smart Charging will resume control over the target charger. Note that this does not mean the charger will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
      parameters:
        - $ref: '#/components/parameters/ChargerPathId'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
        '404':
          description: No Smart Override Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /chargers/{chargerId}/external-start:
    post:
      summary: Create External Start
      operationId: chargerCreateExternalStart
      deprecated: true
      description: Deprecated. Replaced by [Create Smart Override](/api/reference#chargerCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
      parameters:
        - $ref: '#/components/parameters/ChargerPathId'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
    delete:
      summary: End External Start
      operationId: chargerEndExternalStart
      deprecated: true
      description: Deprecated. Replaced by [Delete Smart Override](/api/reference#chargerEndSmartOverride). The new name better reflects the functionality this endpoint offers.
      parameters:
        - $ref: '#/components/parameters/ChargerPathId'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
        '404':
          description: No External Start Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /chargers/{chargerId}/max-current:
    post:
      summary: Set Max Current
      operationId: postSetChargerMaxCurrent
      description: Register a request for a change of the `maxCurrent` field on a charger. We retry sending the command until the charger's `maxCurrent` field transitions to the expected value. Note that this request will complete before any commands are sent to the charger. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling [Charger Get Action](/api/reference#getChargersAction).
      parameters:
        - $ref: '#/components/parameters/ChargerPathId'
      tags:
        - Chargers
      security:
        - ClientAccessToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TargetMaxCurrent'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxCurrentAction'
  /charging-locations:
    get:
      summary: List Charging Locations
      operationId: getCharginglocations
      description: Returns a list of Charging Locations registered to the User
      tags:
        - Charging Locations
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingLocationList'
    post:
      summary: Create Charging Location
      operationId: postCharginglocations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargingLocationCreateRequest'
      tags:
        - Charging Locations
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingLocationResponse'
  /charging-locations/{chargingLocationId}:
    get:
      summary: Get Charging Location
      operationId: getCharginglocationsCharginglocationid
      parameters:
        - description: ID of the Charging Location.
          x-format:
            guid: true
          name: chargingLocationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Charging Locations
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingLocationResponse'
    delete:
      summary: Delete Charging Location
      operationId: deleteCharginglocationsCharginglocationid
      description: Delete a Charging Location.
      parameters:
        - description: ID of the Charging Location.
          x-format:
            guid: true
          name: chargingLocationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Charging Locations
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingLocationResponse'
    put:
      summary: Update Charging Location
      operationId: putCharginglocationsCharginglocationid
      description: Updates a charging location with new configuration.
      parameters:
        - description: ID of the Charging Location
          x-format:
            guid: true
          name: chargingLocationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargingLocationUpdateRequest'
      tags:
        - Charging Locations
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingLocationResponse'
  /charging-locations/{chargingLocationId}/tariff:
    put:
      summary: Associate Charging Location With Tariff
      operationId: associateChargingLocationWithTariff
      description: Associates a tariff to a charging location and specifies time intervals for the tariff's rates at this location. Further requests will overwrite the existing intervals for the specified tariffId. Multiple tariffs can be associated with a Charging Location. To disassociate a particular tariff, send a request with the tariffId and an empty tariffInterval list.
      parameters:
        - description: ID of the Charging Location
          x-format:
            guid: true
          name: chargingLocationId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargingLocationTariffInterval'
      tags:
        - Charging Locations
        - Tariffs
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: Successful
          content: {}
        '400':
          description: Invalid tariffId, invalid rate name, or incomplete interval series.
          content:
            application/json: {}
        '404':
          description: Charging Location not found.
          content: {}
    get:
      summary: Get Charging Location Tariff
      operationId: getChargingLocationTariff
      description: Get Tariff intervals for a given charging location.
      parameters:
        - description: ID of the Charging Location
          x-format:
            guid: true
          name: chargingLocationId
          in: path
          required: true
          schema:
            type: string
      tags:
        - Charging Locations
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingLocationTariff'
        '400':
          description: Invalid tariffId or rate name, or incomplete interval series
          content:
            application/json: {}
        '404':
          description: Charging Location not found
          content: {}
  /schedules:
    get:
      summary: List Schedules
      operationId: getSchedules
      description: Returns a list of Schedules registered to the User.
      tags:
        - Schedules
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleResponse'
    post:
      summary: Create Schedule
      operationId: createSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      tags:
        - Schedules
      security:
        - ClientAccessToken: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
  /schedules/{scheduleId}:
    get:
      summary: Get Schedule
      operationId: getSchedule
      parameters:
        - $ref: '#/components/parameters/PathScheduleId'
      tags:
        - Schedules
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
    delete:
      summary: Delete Schedule
      operationId: deleteSchedule
      description: Delete a Schedule
      parameters:
        - $ref: '#/components/parameters/PathScheduleId'
      tags:
        - Schedules
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: No Content
          content: {}
    put:
      summary: Update Schedule
      operationId: updateSchedule
      description: Does a partial update of a schedule.
      parameters:
        - $ref: '#/components/parameters/PathScheduleId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialSchedule'
      tags:
        - Schedules
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleResponse'
  /schedules/{scheduleId}/status:
    get:
      summary: Get Schedule Status
      operationId: getScheduleStatus
      parameters:
        - $ref: '#/components/parameters/PathScheduleId'
      tags:
        - Schedules
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleStatusResponse'
  /me:
    get:
      summary: Get My User
      operationId: getMe
      description: Returns metadata about the authenticated User, including a list of vendors for which the User has provided credentials.
      tags:
        - Me
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
  /me/vendors/{vendor}:
    delete:
      summary: Disconnect Vendor
      operationId: disconnectVendor
      description: |-
        Disconnect a single Vendor from the User's account.

        All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.
      parameters:
        - description: Vendor to be unlinked
          name: vendor
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AnyVendor'
      tags:
        - Me
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: No Content
          content: {}
  /vehicles:
    get:
      summary: List Vehicles
      operationId: getVehicles
      description: |-
        List all available Vehicles for the User.

        If you already know the ID of a vehicle you want to fetch, it is recommended to fetch it using the more performant [Get Vehicle](/api/reference#getVehiclesVehicleid) method.
      parameters:
        - $ref: '#/components/parameters/VehicleFieldParameter'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListofVehicles'
  /health/ready:
    get:
      summary: Check Service Readiness
      operationId: getHealthReady
      security: []
      description: Gets the combined health status of the service and all functionalities and dependencies.
      tags:
        - Service Health
      responses:
        '204':
          description: All functionalities are operating nominally.
          content: {}
        '503':
          description: At least one functionality of the system is not operating nominally.
          content: {}
  /health/vehicles:
    get:
      summary: Check Available Vehicle Vendors
      operationId: getHealthVehicleVendors
      description: Lists the available vehicle vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog=glossary&value=activation-required).
      tags:
        - Service Health
      security: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                example:
                  - vendor: TESLA
                    displayName: Tesla
                    status: READY
                  - vendor: BMW
                    displayName: BMW
                    status: READY
                  - vendor: AUDI
                    displayName: Audi
                    status: READY
                items:
                  type: object
                  properties:
                    vendor:
                      $ref: '#/components/schemas/VehicleVendor'
                    displayName:
                      type: string
                      description: A formatted and properly cased vendor brand name, suitable for reading by humans.
                      example: SEAT
                    portalName:
                      type: string
                      description: The name of the first party service or app that the user normally logs into.
                    status:
                      type: string
                      description: Ready-state of the Vendor. Currently always `READY`.
                      example: READY
                      enum:
                        - READY
                        - ELEVATED_ERROR_RATE
                        - OUTAGE
  /health/chargers:
    get:
      summary: Check Available Charger Vendors
      operationId: getHealthChargerVendors
      description: Lists the available charger vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog=glossary&value=activation-required).
      tags:
        - Service Health
      security: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                example:
                  - vendor: EASEE
                    displayName: Easee
                    status: READY
                  - vendor: WALLBOX
                    displayName: Wallbox
                    status: READY
                  - vendor: ZAPTEC
                    displayName: Zaptec
                    status: READY
                  - vendor: EO
                    displayName: EO
                    status: READY
                items:
                  type: object
                  properties:
                    vendor:
                      $ref: '#/components/schemas/ChargerVendor'
                    displayName:
                      type: string
                      description: A formatted and properly cased vendor brand name, suitable for reading by humans.
                      example: Easee
                    portalName:
                      type: string
                      description: The name of the first party service or app that the user normally logs into.
                    status:
                      type: string
                      description: Ready-state of the Vendor. Currently always `READY`.
                      example: READY
                      enum:
                        - READY
                        - ELEVATED_ERROR_RATE
                        - OUTAGE
  /health/hvacs:
    get:
      summary: Check Available Hvac Vendors
      operationId: getHealthHvacVendors
      description: Lists the available HVAC vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog=glossary&value=activation-required).
      tags:
        - Service Health
      security: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                example:
                  - vendor: MILL
                    displayName: Mill
                    portalName: Mill
                    status: READY
                items:
                  type: object
                  properties:
                    vendor:
                      $ref: '#/components/schemas/HVACVendor'
                    displayName:
                      type: string
                      description: A formatted and properly cased vendor brand name, suitable for reading by humans.
                      example: Mill
                    portalName:
                      type: string
                      description: The name of the first party service or app that the user normally logs into.
                    status:
                      type: string
                      description: Ready-state of the Vendor. Currently always `READY`.
                      example: READY
                      enum:
                        - READY
                        - ELEVATED_ERROR_RATE
                        - OUTAGE
  /health/inverters:
    get:
      summary: Check Available Inverter Vendors
      operationId: getHealthInverterVendors
      description: Lists the available inverter vendors. If you authenticate with a client or link token, we also include the activated vendors that your client has access to. Learn more about [vendors requiring activation](https://developers.enode.io/api/capabilities/vehicles?dialog=glossary&value=activation-required).
      tags:
        - Service Health
      security: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                example:
                  - vendor: SOLAREDGE
                    displayName: Solar Edge
                    status: READY
                  - vendor: SMA
                    displayName: SMA
                    status: READY
                  - vendor: SOLIS
                    displayName: Solis
                    status: READY
                  - vendor: FRONIUS
                    displayName: Fronius
                    status: READY
                items:
                  type: object
                  properties:
                    vendor:
                      $ref: '#/components/schemas/InverterVendor'
                    displayName:
                      type: string
                      description: A formatted and properly cased vendor brand name, suitable for reading by humans.
                      example: Solis
                    portalName:
                      type: string
                      description: The name of the first party service or app that the user normally logs into.
                    status:
                      type: string
                      description: Ready-state of the Vendor. Currently always `READY`.
                      example: READY
                      enum:
                        - READY
                        - ELEVATED_ERROR_RATE
                        - OUTAGE
  /statistics/charging:
    get:
      summary: Get User Charging Statistics
      operationId: getStatisticsCharging
      description: |-
        Returns a normalized time series of statistics about power consumption and price for the User.

        If Smart Charging has shifted the consumption, the 'non-smart' price fields will show what the consumption would have cost if it had happened at the default time. The difference between the two is provided by the `estimatedSavings` field for convenience. `<CURRENCY>` is an ISO4217 Alpha-3 currency code that is determined by client-wide configuration or the currency code provided during price data ingestion (such as Tariffs).
      parameters:
        - description: The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified.
          name: resolution
          in: query
          schema:
            type: string
            enum:
              - QUARTER_HOUR
              - HALF_HOUR
              - HOUR
              - DAY
              - WEEK
              - MONTH
              - YEAR
            default: DAY
        - description: 'Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: `2021-03-21T00:25:43.511Z`'
          name: startDate
          in: query
          required: true
          schema:
            type: string
        - description: 'Latest date to include in the response (defaults to current date/time) in ISO format. Example: `2021-03-21T00:25:43.511Z`'
          name: endDate
          in: query
          schema:
            type: string
        - description: Get statistics for this hardware type.
          name: type
          in: query
          schema:
            $ref: '#/components/schemas/ConsumingVendorType'
        - description: Filter statistics to only include a specific entity. Hardware category of the entity must match the `type` parameter.
          name: id
          in: query
          schema:
            type: string
            minLength: 1
        - description: Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing `utcOffset` instead aligns these to the viewer's timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid.
          name: utcOffset
          in: query
          example: '-8'
          x-unit: hours
          schema:
            type: number
            format: float
        - description: Filter statistics to only include this charging location.
          x-format:
            guid: true
          name: chargingLocationId
          in: query
          schema:
            type: string
        - name: vehicleId
          in: query
          deprecated: true
          schema:
            type: string
      tags:
        - Statistics
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsChargingTimeseries'
  /statistics/charging/sessions:
    get:
      summary: Get User Sessions Charging Statistics
      operationId: getStatisticsChargingSessions
      description: Returns a list of statistics about power consumption and price for the User binned by sessions.
      parameters:
        - description: Get statistics for this hardware type.
          name: targetType
          in: query
          schema:
            $ref: '#/components/schemas/ConsumingVendorType'
        - description: 'Earliest date to include in the response in ISO format. Example: `2021-03-21T00:25:43.511Z`'
          name: startDate
          in: query
          required: true
          schema:
            type: string
        - description: 'Latest date to include in the response (defaults to current date/time) in ISO format. Example: `2021-03-21T00:25:43.511Z`'
          name: endDate
          in: query
          schema:
            type: string
        - description: Filter statistics to only include a specific entity.
          name: targetId
          in: query
          schema:
            type: string
            minLength: 1
        - description: Filter statistics to only include this charging location
          name: chargingLocationId
          in: query
          schema:
            type: string
      tags:
        - Statistics
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsChargingSessionTimeseries'
  /statistics/production:
    get:
      summary: Get User Production Statistics
      operationId: getStatisticsProduction
      description: Returns a normalized time series of statistics about power production and price for the User.
      parameters:
        - description: The unit of time the data will be cut into before aggregate statistics are applied. Each entry in the response array corresponds to aggregated data of the time range specified.
          name: resolution
          in: query
          schema:
            type: string
            enum:
              - QUARTER_HOUR
              - HALF_HOUR
              - HOUR
              - DAY
              - WEEK
              - MONTH
              - YEAR
            default: DAY
        - description: 'Earliest date to include in the response in ISO format. Cannot be greater than endDate. Example: `2021-03-21T00:25:43.511Z`'
          name: startDate
          in: query
          required: true
          schema:
            type: string
        - description: 'Latest date to include in the response (defaults to current date/time) in ISO format. Example: `2021-03-21T00:25:43.511Z`'
          name: endDate
          in: query
          schema:
            type: string
        - description: Get statistics for this hardware type.
          name: type
          in: query
          schema:
            $ref: '#/components/schemas/ProducingVendorType'
        - description: Filter statistics to only include a specific entity. Hardware category of the entity must match the `type` parameter.
          name: id
          in: query
          schema:
            type: string
            minLength: 1
        - description: Offset (in hours) from UTC of the timezone from which the statistics should be viewed. By default, all returned timestamps are in UTC, and period boundaries (day, week, month, year) used in the aggregation are calculated in UTC. Providing `utcOffset` instead aligns these to the viewer's timezone so that the timestamps and period boundaries fall where the viewer expects them to. Positive, negative, and fractional values are valid.
          name: utcOffset
          in: query
          example: '-8'
          x-unit: hours
          schema:
            type: number
            format: float
        - description: Filter statistics to only include this charging location.
          x-format:
            guid: true
          name: chargingLocationId
          in: query
          schema:
            type: string
      tags:
        - Statistics
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsProductionTimeseries'
  /vehicles/{vehicleId}:
    get:
      summary: Get Vehicle
      operationId: getVehiclesVehicleid
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
        - $ref: '#/components/parameters/VehicleFieldParameter'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
  /vehicles/{vehicleId}/charging:
    post:
      summary: Control Charging
      operationId: postVehiclesVehicleidCharging
      description: |-
        Register a request for a vehicle to start or stop charging. We retry sending the command until the vehicle's `chargeStateIsCharging` field transitions to the expected state. Note that this API request will complete before any commands are sent to the vehicle. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [vehicle action endpoint](/api/reference#getVehiclesAction).

         This endpoint returns an error with status code 422 if the vehicle is controlled by a schedule or has an active smart charging plan. To restore user control, either disable the schedule, disable smart charging, or use our [Smart Override API](/api/reference#vehicleCreateSmartOverride) to temporarily enable charging.
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeActionPayload'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Resulting charge action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAction'
        '422':
          description: Vehicle controlled by a Schedule or has active Smart Charging Plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /vehicles/actions/{vendorActionId}:
    get:
      summary: Get Charge Action
      description: Returns the current state of the requested action.
      operationId: getVehiclesAction
      parameters:
        - $ref: '#/components/parameters/ActionPathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAction'
        '404':
          description: Action not found.
  /vehicles/{vehicleId}/smart-charging-policy:
    get:
      summary: Get Vehicle Smart Charging Policy
      description: Get a vehicle's [Smart Charging](/docs/smart-charging/introduction) policy
      operationId: getVehiclesVehicleidSmartchargingpolicy
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - isEnabled
                      - deadline
                      - minimumChargeLimit
                  - $ref: '#/components/schemas/VehicleSmartChargingPolicy'
    put:
      summary: Update Vehicle Smart Charging Policy
      operationId: updateVehicleSmartChargingPolicy
      description: Updates the [Smart Charging](/docs/smart-charging/introduction) policy for a vehicle
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleSmartChargingPolicy'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - isEnabled
                      - deadline
                      - minimumChargeLimit
                  - $ref: '#/components/schemas/VehicleSmartChargingPolicy'
  /vehicles/{vehicleId}/smart-charging-status:
    get:
      summary: Get Vehicle Smart Charging Status
      description: Every vehicle in Enode has a [SmartChargingStatus](/docs/smart-charging/introduction) object that describes the vehicle in terms of smart charging.
      operationId: getVehiclesVehicleidSmartchargingstatus
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    required:
                      - externalStart
                  - $ref: '#/components/schemas/VehicleSmartChargingStatus'
  /vehicles/{vehicleId}/smart-charging-plans/{smartChargingPlanId}:
    get:
      summary: Get Smart Charging Plan
      description: |-
        Check status of current or historical Smart Charging Plan for a Vehicle. Returns a [Smart Charging](/docs/smart-charging/introduction) Plan for this vehicle.

        To fetch the most recently created plan, call the endpoint with `smartChargingPlanId` set to `latest`.
      operationId: getVehiclesVehicleidSmartchargingplans
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
        - $ref: '#/components/parameters/SmartChargingPlanPathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleSmartChargingPlan'
  /vehicles/{vehicleId}/smart-override:
    post:
      summary: Create Smart Override
      operationId: vehicleCreateSmartOverride
      description: Overrides an active smart feature by forcing the vehicle to start charging. This feature is meant to be used in situations where the user wants to charge immediately without disabling other smart features. The override remains active until the vehicle stops charging, or until the [Delete Smart Override](/api/reference#vehicleEndSmartOverride) endpoint is called. When the override ends, the overriden smart feature will regain control of the vehicle. This endpoint should not be used for standard charge control, use the [Control Charging](/api/reference#postVehiclesVehicleidCharging) endpoint instead.
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
    delete:
      summary: End Smart Override
      operationId: vehicleEndSmartOverride
      description: Ends any active Smart Override for the vehicle specified by `vehicleId`. If previously configured, Schedules or Smart Charging will resume control over the target vehicle. Note that this does not mean the vehicle will stop charging, only that it will return to the state expected by the active Schedule or Smart Charging Plan.
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
        '404':
          description: No Active Smart Override Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /vehicles/{vehicleId}/external-start:
    post:
      summary: Create External Start
      operationId: vehicleCreateExternalStart
      deprecated: true
      description: Deprecated. Replaced by [Create Smart Override](/api/reference#vehicleCreateSmartOverride). The new name better reflects the functionality this endpoint offers.
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
    delete:
      summary: End External Start
      operationId: vehicleEndExternalStart
      deprecated: true
      description: Deprecated. Replaced by [Delete Smart Override](/api/reference#vehicleEndSmartOverride). The new name better reflects the functionality this endpoint offers.
      parameters:
        - $ref: '#/components/parameters/VehiclePathId'
      tags:
        - Vehicles
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartOverrideResponse'
        '404':
          description: No External Start Exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /users/{userId}/link:
    post:
      summary: Link User
      operationId: postUsersUseridLink
      description: Creates an Enode Link session attached to the provided User ID. If this User does not exist, it will be created. The returned `linkState` gives the User short-lived (24hs) access to Enode Link. A URL for Enode Link for the user to initiate asset linking is also returned.
      parameters:
        - description: ID of the User
          name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkUserOptions'
      tags:
        - User Management
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkUserResponse'
        '403':
          description: Connections limit reached for this clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /users/{userId}:
    delete:
      summary: Unlink User
      operationId: deleteUsersUserid
      description: Deletes a User and all of their data permanently and invalidates any associated sessions, authorization codes, and access/refresh tokens.
      parameters:
        - description: ID of the User
          name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      tags:
        - User Management
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: No Content
          content: {}
  /users/{userId}/authorization:
    delete:
      summary: Deauthorize User
      operationId: deleteUsersUseridAuthorization
      description: |-
        Deletes the User's stored vendor authorizations and credentials, invalidates any associated sessions, authorization codes, and access/refresh tokens.

        All other User data is retained, and if the User is sent through the Link User flow in the future, their account will be just as they left it.

        No webhook events will be generated for a deauthorized user.
      parameters:
        - description: ID of the User
          name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 1
      tags:
        - User Management
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: No Content
          content: {}
  /webhooks/firehose/test:
    post:
      summary: Test Firehose Webhook
      operationId: postWebhooksFirehoseTest
      description: Trigger a  "enode:firehose:test" payload to be sent to your configured Firehose Webhook URL. This will reset your webhook to a healthy state on success.
      tags:
        - Webhooks
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestFirehoseWebhook'
  /webhooks/firehose:
    put:
      summary: Update Firehose Webhook
      operationId: putWebhooksFirehose
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFirehoseWebhookPayload'
      tags:
        - Webhooks
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: No Content
          content: {}
        '404':
          description: Webhook not found
          content: {}
    delete:
      summary: Delete Firehose Webhook
      operationId: deleteWebhooksFirehose
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFirehoseWebhook'
      tags:
        - Webhooks
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: No Content
          content: {}
        '404':
          description: Webhook not found
          content: {}
  /tariffs/{tariffId}:
    put:
      summary: Send Tariff information
      operationId: sendTariffInformation
      description: Set a list of rates for a given `tariffId`. If previous data exists for a given `tariffId`, it will be overwritten. These tariffs are used in our Statistics and Smart Charging features.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tariff'
      parameters:
        - $ref: '#/components/parameters/TariffPathId'
      tags:
        - Tariffs
      security:
        - ClientAccessToken: []
      responses:
        '204':
          description: Successfully updated.
          content: {}
  /hvacs:
    get:
      summary: List HVAC units
      operationId: listHVACs
      tags:
        - HVAC
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HVACList'
  /hvacs/{hvacId}/temperature:
    post:
      deprecated: true
      summary: Set HVAC Temperature
      operationId: postSetHvacTargetTemperature
      description: |-
        This endpoint has been replaced with the [Set Permanent Hold](/api/reference#postSetHvacPermanentHold) and [Follow Schedule] endpoints. A future release will remove this endpoint.

        Register a request for a change of the `targetTemperature` field on an HVAC unit. We retry sending the command until the HVAC unit's `targetTemperature` field transitions to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. There can only be one vendor action active for any one target id at a time. If a new action is created, the old action transitions to the `CANCELLED` state. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).

        This endpoint returns an error with status code 422 if the HVAC unit is controlled by a schedule. To restore user control you must first disable the schedule.
      parameters:
        - $ref: '#/components/parameters/HvacPathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
      tags:
        - HVAC
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Resulting HVAC action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HvacAction'
        '422':
          description: HVAC unit controlled by a Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /hvacs/{hvacId}/permanent-hold:
    post:
      summary: Set HVAC Mode as Permanent Hold
      operationId: postSetHvacPermanentHold
      description: Tell an HVAC unit to enter a permanent hold. Only available if `PERMANENT` is present in the target's `capabilities.capableHoldType`. We retry sending the command until the HVAC unit's `target` field transition to the expected value. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
      parameters:
        - $ref: '#/components/parameters/HvacPathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HVACSetPermanentHoldPayload'
      tags:
        - HVAC
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Resulting HVAC action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HvacAction'
        '422':
          description: HVAC controlled by an Enode Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /hvacs/{hvacId}/follow-schedule:
    post:
      summary: Set HVAC to follow device schedule
      operationId: postSetHvacFollowSchedule
      description: Tell an HVAC unit to follow the schedule set on the device. Only available if `SCHEDULED` is present in the target's `capabilities.capableHoldType`. This endpoint can be used to cancel permanent holds. We retry sending the command until the HVAC unit's fields transition to the expected values. Note that this request will complete before any commands are sent to the HVAC unit. You may react to transitions by listening for the `user:vendor-action:updated` webhook event or polling the [HVAC action endpoint](/api/reference#getHvacsAction).
      parameters:
        - $ref: '#/components/parameters/HvacPathId'
      tags:
        - HVAC
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Resulting HVAC action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HvacAction'
        '422':
          description: HVAC controlled by an Enode Schedule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /hvacs/actions/{vendorActionId}:
    get:
      summary: Get Action
      description: Returns the current state of the requested action.
      operationId: getHvacsAction
      parameters:
        - $ref: '#/components/parameters/ActionPathId'
      tags:
        - HVAC
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HvacAction'
        '404':
          description: Action not found.
  /hvacs/{hvacId}:
    get:
      summary: Get HVAC Unit
      operationId: getHVAC
      parameters:
        - $ref: '#/components/parameters/HvacPathId'
      tags:
        - HVAC
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HVAC'
    put:
      summary: Set HVAC Location
      operationId: updateHVAC
      description: Update the `chargingLocationId` field on an HVAC device.
      parameters:
        - $ref: '#/components/parameters/HvacPathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HVACUpdatePayload'
      tags:
        - HVAC
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successfully updated HVAC unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HVAC'
  /inverters:
    get:
      summary: List Solar inverter
      operationId: listInverters
      tags:
        - Solar inverters
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InverterList'
  /inverters/{inverterId}:
    get:
      summary: Get Solar inverter
      operationId: getInverter
      parameters:
        - $ref: '#/components/parameters/InverterPathId'
        - $ref: '#/components/parameters/InverterFieldParameter'
      tags:
        - Solar inverters
      security:
        - ClientAccessToken: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inverter'
servers:
  - url: https://enode-api.production.enode.io
components:
  securitySchemes:
    ClientAccessToken:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://oauth.production.enode.io/oauth2/token
          scopes: {}
      description: |
        A `ClientAccessToken` is obtained via the [OAuth 2.0 Client Credentials grant](https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/) and carries authorization to access all functionalities and data in your Enode account.

        Full details at [The ClientAccessToken](/api/reference#getting-an-access-token)
  schemas:
    ChargerList:
      type: string
      description: Charger IDs
    ChargerVendor:
      type: string
      title: Charger Vendor
      description: Charger Vendor
      enum:
        - ZAPTEC
        - EASEE
        - WALLBOX
        - EO
        - CHARGEAMPS
        - EVBOX
      example: EASEE
    ChargerChargeState:
      type: object
      required:
        - isPluggedIn
        - isCharging
        - chargeRate
        - lastUpdated
        - maxCurrent
      properties:
        isPluggedIn:
          type: boolean
          description: Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)
          example: true
          nullable: true
        isCharging:
          type: boolean
          description: Current charging status
          example: false
          nullable: true
        chargeRate:
          type: number
          description: |-
            The current charge rate in kW.

            This property is only available when the charger is actively charging a vehicle, and is `null` any other time.
          example: 40.1
          minimum: 0
          nullable: true
        lastUpdated:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp of last received charge state update
          example: '2020-01-07T16:21:76Z'
          nullable: true
        maxCurrent:
          type: number
          description: Desired max current in ampere, if set
          example: 20
          nullable: true
    ChargerInformation:
      type: object
      description: Descriptive information about the Charger
      properties:
        id:
          type: string
          description: Charger ID
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
        brand:
          type: string
          description: Charger brand
          example: Easee
        model:
          type: string
          description: Charger model
          example: Home
        year:
          type: integer
          description: Charger production year
          example: 2020
          nullable: true
    Capability:
      type: object
      nullable: true
      properties:
        isCapable:
          type: boolean
          description: The entity is fully capable of providing this data or functionality. If false, support is partial or missing.
          example: true
        interventionIds:
          type: array
          description: IDs of interventions the user can make to alter the availability of this capability. See [the interventions reference](/docs/connections/interventions#available-interventions) for all possible values.
          items:
            type: string
            example: 0defa374-8a1a-4eb1-a85f-b7cb09501097
    ChargerCapabilities:
      type: object
      description: A collection of descriptors that describe the capabilities of this specific charger
      properties:
        information:
          description: Full availability of information data.
          allOf:
            - $ref: '#/components/schemas/Capability'
        chargeState:
          description: Full availability of chargeState data.
          allOf:
            - $ref: '#/components/schemas/Capability'
        startCharging:
          description: Supports START charging command.
          allOf:
            - $ref: '#/components/schemas/Capability'
        stopCharging:
          description: Supports STOP charging command.
          allOf:
            - $ref: '#/components/schemas/Capability'
        setMaxCurrent:
          description: Ability to set the max charge rate.
          allOf:
            - $ref: '#/components/schemas/Capability'
    Charger:
      type: object
      required:
        - id
        - vendor
        - lastSeen
        - isReachable
        - chargingLocationId
        - chargeState
        - information
        - capabilities
      properties:
        id:
          type: string
          description: Charger ID
        vendor:
          $ref: '#/components/schemas/ChargerVendor'
        lastSeen:
          type: string
          format: date-time
          description: The last time the charger was successfully communicated with
          nullable: true
        isReachable:
          type: boolean
          description: Whether live data from the charger is currently fetchable from Enode's perspective. This 'reachability' may refer to reading from a cache operated by the charger's cloud service if that service has determined that its cache is valid.
        chargingLocationId:
          type: string
          description: ID of the charging location the charger is currently positioned at (if any).
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
          nullable: true
          x-format:
            guid: true
        chargeState:
          $ref: '#/components/schemas/ChargerChargeState'
        information:
          $ref: '#/components/schemas/ChargerInformation'
        capabilities:
          $ref: '#/components/schemas/ChargerCapabilities'
    ChargingAction:
      type: string
      description: Kind of action
      example: START
      enum:
        - START
        - STOP
    ReadonlyUUIDv4:
      type: string
      format: uuid
      example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
    ArbitraryId:
      type: string
      minLength: 1
      example: 8d90101b3f2f
    ChargeableVendorType:
      type: string
      enum:
        - vehicle
        - charger
    Timestamp:
      type: string
      format: date-time
      description: ISO8601 UTC timestamp
      example: '2020-04-07T17:04:26Z'
    VendorActionState:
      description: Current state of the charge action.
      anyOf:
        - type: string
          title: PENDING
          description: The initial state. We are actively retrying commands and polling the chargeable for changes in `chargeStateIsCharging`
        - type: string
          title: CONFIRMED
          description: The chargeable has transitioned to the expected `chargeStateIsCharging` value.
        - type: string
          title: FAILED
          description: The chargeable failed to respond to our attempts to start or stop charging within 30 minutes. We have given up sending actions to the device.
        - type: string
          title: CANCELLED
          description: Another charge action was sent to the same device, cancelling this one.
    ChargeAction:
      type: object
      required:
        - id
        - targetId
        - targetType
        - kind
        - createdAt
        - updatedAt
        - completedAt
        - state
        - entityId
        - entityType
        - chargeableId
        - chargeableType
      properties:
        id:
          allOf:
            - type: string
              description: The ID of the action.
            - $ref: '#/components/schemas/ReadonlyUUIDv4'
        targetId:
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
            - type: string
              description: ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling.
        targetType:
          $ref: '#/components/schemas/ChargeableVendorType'
        kind:
          $ref: '#/components/schemas/ChargingAction'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
        completedAt:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable.
          example: '2020-04-07T17:04:26Z'
        state:
          $ref: '#/components/schemas/VendorActionState'
        entityId:
          type: string
          deprecated: true
        entityType:
          type: string
          deprecated: true
        chargeableId:
          type: string
          deprecated: true
        chargeableType:
          type: string
          deprecated: true
    Problem:
      type: object
      title: Problem
      required:
        - type
        - title
        - detail
      description: Standard Problem Error
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
    VendorType:
      type: string
      example: vehicle
      enum:
        - vehicle
        - charger
        - hvac
        - inverter
    DEPRECATED_TargetTemperature:
      deprecated: true
      type: object
      description: Replaced with `coolSetpoint` and `heatSetpoint`. A future release will remove this field. Target temperature for a HVAC device.
      required:
        - temperature
        - deadband
      properties:
        temperature:
          type: number
          nullable: true
          description: Desired temperature
          example: 22
        deadband:
          type: number
          nullable: true
          description: |-
            Size of the optional deadband centered around `temperature`.

            For example, with a `temperature` of 22.0 and a `deadband` of 4.0, an HVAC unit will receive a heating setpoint of 20.0 and a cooling setpoint of 24.0
          example: 4
      additionalProperties: false
    HVACSetPermanentHoldPayload:
      oneOf:
        - type: object
          title: 'OFF'
          description: Target mode for an HVAC device
          required:
            - mode
          additionalProperties: false
          properties:
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - 'OFF'
              example: 'OFF'
        - type: object
          title: AUTO
          description: Target mode for an HVAC device
          required:
            - mode
            - heatSetpoint
            - coolSetpoint
          additionalProperties: false
          properties:
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - AUTO
              example: AUTO
            heatSetpoint:
              type: number
              description: Desired heat setpoint, required when `mode` is `HEAT` or `AUTO`.
              example: 19
            coolSetpoint:
              type: number
              description: Desired cool setpoint, required when `mode` is `COOL` or `AUTO`. If both setpoints are specified, `coolSetpoint` must be larger than `heatSetpoint`.
              example: 24
        - type: object
          title: HEAT
          description: Target mode for an HVAC device
          required:
            - mode
            - heatSetpoint
          additionalProperties: false
          properties:
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - HEAT
              example: HEAT
            heatSetpoint:
              type: number
              description: Desired heat setpoint, required when `mode` is `HEAT` or `AUTO`.
              example: 19
        - type: object
          title: COOL
          description: Target mode for an HVAC device
          required:
            - mode
            - coolSetpoint
          additionalProperties: false
          properties:
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - COOL
              example: COOL
            coolSetpoint:
              type: number
              description: Desired cool setpoint, required when `mode` is `COOL` or `AUTO`.
              example: 19
    TargetMaxCurrent:
      type: object
      description: Target maximum current for charger
      required:
        - maxCurrent
      properties:
        maxCurrent:
          type: number
          description: Desired max current in ampere
          example: 20
    LegacyTarget:
      type: object
      properties:
        legacy:
          type: boolean
          default: true
    VendorAction:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - completedAt
        - state
      properties:
        id:
          allOf:
            - type: string
              description: The ID of the action.
            - $ref: '#/components/schemas/ReadonlyUUIDv4'
        targetId:
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
            - type: string
              description: ID of the chargeable entity asset (Vehicle or Charger) which this action is controlling.
        targetType:
          $ref: '#/components/schemas/VendorType'
        kind:
          $ref: '#/components/schemas/ChargingAction'
        target:
          type: object
          oneOf:
            - $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
            - allOf:
                - $ref: '#/components/schemas/HVACSetPermanentHoldPayload'
                - type: object
                  properties:
                    holdType:
                      type: string
                      enum:
                        - PERMANENT
            - type: object
              properties:
                holdType:
                  type: string
                  enum:
                    - SCHEDULED
        targetState:
          oneOf:
            - $ref: '#/components/schemas/TargetMaxCurrent'
            - $ref: '#/components/schemas/LegacyTarget'
        createdAt:
          type: string
        updatedAt:
          type: string
        completedAt:
          type: string
          description: ISO8601 UTC timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending commands to the chargeable.
          example: '2020-04-07T17:04:26Z'
          nullable: true
        state:
          $ref: '#/components/schemas/VendorActionState'
    DEPRECATED_VendorAction:
      allOf:
        - $ref: '#/components/schemas/VendorAction'
        - type: object
          properties:
            entityId:
              type: string
              deprecated: true
            entityType:
              type: string
              example: vehicle
              enum:
                - vehicle
                - charger
                - hvac
                - inverter
              deprecated: true
            chargeableId:
              type: string
              deprecated: true
            chargeableType:
              type: string
              example: vehicle
              enum:
                - vehicle
                - charger
                - hvac
                - inverter
              deprecated: true
    VehicleVendor:
      type: string
      title: Vehicle Vendor
      description: Vehicle Vendor
      enum:
        - AUDI
        - BMW
        - HONDA
        - HYUNDAI
        - JAGUAR
        - KIA
        - MERCEDES
        - MINI
        - NISSAN
        - PEUGEOT
        - PORSCHE
        - RENAULT
        - SEAT
        - SKODA
        - TESLA
        - VOLKSWAGEN
        - VOLVO
        - FORD
        - OPEL
        - DS
        - TOYOTA
        - CITROEN
        - CUPRA
        - VAUXHALL
        - FIAT
      example: TESLA
    ChargeableVendor:
      oneOf:
        - $ref: '#/components/schemas/VehicleVendor'
        - $ref: '#/components/schemas/ChargerVendor'
    SmartOverrideResponse:
      type: object
      required:
        - userId
        - createdAt
        - endedAt
        - targetType
        - vendor
        - targetId
        - vendorActionId
      description: This field is only populated after calling the [vehicle](/api/reference#vehicleCreateSmartOverride) or [charger](/api/reference#chargerCreateSmartOverride) smart override APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The smart override remains in place until the target stops charging for any reason, or until the smart override is ended via the Delete [vehicle](/api/reference#vehicleEndSmartOverride) or [charger](/api/reference#chargerEndSmartOverride) smart override APIs.
      properties:
        userId:
          type: string
          description: ID of the User
        createdAt:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp at which the smart override was created.
          example: '2020-04-07T17:04:26Z'
        endedAt:
          type: string
          format: date-time
          nullable: true
          description: ISO8601 UTC timestamp at which the smart override was ended. If null, the smart override is still active.
          example: '2020-04-07T17:04:26Z'
        targetType:
          $ref: '#/components/schemas/ChargeableVendorType'
        vendor:
          $ref: '#/components/schemas/ChargeableVendor'
        targetId:
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
            - type: string
              description: ID of the asset (Vehicle or Charger) to which this smart override applies.
        vendorActionId:
          type: string
          description: The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results.
    MaxCurrentAction:
      type: object
      properties:
        id:
          allOf:
            - type: string
              description: The ID of the action.
            - $ref: '#/components/schemas/ReadonlyUUIDv4'
        targetId:
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
            - type: string
              description: ID of the entity asset (Charger) which this action is controlling.
        targetState:
          $ref: '#/components/schemas/TargetMaxCurrent'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
        completedAt:
          type: string
          format: date-time
          description: ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the charger.
          example: '2020-04-07T17:04:26Z'
        state:
          $ref: '#/components/schemas/VendorActionState'
    ChargingLocation:
      type: object
      required:
        - name
        - longitude
        - latitude
        - timezoneName
      properties:
        name:
          type: string
          description: User-supplied name for the Charging Location
          example: Home
        longitude:
          type: number
          description: Longitude in degrees
          example: 10.757933
        latitude:
          type: number
          description: Latitude in degrees
          example: 59.911491
        timezoneName:
          type: string
          description: An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to 'UTC'.
          default: UTC
          example: Europe/Copenhagen
    ChargingLocationResponse:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/ReadonlyUUIDv4'
        - $ref: '#/components/schemas/ChargingLocation'
    ChargingLocationList:
      type: array
      items:
        $ref: '#/components/schemas/ChargingLocationResponse'
    ChargingLocationCreateRequest:
      type: object
      required:
        - name
        - longitude
        - latitude
      additionalProperties: false
      properties:
        name:
          type: string
          description: User-supplied name for the Charging Location
          example: Home
        longitude:
          type: number
          description: Longitude in degrees
          example: 10.757933
        latitude:
          type: number
          description: Latitude in degrees
          example: 59.911491
        timezoneName:
          type: string
          description: An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to 'UTC'.
          default: UTC
          example: Europe/Copenhagen
    ChargingLocationUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: User-supplied name for the Charging Location
          example: Home
        longitude:
          type: number
          description: Longitude in degrees
          example: 10.757933
        latitude:
          type: number
          description: Latitude in degrees
          example: 59.911491
        timezoneName:
          type: string
          description: An IANA TZ database timezone name. This value will be used to convert rules and deadlines for tariffs, smart charging, and schedules into local time. Defaults to 'UTC'.
          default: UTC
          example: Europe/Copenhagen
    ChargingLocationTariff:
      type: array
      example:
        - weekday: 0
          fromHourMinute: '00:00'
          toHourMinute: '06:00'
          tariffId: testing-tariff-a
          tariffName: OFF-PEAK
        - weekday: 0
          fromHourMinute: '06:00'
          toHourMinute: '18:00'
          tariffId: testing-tariff-a
          tariffName: PEAK
      items:
        type: object
        required:
          - fromHourMinute
          - toHourMinute
          - tariffId
          - tariffName
        properties:
          weekday:
            type: number
            description: Weekday to apply the named tariff. A weekday starts with 0 for Monday, and ends with 6 for Sunday. If not specified, named tariff is applied for entire week
          fromHourMinute:
            type: string
            description: Interval from time (inclusive, UTC)
          toHourMinute:
            type: string
            description: Interval to time (exclusive, UTC)
          tariffId:
            type: string
            description: Energy Provider Tariff ID
          tariffName:
            type: string
            description: Rate name
    TariffRateInterval:
      type: object
      required:
        - name
        - from
        - to
      properties:
        name:
          type: string
          description: Rate name
          example: OFF-PEAK
        weekdays:
          type: array
          description: An array of weekdays to apply the named tariff. A weekday starts with 0 for Monday, and ends with 6 for Sunday. If not specified, named tariff is applied for entire week
          example:
            - 0
            - 1
            - 2
            - 3
            - 4
          items:
            type: integer
        from:
          type: string
          description: Interval from time (inclusive, UTC)
          example: '02:00'
          pattern: \d{2}:\d{2}
        to:
          type: string
          description: Interval to time (exclusive, UTC)
          example: '06:00'
          pattern: \d{2}:\d{2}
    ChargingLocationTariffInterval:
      type: object
      required:
        - tariffId
        - tariffIntervals
      properties:
        tariffId:
          type: string
          description: Energy Provider Tariff ID
          example: offpeaksaver
        tariffIntervals:
          type: array
          description: List of time intervals at which to apply the specified tariff rates
          example:
            - name: OFF-WEEKEND
              weekdays:
                - 5
                - 6
              from: '00:00'
              to: '06:00'
            - name: PEAK-WEEKEND
              weekdays:
                - 5
                - 6
              from: '06:00'
              to: '18:00'
            - name: 'OFF'
              weekdays:
                - 5
                - 6
              from: '18:00'
              to: '23:59'
            - name: PEAK
              from: '00:00'
              to: '18:00'
          items:
            $ref: '#/components/schemas/TariffRateInterval'
    ScheduleFilters:
      properties:
        hourMinute:
          type: object
          required:
            - from
            - to
          description: An interval composed of two clock times during which this rule applies each day. `to` always resolves to a timestamp after `from`, and thus may span across midnight and fall on the next day.
          properties:
            from:
              type: string
              description: Clock time from which this rule should apply each day.
              example: '22:00'
              pattern: \d{2}:\d{2}
            to:
              type: string
              description: Clock time until which this rule should apply each day.
              example: '04:00'
              pattern: \d{2}:\d{2}
        fromTimestamp:
          type: string
          description: UTC timestamp from which this rule should apply.
          example: '2020-01-07T16:21:76Z'
          format: date-time
        toTimestamp:
          type: string
          description: UTC timestamp until which this rule should apply.
          example: '2020-01-07T16:21:76Z'
          format: date-time
        weekdays:
          type: array
          description: An array of weekdays to which this rule should apply. A weekday starts with 0 for Monday and ends with 6 for Sunday.
          example:
            - 0
            - 1
            - 2
            - 3
            - 4
          items:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
    ScheduleChargeRule:
      type: array
      description: Each rule sets a value for `shouldCharge`, either `true` or `false`. All other properties of the rule are optional filters that limit the times to which this rule applies.
      items:
        type: object
        title: Charge Schedule
        required:
          - shouldCharge
        allOf:
          - $ref: '#/components/schemas/ScheduleFilters'
          - properties:
              shouldCharge:
                type: boolean
                description: Whether a chargeable asset should want to charge while this rule is active.
                example: true
    PartialChargeSchedule:
      title: Charge Schedule
      properties:
        targetId:
          type: string
          description: ID of the asset (Vehicle/Charger) to which this schedule applies
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
        targetType:
          $ref: '#/components/schemas/ChargeableVendorType'
        chargingLocationId:
          type: string
          description: ID of the Charging Location to which this schedule applies. The behaviour of a null value differes based on the `targetType`. For chargers, a null value is essentially ignored and the schedule is applied even if the charger isn't at a charging location.  This is designed to prevent schedules from controlling vehicles at public chargers where the user doesn't pay for electricity.
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ReadonlyUUIDv4'
        isEnabled:
          type: boolean
          description: Whether this Schedule should be attempting to control the target's charge state.
          default: true
        defaultShouldCharge:
          type: boolean
          description: When no rule is active, the default charge state for the target.
          example: false
        rules:
          $ref: '#/components/schemas/ScheduleChargeRule'
    ChargeSchedule:
      type: object
      required:
        - defaultShouldCharge
      allOf:
        - $ref: '#/components/schemas/PartialChargeSchedule'
    HvacVendorType:
      type: string
      enum:
        - hvac
    HvacTargetStateDevhub:
      type: object
      title: HVAC Target state
      description: Target mode for an HVAC device. See the [Schedules Guide](/docs/scheduling) for examples of valid target states.
      required:
        - holdType
      additionalProperties: false
      properties:
        holdType:
          description: The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device. When targeting a `SCHEDLUED` holdType, no other properties should be specified. If `PERMANENT`, at least the mode must be specified.
          type: string
          enum:
            - PERMANENT
            - SCHEDULED
        mode:
          type: string
          description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state. When specifying `HEAT` or `COOL`, the associated setpoint must be specified. Additionally, when targeting the `AUTO` state, both setpoints must be specified.
          enum:
            - AUTO
            - 'OFF'
            - HEAT
            - COOL
          example: AUTO
        heatSetpoint:
          type: number
          description: Desired heat setpoint, required when `mode` is `HEAT` or `AUTO`.
          example: 19
        coolSetpoint:
          type: number
          description: Desired cool setpoint, required when `mode` is `COOL` or `AUTO`. If both setpoints are specified, `coolSetpoint` must be larger than `heatSetpoint`.
          example: 24
    ScheduleTemperatureRule:
      type: array
      description: Each rule sets a value for `holdType` and associated settings. All other properties of the rule are optional filters that limit the times to which this rule applies.
      items:
        type: object
        title: Temperature Schedule
        required:
          - targetState
        allOf:
          - $ref: '#/components/schemas/ScheduleFilters'
          - properties:
              targetState:
                description: The target state to apply when this rule is active.
                additionalProperties: true
                allOf:
                  - $ref: '#/components/schemas/HvacTargetStateDevhub'
              targetTemperature:
                description: Deprecated. Replaced by `targetState`.
                allOf:
                  - $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
    PartialTemperatureSchedule:
      title: Temperature Schedule
      properties:
        targetId:
          type: string
          description: ID of the HVAC asset to which this schedule applies
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
        targetType:
          $ref: '#/components/schemas/HvacVendorType'
        chargingLocationId:
          type: string
          description: ID of the Charging Location to which this schedule applies. If null, the schedule is applied regardless of the HVAC's location (even if it doesn't have one).
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ReadonlyUUIDv4'
        isEnabled:
          type: boolean
          description: Whether this Schedule should be attempting to control the HVAC's temperature settings.
          default: true
        defaultTargetState:
          description: The target state to apply when no rules are active.
          allOf:
            - $ref: '#/components/schemas/HvacTargetStateDevhub'
        rules:
          $ref: '#/components/schemas/ScheduleTemperatureRule'
        defaultTarget:
          description: Deprecated. Replaced with `defaultTargetState`.
          allOf:
            - $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
    TemperatureSchedule:
      type: object
      required:
        - defaultTargetState
      allOf:
        - $ref: '#/components/schemas/PartialTemperatureSchedule'
    ScheduleResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ReadonlyUUIDv4'
      required:
        - id
        - isEnabled
        - scheduleType
        - targetType
        - targetId
        - chargingLocationId
        - rules
      oneOf:
        - allOf:
            - properties:
                scheduleType:
                  type: string
                  enum:
                    - CHARGE
            - $ref: '#/components/schemas/ChargeSchedule'
        - allOf:
            - properties:
                scheduleType:
                  type: string
                  enum:
                    - TEMPERATURE
            - $ref: '#/components/schemas/TemperatureSchedule'
    Schedule:
      allOf:
        - type: object
          required:
            - targetType
            - targetId
            - chargingLocationId
            - rules
        - anyOf:
            - $ref: '#/components/schemas/ChargeSchedule'
            - $ref: '#/components/schemas/TemperatureSchedule'
    PartialSchedule:
      type: object
      description: A Schedule that applies to the combination of a certain Charging Location and a linked asset (Vehicle/Charger/HVAC). Read the guide to [Using Schedules](/docs/scheduling).
      anyOf:
        - $ref: '#/components/schemas/PartialChargeSchedule'
        - $ref: '#/components/schemas/PartialTemperatureSchedule'
    SmartOverrideStatus:
      type: object
      required:
        - createdAt
        - endedAt
        - targetType
        - targetId
        - vendorActionId
      description: This field is only populated after calling the [vehicle](/api/reference#vehicleCreateSmartOverride) or [charger](/api/reference#chargerCreateSmartOverride) smart override APIs. While this parameter is populated, the parent charge controller will remain in an overridden state and will not attempt to send actions to the target. The smart override remains in place until the target stops charging for any reason, or until the smart override is ended via the Delete [vehicle](/api/reference#vehicleEndSmartOverride) or [charger](/api/reference#chargerEndSmartOverride) smart override APIs.
      properties:
        createdAt:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp at which the smart override was created.
          example: '2020-04-07T17:04:26Z'
        endedAt:
          type: string
          format: date-time
          nullable: true
          description: ISO8601 UTC timestamp at which the smart override was ended. If null, the smart override is still active.
          example: '2020-04-07T17:04:26Z'
        targetType:
          $ref: '#/components/schemas/ChargeableVendorType'
        targetId:
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
            - type: string
              description: ID of the asset (Vehicle or Charger) to which this smart override applies.
        vendorActionId:
          type: string
          description: The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results.
    DEPRECATED_ExternalStart:
      type: object
      nullable: true
      deprecated: true
      required:
        - createdAt
        - endedAt
        - targetType
        - targetId
        - vendorActionId
      description: Deprecated, replaced by the smartOverride field.
      properties:
        createdAt:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp at which the smart override was created.
          example: '2020-04-07T17:04:26Z'
        endedAt:
          type: string
          format: date-time
          nullable: true
          description: ISO8601 UTC timestamp at which the smart override was ended. If null, the smart override is still active.
          example: '2020-04-07T17:04:26Z'
        targetType:
          type: string
          enum:
            - vehicle
            - charger
          description: The Vendor Type of the target entity this smart override is referencing.
        targetId:
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
            - type: string
              description: ID of the asset (Vehicle or Charger) to which this smart override applies.
        vendorActionId:
          type: string
          description: The ID of Vendor Action responsible for starting charging on the target. Use the [Vehicle Get Action](/api/reference#getVehiclesAction) or the [Charger Get Action](/api/reference#getChargersAction) endpoints to monitor action results.
    ChargeScheduleStatus:
      type: object
      title: Charge schedule
      required:
        - scheduleId
        - scheduleType
        - changedAt
        - state
        - isCharging
        - isChargingExpected
        - isChargingExpectedParts
        - upcomingTransitions
        - smartOverride
        - externalStart
      properties:
        scheduleId:
          $ref: '#/components/schemas/ReadonlyUUIDv4'
        scheduleType:
          type: string
          enum:
            - CHARGE
        changedAt:
          type: string
          format: date-time
          description: Time at which any value of the status last changed
        state:
          type: string
          enum:
            - ALIGNED
            - MISALIGNED
            - PENDING
            - INACTIVE:OVERRIDDEN
            - INACTIVE:DISABLED
            - INACTIVE:AWAY
            - INACTIVE:INCAPABLE
          description: An enum value that describes the current state of the Schedule
        isCharging:
          type: boolean
          description: Whether the target is currently actually charging
          example: false
        isChargingExpected:
          type: boolean
          description: Whether the target is currently expected to be charging
          example: false
        isChargingExpectedParts:
          type: object
          description: Collection of booleans that - when combined via AND operator - forms the `isChargingExpected` value
          required:
            - needsCharge
            - isPluggedIn
            - shouldCharge
          properties:
            needsCharge:
              type: boolean
            isPluggedIn:
              type: boolean
            shouldCharge:
              type: boolean
        upcomingTransitions:
          type: array
          description: List of upcoming transitions of the `shouldCharge` or `targetTemperature` value. A maximum of 2 items are returned.
          items:
            type: object
            required:
              - at
            properties:
              at:
                $ref: '#/components/schemas/Timestamp'
              shouldCharge:
                type: boolean
              targetTemperature:
                type: number
        smartOverride:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/SmartOverrideStatus'
        externalStart:
          $ref: '#/components/schemas/DEPRECATED_ExternalStart'
    PermanentHoldTargetState:
      title: Permanent Hold
      oneOf:
        - type: object
          title: 'OFF'
          description: Target mode for an HVAC device
          required:
            - mode
          additionalProperties: false
          properties:
            holdType:
              type: string
              enum:
                - PERMANENT
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - 'OFF'
              example: 'OFF'
        - type: object
          title: AUTO
          description: Target mode for an HVAC device
          required:
            - mode
            - heatSetpoint
            - coolSetpoint
          additionalProperties: false
          properties:
            holdType:
              type: string
              enum:
                - PERMANENT
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - AUTO
              example: AUTO
            heatSetpoint:
              type: number
              description: Desired heat setpoint, required when `mode` is `HEAT` or `AUTO`.
              example: 19
            coolSetpoint:
              type: number
              description: Desired cool setpoint, required when `mode` is `COOL` or `AUTO`. If both setpoints are specified, `coolSetpoint` must be larger than `heatSetpoint`.
              example: 24
        - type: object
          title: HEAT
          description: Target mode for an HVAC device
          required:
            - mode
            - heatSetpoint
          additionalProperties: false
          properties:
            holdType:
              type: string
              enum:
                - PERMANENT
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - HEAT
              example: HEAT
            heatSetpoint:
              type: number
              description: Desired heat setpoint, required when `mode` is `HEAT` or `AUTO`.
              example: 19
        - type: object
          title: COOL
          description: Target mode for an HVAC device
          required:
            - mode
            - coolSetpoint
          additionalProperties: false
          properties:
            holdType:
              type: string
              enum:
                - PERMANENT
            mode:
              type: string
              description: Desired mode. HVAC units may specify a list of `capableModes` under capabilities. No setpoints are accepted in the `OFF` state.
              enum:
                - COOL
              example: COOL
            coolSetpoint:
              type: number
              description: Desired cool setpoint, required when `mode` is `COOL` or `AUTO`.
              example: 19
    FollowScheduleTargetState:
      title: Follow Device Schedule
      type: object
      required:
        - holdType
      properties:
        holdType:
          type: string
          enum:
            - SCHEDULED
    HvacTargetState:
      type: object
      anyOf:
        - $ref: '#/components/schemas/PermanentHoldTargetState'
        - $ref: '#/components/schemas/FollowScheduleTargetState'
    TemperatureScheduleStatus:
      type: object
      title: Temperature schedule
      required:
        - scheduleId
        - scheduleType
        - changedAt
        - state
        - expected
        - upcomingTransitions
      properties:
        scheduleId:
          $ref: '#/components/schemas/ReadonlyUUIDv4'
        scheduleType:
          type: string
          enum:
            - TEMPERATURE
        state:
          type: string
          enum:
            - ALIGNED
            - MISALIGNED
            - PENDING
            - INACTIVE:DISABLED
            - INACTIVE:INCAPABLE
          description: An enum value that describes the current state of the Schedule
        changedAt:
          type: string
          format: date-time
          description: Time at which any value of the status last changed
        current:
          oneOf:
            - $ref: '#/components/schemas/HvacTargetState'
            - $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
        expected:
          oneOf:
            - $ref: '#/components/schemas/HvacTargetState'
            - $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
        upcomingTransitions:
          type: array
          description: List of upcoming transitions. A maximum of 2 items are returned.
          items:
            type: object
            required:
              - at
            properties:
              at:
                $ref: '#/components/schemas/Timestamp'
              target:
                oneOf:
                  - $ref: '#/components/schemas/HvacTargetState'
                  - $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
    ScheduleStatusResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ChargeScheduleStatus'
        - $ref: '#/components/schemas/TemperatureScheduleStatus'
    HVACVendor:
      type: string
      title: HVAC Vendor
      description: HVAC Vendor
      enum:
        - TADO
        - MILL
        - ADAX
        - ECOBEE
        - SENSIBO
        - HONEYWELL
        - MITSUBISHI
        - MICROMATIC
        - NEST
      example: ADAX
    InverterVendor:
      type: string
      title: Inverter Vendor
      description: Inverter Vendor
      enum:
        - FRONIUS
        - GROWATT
        - SOLAREDGE
        - SOLIS
        - ENPHASE
        - GOODWE
        - SMA
        - EMA
        - HUAWEI
      example: SOLIS
    AnyVendor:
      oneOf:
        - $ref: '#/components/schemas/VehicleVendor'
        - $ref: '#/components/schemas/ChargerVendor'
        - $ref: '#/components/schemas/HVACVendor'
        - $ref: '#/components/schemas/InverterVendor'
    Me:
      type: object
      required:
        - id
        - linkedVendors
      properties:
        id:
          type: string
          example: 123456789-ABc
          minLength: 1
        linkedVendors:
          type: array
          items:
            type: object
            required:
              - vendor
              - isValid
            properties:
              vendor:
                $ref: '#/components/schemas/AnyVendor'
              isValid:
                type: boolean
                description: Whether the provided credentials are currently valid. A `false` value here indicates that a credential has become invalidated, and [Link User](/api/reference#postUsersUseridLink) should be used to get new credentials from this user.
    VehicleInformation:
      type: object
      description: Descriptive information about the Vehicle.
      required:
        - id
        - vin
        - brand
        - model
        - year
      properties:
        id:
          nullable: true
          type: string
          description: The vendor's vehicle ID. Sometimes the same as the VIN. This value is deprecated because it changes over time. Do not use this value to refer to vehicles.
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
          deprecated: true
        vin:
          nullable: true
          type: string
          description: Vehicle VIN
          example: 5YJYGDEF2LFR00942
        brand:
          nullable: true
          type: string
          description: Vehicle brand
          example: Tesla
        model:
          nullable: true
          type: string
          description: Vehicle model
          example: Model S P85
        year:
          nullable: true
          type: number
          description: Vehicle production year
          example: 2020
    DEPRECATED_ChargingReasons:
      deprecated: true
      type: array
      description: Array of string constants that explain why the car is or is not charging. May contain multiple values.
      items:
        type: string
        enum:
          - DEFAULT
          - UNKNOWN
          - NOT_PLUGGED_IN
          - FULLY_CHARGED
          - MANUALLY_STOPPED
          - MANUALLY_STARTED
          - SMART_CHARGING_DELAY
          - SMART_CHARGING_ACTIVE
          - SMART_CHARGING_DEADLINE
    VehicleChargeState:
      type: object
      description: Information about the electric or hybrid battery.
      required:
        - batteryLevel
        - range
        - isPluggedIn
        - isCharging
        - isFullyCharged
        - batteryCapacity
        - chargeLimit
        - chargeRate
        - chargeTimeRemaining
        - lastUpdated
      properties:
        batteryLevel:
          type: number
          description: Remaining battery in percent
          example: 38
          minimum: 0
          maximum: 100
          nullable: true
        range:
          type: number
          description: Estimated remaining kilometers
          example: 127.5
          minimum: 0
          nullable: true
        isPluggedIn:
          type: boolean
          description: Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)
          example: true
          nullable: true
        isCharging:
          type: boolean
          description: Current charging status of the vehicle
          example: false
          nullable: true
        isFullyCharged:
          type: boolean
          description: Indicates whether the vehicle is fully charged. 'Fully charged' may be a `batteryLevel` of less than 100 if a maximum charge ceiling has been configured in the vehicle.
          example: false
          nullable: true
        batteryCapacity:
          type: number
          description: Vehicle's maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.
          example: 73.21
          minimum: 0
          nullable: true
        chargeLimit:
          type: number
          description: Charge limit, as a percent of `batteryCapacity`.
          example: 80
          minimum: 0
          maximum: 100
          nullable: true
        chargeRate:
          type: number
          description: |-
            The current charge rate in kW.

            This property is only available when the vehicle is charging, and is `null` any other time.
          example: 40.1
          minimum: 0
          nullable: true
        chargeTimeRemaining:
          type: number
          description: |-
            Estimated time until the current charging intent is completed, in minutes.

            This property is only available when the vehicle is charging, and is `null` any other time.
          example: 319
          nullable: true
        lastUpdated:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp of last received charge state update
          example: '2020-01-07T16:21:76Z'
          nullable: true
        isChargingReasons:
          $ref: '#/components/schemas/DEPRECATED_ChargingReasons'
    VehicleSmartChargingPolicy:
      type: object
      description: '[Smart Charging](/docs/smart-charging/introduction) configuration properties. Configured via the [Update Smart Charging Policy](/api/reference#updateVehicleSmartChargingPolicy) endpoint.'
      properties:
        isEnabled:
          type: boolean
          description: When enabled, this vehicle's charging status may be controlled by [Smart Charging](/docs/smart-charging/introduction)
          example: true
          nullable: true
        deadline:
          type: string
          description: The hour-minute deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. If a timezone is set on the charging location at which the smart charging ocurrs, the deadline is interpreted in that timezone, otherwise UTC is used.
          example: '08:00'
          pattern: \d{2}:\d{2}
          nullable: true
        minimumChargeLimit:
          type: number
          description: Immediately charge without regard for energy prices until the vehicle reaches this minimum limit. The `hasChargeAboveThreshold` Smart Charge consideration uses this value. Defaults to zero.
          example: 0
          minimum: 0
          maximum: 100
    VehicleLocation:
      type: object
      description: Vehicle's GPS coordinates with timestamp
      required:
        - longitude
        - latitude
        - lastUpdated
      properties:
        longitude:
          nullable: true
          type: number
          description: Longitude in degrees
          example: 10.757933
        latitude:
          nullable: true
          type: number
          description: Latitude in degrees
          example: 59.911491
        lastUpdated:
          nullable: true
          type: string
          format: date-time
          description: ISO8601 UTC timestamp of last received location
          example: '2020-04-07T17:04:26Z'
    VehicleOdometer:
      type: object
      description: Vehicle's odometer with timestamp
      required:
        - distance
        - lastUpdated
      properties:
        distance:
          nullable: true
          type: number
          description: Odometer in kilometers
          example: 24650
        lastUpdated:
          nullable: true
          type: string
          format: date-time
          description: ISO8601 UTC timestamp of last received odometer update
          example: '2020-01-07T16:21:76Z'
    VehicleCapabilities:
      type: object
      description: A collection of descriptors that describe the capabilities of this specific vehicle
      required:
        - chargeState
        - location
        - information
        - odometer
        - startCharging
        - stopCharging
        - smartCharging
      properties:
        chargeState:
          description: Full availability of chargeState data.
          allOf:
            - $ref: '#/components/schemas/Capability'
        location:
          description: Full availability of location data.
          allOf:
            - $ref: '#/components/schemas/Capability'
        information:
          description: Full availability of information data.
          allOf:
            - $ref: '#/components/schemas/Capability'
        odometer:
          description: Full availability of odometer data.
          allOf:
            - $ref: '#/components/schemas/Capability'
        startCharging:
          description: Support for START charging command
          allOf:
            - $ref: '#/components/schemas/Capability'
        stopCharging:
          description: Support for STOP charging command
          allOf:
            - $ref: '#/components/schemas/Capability'
        smartCharging:
          description: Support for smartCharging. This value is dynamic and may change over time.
          allOf:
            - $ref: '#/components/schemas/Capability'
    Vehicle:
      type: object
      required:
        - id
        - vendor
        - lastSeen
        - isReachable
        - chargingLocationId
        - smartChargingPolicy
        - chargeState
        - location
        - information
        - odometer
        - capabilities
      properties:
        id:
          type: string
          description: Vehicle ID
        vendor:
          $ref: '#/components/schemas/VehicleVendor'
        lastSeen:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp at which live data was last available from Enode's perspective.
          nullable: true
        isReachable:
          nullable: true
          type: boolean
          description: Whether live data from the vehicle is currently available from Enode's perspective. This 'reachability' may refer to reading from a cache operated by the vehicle's cloud service if that service has determined that its cache is valid.
        chargingLocationId:
          type: string
          description: ID of the charging location the vehicle is currently positioned at (if any).
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
          nullable: true
          x-format:
            guid: true
        information:
          $ref: '#/components/schemas/VehicleInformation'
        chargeState:
          $ref: '#/components/schemas/VehicleChargeState'
        smartChargingPolicy:
          $ref: '#/components/schemas/VehicleSmartChargingPolicy'
        location:
          $ref: '#/components/schemas/VehicleLocation'
        odometer:
          $ref: '#/components/schemas/VehicleOdometer'
        capabilities:
          $ref: '#/components/schemas/VehicleCapabilities'
    ListofVehicles:
      type: array
      items:
        $ref: '#/components/schemas/Vehicle'
    ConsumingVendorType:
      type: string
      example: vehicle
      default: vehicle
      enum:
        - vehicle
        - charger
        - hvac
    ChargeRateAggregates:
      type: object
      description: Aggregate statistics for charge rate in kW
      properties:
        min:
          type: number
          example: 0
        max:
          type: number
          example: 78
        mean:
          type: number
          example: 61
      required:
        - min
        - max
        - mean
    PriceAggregates:
      type: object
      description: Aggregate statistics for power price (`<CURRENCY>` per kWh)
      properties:
        min:
          type: number
          example: 0
        max:
          type: number
          example: 78
        mean:
          type: number
          example: 61
      required:
        - min
        - max
        - mean
    NonSmartPriceAggregates:
      type: object
      description: Aggregate statistics for power price (`<CURRENCY>` per kWh), calculated as if the charging had ocurred uninterrupted without being delayed by Smart Charging
      properties:
        min:
          type: number
          example: 0
        max:
          type: number
          example: 82
        mean:
          type: number
          example: 65
      required:
        - min
        - max
        - mean
    StatisticsChargingTimeseriesSample:
      type: object
      properties:
        kw:
          $ref: '#/components/schemas/ChargeRateAggregates'
        kwhSum:
          type: number
          description: Total power consumption in kWh
          example: 120
        price:
          $ref: '#/components/schemas/PriceAggregates'
        nonSmartPrice:
          $ref: '#/components/schemas/NonSmartPriceAggregates'
        costSum:
          type: number
          description: Total cost in `<CURRENCY>`
          example: 3.14
        nonSmartCostSum:
          type: number
          description: Total cost for this consumption in `<CURRENCY>`, if it had not been shifted by Smart Charging
          example: 4.21
        estimatedSavings:
          type: number
          description: Total estimated savings in `<CURRENCY>`, achieved by Smart Charging
          example: 1.07
        date:
          type: string
          format: date-time
          description: The start date of this sample within the timeseries
      required:
        - kw
        - kwhSum
        - price
        - nonSmartPrice
        - costSum
        - nonSmartCostSum
        - estimatedSavings
        - date
    StatisticsChargingTimeseries:
      type: array
      example:
        - kw:
            min: 0
            max: 78
            mean: 61
          kwhSum: 120
          price:
            min: 13.8
            max: 14.4
            mean: 14.1
          nonSmartPrice:
            min: 12.9
            max: 16.7
            mean: 14.8
          costSum: 3.14
          nonSmartCostSum: 4.21
          estimatedSavings: 1.07
          date: '2021-01-19T09:37:36.845Z'
      items:
        $ref: '#/components/schemas/StatisticsChargingTimeseriesSample'
    NonSmartSessionPriceAggregates:
      type: object
      description: Aggregate statistics for power price (`<CURRENCY>` per kWh), calculated as if the charging had ocurred uninterrupted without being delayed by Smart Charging
      properties:
        min:
          type: number
          nullable: true
          example: 0
        max:
          type: number
          nullable: true
          example: 82
        mean:
          type: number
          nullable: true
          example: 65
      required:
        - min
        - max
        - mean
    StatisticsTimeseriesSessionSample:
      type: object
      required:
        - id
        - targetId
        - chargingLocationId
        - from
        - to
        - kw
        - kwhSum
        - price
        - costSum
        - smartSession
        - smartStats
      properties:
        id:
          type: string
          description: ID for this session.
        targetId:
          type: string
          description: ID of the hardware type for this session.
        chargingLocationId:
          type: string
          description: Charging Location ID for this session.
          nullable: true
        from:
          type: string
          format: date-time
          description: Start time.
        to:
          type: string
          format: date-time
          description: End time.
        kw:
          $ref: '#/components/schemas/ChargeRateAggregates'
        kwhSum:
          type: number
          description: Total power consumption in kWh
          example: 120
        price:
          $ref: '#/components/schemas/PriceAggregates'
        costSum:
          type: number
          description: Total cost in `<CURRENCY>`
          example: 3.14
        smartSession:
          type: boolean
          description: The values in `smartStats` will all be `null` if `smartSession` is `false`
        smartStats:
          type: object
          properties:
            nonSmartPrice:
              $ref: '#/components/schemas/NonSmartSessionPriceAggregates'
            nonSmartCostSum:
              type: number
              nullable: true
              description: Total cost for this consumption in `<CURRENCY>`, if it had not been shifted by Smart Charging
              example: 4.21
            estimatedSavings:
              type: number
              nullable: true
              description: Total estimated savings in `<CURRENCY>`, achieved by Smart Charging
              example: 1.07
    StatisticsChargingSessionTimeseries:
      type: array
      items:
        $ref: '#/components/schemas/StatisticsTimeseriesSessionSample'
    ProducingVendorType:
      type: string
      default: inverter
      enum:
        - inverter
    StatisticsProductionTimeseriesSample:
      type: object
      properties:
        kw:
          $ref: '#/components/schemas/ChargeRateAggregates'
        kwhSum:
          type: number
          description: Total power consumption in kWh
          example: 120
        price:
          $ref: '#/components/schemas/PriceAggregates'
        earningsSum:
          type: number
          description: Total earnings in `<CURRENCY>`
          example: 3.14
        date:
          type: string
          format: date-time
          description: The start date of this sample within the timeseries
      required:
        - kw
        - kwhSum
        - price
        - earningsSum
        - date
    StatisticsProductionTimeseries:
      type: array
      example:
        - kw:
            min: 0
            max: 78
            mean: 61
          kwhSum: 120
          price:
            min: 13.8
            max: 14.4
            mean: 14.1
          earningsSum: 3.14
          date: '2021-01-19T09:37:36.845Z'
      items:
        $ref: '#/components/schemas/StatisticsProductionTimeseriesSample'
    ChargeActionPayload:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/ChargingAction'
    Consideration:
      type: object
      nullable: true
      required:
        - isSmartChargeCapable
        - isPluggedIn
        - isCharging
        - recentlyAtChargingLocation
        - hasTimeEstimate
        - needsSignificantCharge
        - hasChargeAboveThreshold
        - singleUser
        - wontStopExistingChargingSession
        - likelyToGenerateSavings
      description: '`null` by default, but during the `CONSIDERING` state, the value is populated with a list of all the requirements that must be true before a plan will be created'
      properties:
        isSmartChargeCapable:
          type: boolean
          description: Vehicle has the capability 'smartCharging'
        isPluggedIn:
          type: boolean
          description: The vehicle is plugged in
        isCharging:
          type: boolean
          description: The vehicle is charging
        recentlyAtChargingLocation:
          type: boolean
          description: The vehicle is located at a configured Charging Location
        hasTimeEstimate:
          type: boolean
          description: A good estimate is available of how much time it will take to charge.
        needsSignificantCharge:
          type: boolean
          description: The charge needed is greater than 60 minutes and greater than 5% of total battery capacity
        hasChargeAboveThreshold:
          type: boolean
          description: The vehicle's `batteryLevel` is above the configured `minimumChargeLimit`. `minimumChargeLimit` defaults to zero.
        singleUser:
          type: boolean
          description: Only one user has this vehicle actively connected to Enode. Nearly always true in real use cases, but can be an issue for vehicles used in testing/development/integration.
        wontStopExistingChargingSession:
          type: boolean
          description: If charging started before the previous deadline, we assume vehicle should be left charging, and we will not create a charge plan. For example, if you start charging a vehicle at 03:00 with a deadline of 06:00 and 6 hours remaining, `wontStopExistingChargingSession` will be false once the deadline is passed. It resets to true the next time you plug in your car.
        likelyToGenerateSavings:
          type: boolean
          description: The price data available indicates that shifting the charging window will  result in price savings, or is likely to result in price savings.
    DEPRECATED_Consideration:
      type: object
      nullable: true
      deprecated: true
      required:
        - isPluggedIn
        - isCharging
        - hasTimeEstimate
        - needsSignificantCharge
        - hasChargeAboveThreshold
        - singleUser
        - confidentBatteryCapacity
        - atChargingLocation
        - locationIsFresh
        - confidentTimeEstimate
        - needsCharge
        - priceDataAvailable
        - minimumSavings
        - minimumDelay
        - isNormalSchedule
        - noCommittedDelay
      description: '`null` by default, but during the `CONSIDERING` state, the value is populated with a list of all the requirements that must be true before a plan will be created'
      properties:
        isSmartChargeCapable:
          type: boolean
          description: Vehicle has the capability 'smartCharging'
        isPluggedIn:
          type: boolean
          description: The vehicle is plugged in
        isCharging:
          type: boolean
          description: The vehicle is charging
        hasTimeEstimate:
          type: boolean
          description: A good estimate is available of how much time it will take to charge.
        needsSignificantCharge:
          type: boolean
          description: The charge needed is greater than 60 minutes and greater than 5% of total battery capacity
        hasChargeAboveThreshold:
          type: boolean
          description: The vehicle's `batteryLevel` is above the configured `minimumChargeLimit`. `minimumChargeLimit` defaults to zero.
        singleUser:
          type: boolean
          description: Only one user has this vehicle actively connected to Enode. Nearly always true in real use cases, but can be an issue for vehicles used in testing/development/integration.
        confidentBatteryCapacity:
          type: boolean
        atChargingLocation:
          type: boolean
        locationIsFresh:
          type: boolean
        confidentTimeEstimate:
          type: boolean
        needsCharge:
          type: boolean
        priceDataAvailable:
          type: boolean
        minimumSavings:
          type: boolean
        minimumDelay:
          type: boolean
        isNormalSchedule:
          type: boolean
        noCommittedDelay:
          type: boolean
    CurrencyCode:
      type: string
      description: Currency in which monetary amounts are denominated (ISO 4217 3-character Alpha code)
      example: NOK
    MonetaryAmount:
      type: number
      example: 100
    VehicleSmartChargingPlan:
      type: object
      nullable: true
      required:
        - id
        - chargingLocationId
        - vehicleId
        - userId
        - vendor
        - currency
        - nonSmartCost
        - smartCost
        - stopAt
        - startAt
        - estimatedFinishAt
        - stopConfirmedAt
        - startConfirmedAt
        - endedAt
        - finalState
        - failureCondition
      properties:
        id:
          type: string
          description: ID of the Plan
        chargingLocationId:
          type: string
          description: ID of the charging location at which the plan is being executed. Null for plans started before March 2022.
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
          nullable: true
          x-format:
            guid: true
        vehicleId:
          type: string
          description: ID of the Vehicle to which the Plan belongs
        userId:
          type: string
          description: ID of the User to which the Plan belongs
        vendor:
          type: string
          description: Vendor of the Vehicle to which the Plan belongs
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        nonSmartCost:
          allOf:
            - $ref: '#/components/schemas/MonetaryAmount'
            - type: number
              description: Estimated cost of default charging behavior
        smartCost:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/MonetaryAmount'
            - type: number
              description: Estimated cost achieved by this Smart Charge plan
        stopAt:
          type: string
          format: date-time
          description: Time at which the vehicle will stop charging
        startAt:
          nullable: true
          type: string
          format: date-time
          description: Time at which the vehicle will start charging
        estimatedFinishAt:
          type: string
          format: date-time
          description: Time at which charging is estimated to be complete
        stopConfirmedAt:
          nullable: true
          type: string
          format: date-time
          description: Time at which the vehicle's charging was confirmed as stopped.
        startConfirmedAt:
          nullable: true
          type: string
          format: date-time
          description: Time at which the vehicle's charging was confirmed as started.
        endedAt:
          nullable: true
          type: string
          format: date-time
          description: The actual time at which the plan ended
        finalState:
          nullable: true
          type: string
          enum:
            - PLAN:ENDED:FINISHED
            - PLAN:ENDED:UNPLUGGED
            - PLAN:ENDED:FAILED
            - PLAN:ENDED:DISABLED
            - PLAN:ENDED:DEADLINE_CHANGED
          description: The final state of the plan when it ended
        failureCondition:
          nullable: true
          type: string
          enum:
            - STOP_FAILED
            - START_FAILED
            - FINISHED_LATE
            - UNKNOWN
          description: If the finalState was PLAN:ENDED:FAILED, failureCondition is populated with the condition in which the plan failed.
        externalStart:
          $ref: '#/components/schemas/DEPRECATED_ExternalStart'
    VehicleSmartChargingStatus:
      type: object
      required:
        - updatedAt
        - vehicleId
        - userId
        - vendor
        - state
        - stateChangedAt
        - consideration
        - plan
        - externalStart
        - smartOverride
      properties:
        updatedAt:
          type: string
          format: date-time
          description: Time at which the SmartChargingStatus object was recalculated, whether or not any values actually changed
        vehicleId:
          type: string
          description: Vehicle ID
        userId:
          type: string
          description: User ID
        vendor:
          type: string
          description: Vendor of the Vehicle
        state:
          type: string
          enum:
            - DISABLED
            - CONSIDERING
            - UNKNOWN
            - PLAN:EXECUTING:STOPPING
            - PLAN:EXECUTING:STOP_FAILED
            - PLAN:EXECUTING:STOPPED
            - PLAN:EXECUTING:STOPPED:AWAITING_PRICES
            - PLAN:EXECUTING:STARTING
            - PLAN:EXECUTING:START_FAILED
            - PLAN:EXECUTING:STARTED
            - PLAN:EXECUTING:CHARGE_INTERRUPTED
            - PLAN:EXECUTING:OVERRIDDEN
            - PLAN:ENDED:FINISHED
            - PLAN:ENDED:UNPLUGGED
            - PLAN:ENDED:FAILED
            - PLAN:ENDED:DISABLED
            - PLAN:ENDED:DEADLINE_CHANGED
          description: An enum value that describes the current SmartCharging state of the vehicle. Every vehicle is in exactly one state, at all times
        stateChangedAt:
          type: string
          format: date-time
          description: Time at which the the 'state' property transitioned to its current value
        consideration:
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/Consideration'
            - $ref: '#/components/schemas/DEPRECATED_Consideration'
        plan:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/VehicleSmartChargingPlan'
            - type: object
              description: '`null` by default, but during all of the `PLAN:*` states,  the value is populated with a description of the active plan'
        smartOverride:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/SmartOverrideStatus'
    Scopes:
      type: string
      enum:
        - offline_access
        - all
        - vehicle:smart_charging_policy
        - vehicle:charge_state
        - vehicle:location
        - vehicle:odometer
        - vehicle:information
        - control:vehicle:charging
        - charger:charge_state
        - charger:information
        - control:charger:charging
        - charging_location
        - schedule
        - hvac:information
        - control:hvac:temperature
        - hvac:temperature_state
    LinkUserOptions:
      type: object
      nullable: true
      properties:
        vendor:
          allOf:
            - $ref: '#/components/schemas/AnyVendor'
            - type: string
              description: Skip the vendor selection screen and present the credential input for a specific vendor immediately.
        vendorType:
          allOf:
            - $ref: '#/components/schemas/VendorType'
            - type: string
              description: Sets the type of vendors available for connection in a Link UI session. If absent, this defaults to `vehicle`.
        forceLanguage:
          oneOf:
            - type: string
              description: BCP47 language code - Force the Link UI to prefer the specified language. If omitted, the UI will default to the User's browser default language.
              example: nb
              enum:
                - en
                - de
                - nb
                - sv
                - ja
                - es
                - fr
                - nl
                - ro
                - pt
                - fi
            - type: string
              description: BCP47 language code - Force the Link UI to prefer the specified language. If omitted, the UI will default to the User's browser default language.
              example: nb
              pattern: \w{2}-\w{2}
              deprecated: true
        scopes:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Scopes'
          description: The scope(s) you wish to request access to when linking an asset.
          example:
            - offline_access
            - all
        redirectUri:
          type: string
          description: A URI to redirect the user to after successfully linking an asset.
          example: myapp://integrations/enode
    LinkUserResponse:
      type: object
      required:
        - linkState
        - linkUrl
      properties:
        linkState:
          type: string
          example: ZjE2MzMxMGFiYmU4MzcxOTU1ZmRjMTU5NGU2ZmE4YTU3NjViMzIwY2YzNG
        linkUrl:
          type: string
          example: https://link.production.enode.io?link_state=YzIwZThhYjYtMjMzMi00ZTAyLTg0OTYtYzdjOTlhZTY3Zjc3QDI2YzI1MDExLTdhYTctNGE2NS1iNjBmLTZmMzc5NmRhODUyMDowNDViYjFiYmE0M2Y5NDU5YTc5OTgxZmEyYTg1NmI4YzhkOGU4YjgyNmNmMzQzZmFmMGNhZTlmNDBjMmZmOTgy&requested_scope=vehicle%3Alocation%20vehicle%3Aodometer&redirect_uri=myapp%3A%2F%2Fintegrations%2Fenode
    TestFirehoseWebhook:
      type: object
      properties:
        status:
          type: string
          description: Indicates if the test webhook event was delivered successfully to your configured webhook endpoint.
          example: SUCCESS
        description:
          type: string
          example: Successful
          description: Human readable description of the test outcome.
        response:
          type: object
          properties:
            code:
              type: number
              example: 200
              description: Status code returned by your configured webhook endpoint
            body:
              type: string
              example: '{}'
              description: Body returned by your configured webhook endpoint
            headers:
              type: array
              description: Headers returned by your configured webhook endpoint
              example:
                - 'content-type: application/json; charset=utf-8'
              nullable: true
              items:
                type: string
    UpdateFirehoseWebhookPayload:
      type: object
      description: Update Firehose Webhook
      required:
        - secret
        - url
      properties:
        secret:
          type: string
          description: A cryptographically secure secret, generated and provided by your client.
          example: 0Kvs1tAUQ69FOMBiWlt5XJSrruXMhWDiVbyrWaNm
        url:
          type: string
          description: The HTTPS url to which Enode should POST the event payload when a watched property changes.
          example: https://brainpower.co/enode-webhooks/firehose
          x-format:
            uri: true
    DeleteFirehoseWebhook:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: The HTTPS url of the webhook to be deleted
          example: https://brainpower.co/enode-webhooks/firehose
          x-format:
            uri: true
    TariffIntervalName:
      type: string
      description: Per-tariff unique interval name
      example: OFF-PEAK
    TariffIntervalCost:
      type: string
      description: Rate cost (decimal string)
      pattern: ^[+-]?(\d{1,9}([.]\d{0,9})?|[.]\d{1,9})$
      example: '12.34'
    TariffRate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/TariffIntervalName'
        cost:
          $ref: '#/components/schemas/TariffIntervalCost'
    Tariff:
      type: array
      description: A list of rates with unique name and price.
      example:
        - name: PEAK
          cost: '13.37'
        - name: OFF-PEAK
          cost: '12.34'
      items:
        $ref: '#/components/schemas/TariffRate'
    HVACList:
      type: string
      description: HVAC IDs
    HVACActionState:
      description: Current state of the HVAC action
      anyOf:
        - type: string
          title: PENDING
          description: The initial state. We are actively retrying commands and polling the HVAC device for changes in `targetTemperature`.
        - type: string
          title: CONFIRMED
          description: The HVAC device has confirmed that the requested `targetTemperature` has been applied.
        - type: string
          title: FAILED
          description: The HVAC device failed to respond to our attempts to set the `targetTemperature` within 30 minutes. We have given up sending actions to the device.
        - type: string
          title: CANCELLED
          description: Another HVAC action was sent to the same device, canceling this one.
    HvacAction:
      type: object
      properties:
        id:
          allOf:
            - type: string
              description: The ID of the action.
            - $ref: '#/components/schemas/ReadonlyUUIDv4'
        targetId:
          allOf:
            - $ref: '#/components/schemas/ArbitraryId'
            - type: string
              description: ID of the entity asset (HVAC) which this action is controlling.
        targetType:
          $ref: '#/components/schemas/HvacVendorType'
        targetTemperature:
          $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
        target:
          $ref: '#/components/schemas/HvacTargetStateDevhub'
        createdAt:
          $ref: '#/components/schemas/Timestamp'
        updatedAt:
          $ref: '#/components/schemas/Timestamp'
        completedAt:
          type: string
          format: date-time
          description: ISO8601 UTC Timestamp at which the action transitioned to a non-pending state. If this value is set, then we are no longer sending temperature commands to the HVAC device.
          example: '2020-04-07T17:04:26Z'
        state:
          $ref: '#/components/schemas/HVACActionState'
    HVACInformation:
      type: object
      description: Descriptive information about the HVAC unit
      properties:
        brand:
          type: string
          description: Display name of OEM/vendor
          example: ADAX
        model:
          type: string
          nullable: true
          description: Device model name
          example: Neo Wi-Fi Skirting
        displayName:
          type: string
          description: Name of the device, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names.
          example: Bedroom Panel Heater
        groupName:
          type: string
          nullable: true
          description: Name of the group the device belongs to, as set by the user on the device/vendor. Groups are typically presented as "rooms" or "zones".
          example: Bedroom
        category:
          type: string
          enum:
            - HEATING
            - COOLING
            - HEAT_PUMP
            - AGGREGATOR
          description: HVAC category
          example: HEATING
    HvacMode:
      type: string
      description: The HVAC's mode.
      enum:
        - HEAT
        - COOL
        - AUTO
        - 'OFF'
      example: HEAT
    HvacHoldType:
      type: string
      nullable: false
      description: The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.
      enum:
        - PERMANENT
        - SCHEDULED
      example: PERMANENT
    NullableTemperatureRange:
      type: object
      properties:
        min:
          type: number
          nullable: true
          description: The minimum allowable temperature, inclusive.
          example: 15
        max:
          type: number
          nullable: true
          description: The maximum allowable temperature, inclusive.
          example: 25
    HVAC:
      type: object
      required:
        - id
        - vendor
        - lastSeen
        - isReachable
        - targetTemperature
        - information
        - capabilities
      properties:
        id:
          type: string
          description: HVAC device ID
          example: 8f39fa8d-8f10-4984-a319-741dc23848c0
        vendor:
          $ref: '#/components/schemas/HVACVendor'
        lastSeen:
          type: string
          nullable: true
          format: date-time
          description: The last time the HVAC unit was successfully communicated with
          example: '2020-04-07T17:04:26Z'
        isReachable:
          type: boolean
          description: Whether live data from the HVAC unit is currently fetchable from Enode's perspective. It can happen that this 'reachability' refers to reading from a cache operated by the vendor's cloud service, if that service has determined that its cache is valid.
          example: true
        chargingLocationId:
          nullable: true
          type: string
          description: ID of the charging location the HVAC unit is housed at (if any)
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
        isActive:
          type: boolean
          description: Whether the HVAC unit is actively heating or cooling.
          example: true
        currentTemperature:
          type: number
          nullable: true
          description: Current air temperature reported by device in degrees Celsius.
          example: 20.8
        targetTemperature:
          $ref: '#/components/schemas/DEPRECATED_TargetTemperature'
        consumptionRate:
          type: number
          nullable: true
          description: The current rate of energy consumption in kW. An inactive HVAC will have a consumption rate of 0. This value is currently experimental and is typically estimated with a large margin of error.
          minimum: 0
          example: 1.8
        mode:
          type: string
          nullable: true
          description: The HVAC's mode.
          enum:
            - HEAT
            - COOL
            - AUTO
            - 'OFF'
          example: HEAT
        heatSetpoint:
          type: number
          nullable: true
          description: If mode allows, heat when `currentTemperature` falls below this point.
          example: 22
        coolSetpoint:
          type: number
          nullable: true
          description: If mode allows, cool when `currentTemperature` rises above this point.
          example: 24
        holdType:
          type: string
          nullable: true
          description: The duration the setpoints and mode are expected to be held. If `SCHEDULED`, the device is being controlled by an OEM schedule configured on the device.
          enum:
            - PERMANENT
            - SCHEDULED
          example: PERMANENT
        information:
          $ref: '#/components/schemas/HVACInformation'
        capabilities:
          type: object
          description: An object describing valid states for this HVAC device.
          properties:
            capableModes:
              nullable: true
              type: array
              example:
                - HEAT
                - COOL
                - 'OFF'
              description: A list of valid modes for this HVAC device.
              items:
                $ref: '#/components/schemas/HvacMode'
              minItems: 0
              maxItems: 4
            capableHoldTypes:
              nullable: true
              type: array
              example:
                - PERMANENT
              description: A list of valid hold types for this HVAC device.
              items:
                $ref: '#/components/schemas/HvacHoldType'
            coolSetpointRange:
              nullable: true
              description: The range of allowable values for `coolSetpoint`.
              allOf:
                - $ref: '#/components/schemas/NullableTemperatureRange'
            heatSetpointRange:
              nullable: true
              description: The range of allowable values for `heatSetpoint`.
              allOf:
                - $ref: '#/components/schemas/NullableTemperatureRange'
            setpointDifferenceRange:
              nullable: true
              description: A range describing how close `heatSetpoint` and `coolSetpoint` can be. Only relevant in `AUTO` mode.
              allOf:
                - $ref: '#/components/schemas/NullableTemperatureRange'
    HVACUpdatePayload:
      type: object
      properties:
        chargingLocationId:
          type: string
          format: uuid
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
      required:
        - chargingLocationId
    InverterList:
      type: string
      description: Solar inverter IDs
    InverterProductionState:
      type: object
      properties:
        productionRate:
          type: number
          description: The current production rate in kW.
          example: 1.8
          minimum: 0
          nullable: true
        isProducing:
          type: boolean
          description: Whether the solar inverter is actively producing energy or not.
          readOnly: true
          example: true
          nullable: true
        lastUpdated:
          type: string
          format: date-time
          description: ISO8601 UTC timestamp of last received production state update
          example: '2022-04-07T16:21:76Z'
          nullable: true
      required:
        - isProducing
        - lastUpdated
    InverterInformation:
      type: object
      description: Descriptive information about the solar inverter
      properties:
        id:
          type: string
          description: Solar inverter vendor ID
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
        brand:
          type: string
          description: Solar inverter brand
          example: SMA
        model:
          type: string
          description: Solar inverter model
          example: Sunny Boy
        siteName:
          type: string
          description: Name of the site, as set by the user on the device/vendor. If no user-specified name is available, we construct a fallback name using the vendor/device/model names.
          example: Sunny plant
        installationDate:
          type: string
          format: date-time
          description: Solar inverter installation date
          example: '2020-04-05'
    InverterLocation:
      type: object
      description: Solar inverter's GPS coordinates with timestamp
      properties:
        longitude:
          type: number
          description: Longitude in degrees
          example: 10.757933
          nullable: true
        latitude:
          type: number
          description: Latitude in degrees
          example: 59.911491
          nullable: true
    Inverter:
      type: object
      properties:
        id:
          type: string
          description: Solar inverter ID
          readOnly: true
        vendor:
          allOf:
            - $ref: '#/components/schemas/InverterVendor'
            - type: string
              readOnly: true
        chargingLocationId:
          type: string
          description: ID of the charging location the solar inverter is currently positioned at (if any).
          example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe
          nullable: true
          x-format:
            guid: true
        lastSeen:
          type: string
          format: date-time
          description: The last time the solar inverter was successfully communicated with
          example: '2022-04-07T17:04:26Z'
          readOnly: true
        isReachable:
          type: boolean
          description: Whether live data from the solar inverter is currently fetchable from Enode's perspective. This 'reachability' may refer to reading from a cache operated by the solar inverter's cloud service if that service has determined that its cache is valid.
          readOnly: true
          example: true
        productionState:
          $ref: '#/components/schemas/InverterProductionState'
        information:
          $ref: '#/components/schemas/InverterInformation'
        location:
          $ref: '#/components/schemas/InverterLocation'
      required:
        - id
        - vendor
        - lastSeen
        - isReachable
        - productionState
        - information
        - location
  parameters:
    ChargerPathId:
      description: ID of the Charger
      name: chargerId
      in: path
      required: true
      schema:
        type: string
        minLength: 1
    ChargerFieldParameter:
      description: |-
        If you specify any fields here, we make a request to the Charger's OEM APIs and return the updated data.

         This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the `lastSeen` & `isReachable` fields on the charger).

        By default, no fields are included, and the latest cached full Charger object will be returned.
      name: field
      in: query
      explode: true
      schema:
        oneOf:
          - type: array
            items:
              type: string
              enum:
                - information
                - chargeState
                - location
                - capabilities
            minItems: 0
            maxItems: 4
          - type: string
            enum:
              - information
              - chargeState
              - location
              - capabilities
    ActionPathId:
      description: ID of the Action
      name: vendorActionId
      in: path
      required: true
      schema:
        type: string
        minLength: 1
    PathScheduleId:
      description: ID of the Schedule.
      x-format:
        guid: true
      name: scheduleId
      in: path
      required: true
      schema:
        type: string
    VehicleFieldParameter:
      description: |-
        If you specify any fields here, we make a request to the Vehicle's OEM APIs and return the updated data.

         This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the `lastSeen` & `isReachable` fields on the vehicle).

         Note that the field values `capabilities` & `smartChargingPolicy` are deprecated and will always be returned. 

         If no fields are included, and the latest cached full Vehicle object will be returned.
      name: field
      in: query
      style: form
      explode: true
      schema:
        oneOf:
          - type: array
            items:
              type: string
              enum:
                - chargeState
                - location
                - information
                - odometer
                - capabilities
                - smartChargingPolicy
            minItems: 0
            maxItems: 6
          - type: string
            enum:
              - chargeState
              - location
              - information
              - odometer
              - capabilities
              - smartChargingPolicy
    VehiclePathId:
      description: ID of the Vehicle.
      name: vehicleId
      in: path
      required: true
      schema:
        type: string
        minLength: 1
    SmartChargingPlanPathId:
      description: ID of the Smart Charging Plan
      name: smartChargingPlanId
      in: path
      required: true
      schema:
        type: string
        minLength: 1
    TariffPathId:
      description: ID of the Tariff
      name: tariffId
      required: true
      in: path
      schema:
        type: string
        pattern: '[w-]+'
        maxLength: 36
    HvacPathId:
      description: ID of the HVAC
      name: hvacId
      in: path
      required: true
      schema:
        type: string
        minLength: 1
    InverterPathId:
      description: ID of the solar inverter
      name: inverterId
      in: path
      required: true
      schema:
        type: string
        minLength: 1
    InverterFieldParameter:
      description: |-
        If you specify any fields here, we make a request to the Solar inverter's OEM APIs and return the updated data.

         This will slow down your integration. In cases of vendor downtime requests with fields may take up to a minute to complete, while requests without fields will always be fast. Enode polls all devices connected to our platform, so any cached data returned will not be older than 10 minutes (unless the vendor APIs are unavailable, in which case you can consult the `lastSeen` & `isReachable` fields on the solar inverter).

        By default, no fields are included, and the latest cached full solar inverter object will be returned.
      name: field
      in: query
      explode: true
      schema:
        oneOf:
          - type: array
            items:
              type: string
              enum:
                - information
                - productionState
                - location
            minItems: 0
            maxItems: 3
          - type: string
            enum:
              - information
              - productionState
              - location
